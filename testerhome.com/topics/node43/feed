<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>TesterHome 社区 MonkeyTalk 节点</title>
    <link>http://testerhome.com/</link>
    <description>TesterHome 社区 MonkeyTalk 节点最新发帖.</description>
    <item>
      <title>学习 MonkeyTalk 以及实践</title>
      <description>&lt;p&gt;&lt;a href="/weamylady" class="at_user" title="@weamylady"&gt;&lt;i&gt;@&lt;/i&gt;weamylady&lt;/a&gt;同学发了好几篇关于MonkeyTalk的文章，今天大周末的有时间来学习学习。感谢&lt;a href="/weamylady" class="at_user" title="@weamylady"&gt;&lt;i&gt;@&lt;/i&gt;weamylady&lt;/a&gt; 同学的翻译&lt;/p&gt;
&lt;h4&gt;IDE&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://www.cloudmonkeymobile.com/download/monkeytalk-professional" target="_blank"&gt;下载地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我选择的是Pro版本。下载完成安装后目录结构如下：&lt;/p&gt;

&lt;p&gt;&lt;img src="/photo/2015/cef9bdc7525c1920e906754ac2eac57c.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;点击&lt;code&gt;MonkeyTalkIDEProfessional.app&lt;/code&gt;启动IDE.与eclipse的启动步骤是类似的，首先选择workspace，然后进入欢迎界面：&lt;/p&gt;

&lt;p&gt;&lt;img src="/photo/2015/c734cbf1f39812db2787fc6cf3f61314.png" alt=""&gt;&lt;/p&gt;
&lt;h4&gt;Android&lt;/h4&gt;&lt;h4&gt;1.创建第一个测试项目&lt;/h4&gt;
&lt;p&gt;然后我们&lt;a href="https://www.cloudmonkeymobile.com/monkeytalk-documentation/monkeytalk-getting-started/create-testing-project2" target="_blank"&gt;创建第一个monkeytalk项目&lt;/a&gt;。选择android节点后需要导入sdk路径以及apk。apk选择IDE目录下的demo应用。&lt;/p&gt;

&lt;p&gt;&lt;img src="/photo/2015/e92ebbd8520dd260fcfa74cd7960653f.png" alt=""&gt;&lt;br&gt;
&lt;img src="/photo/2015/df26f8e4830c5d738378dbf4dd58e5a1.png" alt=""&gt;&lt;br&gt;
&lt;img src="/photo/2015/106e3d646d5362988058a26c3f7d6b6f.png" alt=""&gt;&lt;br&gt;
&lt;img src="/photo/2015/77aa1c8b44aca091d0d4001969042e03.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;进入项目后，我们需要将Android 模拟器启动。&lt;/p&gt;

&lt;p&gt;&lt;img src="/photo/2015/251e32fa5cdc4e3a832c32acdac93ddd.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;模拟器启动成功后，我们在面板上点击android机器人图标，选择&lt;code&gt;Connect to emulator [device id]&lt;/code&gt;,连接成功后，控制台会输出如下信息：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;13:50:22.218: Connection type set to: Android Emulator or Tethered Device&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;2.安装apk到模拟器中&lt;/h4&gt;
&lt;p&gt;因为在创建项目的时候已经选择了被测apk，这个时候只需要点击面板上的&lt;code&gt;install&lt;/code&gt;按钮，安装成功后会出现&lt;code&gt;MonkeyTalkDemo&lt;/code&gt;应用图标：&lt;/p&gt;

&lt;p&gt;&lt;img src="/photo/2015/1fa96ba8ef2ba529b52b759acbbbe8a9.png" alt=""&gt;&lt;/p&gt;
&lt;h4&gt;3.启动应用&lt;/h4&gt;
&lt;p&gt;点击面板上的&lt;code&gt;Relaunch&lt;/code&gt;图标，将应用启动.这个时候再次连接设备。控制台会输出如下信息：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;14:00:29.619: Android agent(2.0.10_4 - 2014-12-13 17:07:55 EST)&lt;br&gt;
14:00:29.624: Connection type set to: Android Emulator or Tethered Device&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;说明我们链接成功了agent。&lt;/p&gt;
&lt;h4&gt;4.第一个命令&lt;/h4&gt;
&lt;p&gt;在脚本中输入第一个命令：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Button LOGIN Tap&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;执行该命令后，控制台输出：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;14:00:52.460: Started Script Playback&lt;br&gt;
14:00:52.497: Button LOGIN Tap&lt;br&gt;
14:00:53.054: Completed Script Playback - OK&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;速度真的很快!惊诧了时光......&lt;/p&gt;
&lt;h4&gt;IOS&lt;/h4&gt;&lt;h4&gt;1.创建测试项目&lt;/h4&gt;
&lt;p&gt;过程和android测试项目大致一样，就是选择节点的时候选择ios。&lt;/p&gt;
&lt;h4&gt;安装应用&lt;/h4&gt;
&lt;p&gt;这个地方和android存在区别，需要通过xcode来安装。首先在样例目录下双击&lt;code&gt;Demo.xcodeproj&lt;/code&gt;文件启动xcode。&lt;/p&gt;

&lt;p&gt;&lt;img src="/photo/2015/153c01d6e6bc882ec1741e74a9cce18d.png" alt=""&gt;&lt;br&gt;
&lt;img src="/photo/2015/c88d5c08329738be4b3d77175cafe24e.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;启动成功后的界面如上所示，然后运行应用，xcode会自动启动模拟器然后将应用启动。&lt;/p&gt;

&lt;p&gt;&lt;img src="/photo/2015/ee63dfaf1f04e30d413c66067903b934.png" alt=""&gt;&lt;/p&gt;
&lt;h4&gt;连接ios模拟器&lt;/h4&gt;
&lt;p&gt;操作步骤和android类似，只是这个时候连接的设备为&lt;code&gt;iOS Simulator&lt;/code&gt;.连接成功后，控制台会输出：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;14:26:18.034: iOS agent(2.0.10_4 - 2014-12-13 17:09:42 EST)&lt;br&gt;
14:26:18.088: Connection type set to: iOS Simulator&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;执行命令&lt;/h4&gt;
&lt;p&gt;执行的命令和android的一模一样。执行后输出：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;14:27:33.605: Started Script Playback&lt;br&gt;
14:27:33.625: Button LOGIN Tap&lt;br&gt;
14:27:34.133: Completed Script Playback - OK&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="/photo/2015/0a0ea3d84aeebdbd837755a86d25f5e6.png" alt=""&gt;&lt;/p&gt;
&lt;h4&gt;总结&lt;/h4&gt;
&lt;p&gt;1.IDE类似eclipse的界面，对于使用eclipse的人来说，比较容易接受。&lt;br&gt;
2.命令简单，不同平台公用一套代码。&lt;br&gt;
3.速度是真快。&lt;br&gt;
4.界面上还存在一些bug，比较困惑。&lt;/p&gt;</description>
      <author>doctorq</author>
      <pubDate>Sun, 18 Jan 2015 14:29:46 +0800</pubDate>
      <link>http://testerhome.com/topics/1894</link>
      <guid>http://testerhome.com/topics/1894</guid>
    </item>
    <item>
      <title>【翻译原创】（三）MonkeyTalk 用户手册 - IDE 及 Agent 的安装</title>
      <description>&lt;p&gt;由于用户手册的内容实在太多，会分多个章节来翻译，本章节已完成。&lt;/p&gt;

&lt;p&gt;概述：&lt;br&gt;
在这里你会找到如何使用MonkeyTalk的完整的列表。如果你仍然对MonkeyTalk存在问题，请查看我们免费的社区论坛或者了解更多我们的包年支持服务，它可以让你与MonkeyTalk的创造者直接交流与获得帮助。&lt;/p&gt;

&lt;p&gt;安装MonkeyTalk：&lt;br&gt;
1，首先，你必须安装MonkeyTalkIDE，请查看《安装手册》取得详细的帮助：&lt;br&gt;
&lt;a href="http://www.cloudmonkeymobile.com/monkeytalk-documentation/monkeytalk-getting-started/install-ide" rel="nofollow" target="_blank"&gt;http://www.cloudmonkeymobile.com/monkeytalk-documentation/monkeytalk-getting-started/install-ide&lt;/a&gt;&lt;br&gt;
2，然后，你必须在你的Android或者iOS应用（或者两者皆有的跨平台测试）上面安装MonkeyTalk Agent。根据你的平台查看不同的安装手册：&lt;br&gt;
&lt;a href="http://www.cloudmonkeymobile.com/monkeytalk-documentation/monkeytalk-getting-started/install-agent/ios" rel="nofollow" target="_blank"&gt;http://www.cloudmonkeymobile.com/monkeytalk-documentation/monkeytalk-getting-started/install-agent/ios&lt;/a&gt;&lt;br&gt;
&lt;a href="http://www.cloudmonkeymobile.com/monkeytalk-documentation/monkeytalk-getting-started/install-agent/android" rel="nofollow" target="_blank"&gt;http://www.cloudmonkeymobile.com/monkeytalk-documentation/monkeytalk-getting-started/install-agent/android&lt;/a&gt;&lt;br&gt;
3，想要自动构建启用MonkeyTalk的App请参考如何使用Ant进行构建：&lt;br&gt;
&lt;a href="https://www.cloudmonkeymobile.com/monkeytalk-documentation/monkeytalk-user-guide/installing-monkeytalk/building-ant" rel="nofollow" target="_blank"&gt;https://www.cloudmonkeymobile.com/monkeytalk-documentation/monkeytalk-user-guide/installing-monkeytalk/building-ant&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;使用Ant进行构建(build with Ant)：&lt;br&gt;
为了构建一个启用MonkeyTalk的应用程序，第一步是下载并安装AspectJ.工具。你可以从 &lt;a href="http://www.eclipse.org/aspectj/downloads.php" rel="nofollow" target="_blank"&gt;http://www.eclipse.org/aspectj/downloads.php&lt;/a&gt; 处下载最新稳定版本，解压Jar包并记住文件路径。&lt;br&gt;
要使用终端为你的Android项目创建buld.xml，首先打开终端并进入到你的项目路径，然后输入：&lt;/p&gt;
&lt;pre class="highlight shell"&gt;android update project --target android-minSDKlevel --path .
&lt;/pre&gt;

&lt;p&gt;要与MonkeyTalk Agent一起build，把samples/android目录下的MonkeyTalk Demo1的custom_rules.xml拷贝到与build.xml相同的目录，然后把monkeytalk-agent.jar添加到你的Android项目库中。&lt;br&gt;
最后使用Ant命令运行：&lt;/p&gt;
&lt;pre class="highlight shell"&gt;ant clean debug -Dsdk.dir&lt;span class="o"&gt;=&lt;/span&gt;/your/android-sdk -Daspectj.dir&lt;span class="o"&gt;=&lt;/span&gt;/your/aspectj-1.2.3
&lt;/pre&gt;

&lt;p&gt;现在你就可以自动构建启用MonkeyTalk的应用程序了。&lt;/p&gt;

&lt;p&gt;装备你的应用：（就是在应用上插如Agent）&lt;br&gt;
如何安装MonkeyTalk Agent&lt;br&gt;
如果你想直接尝试MonkeyTalk，你可以尝试使用我们的Sample应用，你可以在MonkeyTalk安装压缩文件的samples 文件夹中找到这些应用。这些应用都已经植入了MonkeyTalk Agent，这样你就可以直接安装打开它们，然后跳到&lt;a href="https://www.cloudmonkeymobile.com/monkeytalk-documentation/monkeytalk-getting-started/about-ide" rel="nofollow" target="_blank"&gt;https://www.cloudmonkeymobile.com/monkeytalk-documentation/monkeytalk-getting-started/about-ide&lt;/a&gt; 去了解我们的IDE功能。如果你想设置自己的应用程序，请继续下一步。&lt;br&gt;
&lt;img src="/photo/2015/ee3acbd036070a56ed255cc3af91aa73.jpg" alt=""&gt;&lt;br&gt;
你可以在MonkeyTalk安装压缩文件的agents文件夹下找到这些Agent，它们在不同标签的子文件夹下。iOS的Agent在agents/ios文件夹，Android的在agents/android文件夹。每个平台的Agent的安装都是不一样的。&lt;br&gt;
&lt;img src="/photo/2015/19ede23b4957661b024cc691878fb648.jpg" alt=""&gt;&lt;br&gt;
接下来的内容是不同平台的安装说明。&lt;/p&gt;

&lt;p&gt;IOS：&lt;br&gt;
安装MonkeyTalk IOS Agent：&lt;br&gt;
1，在你的操作系统上下载MonkeyTalk 压缩文件。&lt;br&gt;
2，在XCode上打开你的应用项目。&lt;br&gt;
3，右键选择你的Build Target然后选择Duplicate命令复制你的构建目标：&lt;br&gt;
&lt;img src="/photo/2015/8293ac1ab12eee94797814bbbbe2cc7f.png" alt=""&gt;&lt;br&gt;
重命名你复制的文件为YourAppMonkey之类的名字：&lt;br&gt;
&lt;img src="/photo/2015/11bae94413d8634b4e7847ba4bb708a5.png" alt=""&gt;&lt;br&gt;
它看起来是这样的：&lt;br&gt;
&lt;img src="/photo/2015/93d1d2d3128e856838100ccd36d27986.png" alt=""&gt;&lt;br&gt;
你也许想在Schemes窗口中重命名你的Scheme：&lt;br&gt;
&lt;img src="/photo/2015/e20f44db9ae86af4e2942fbd137c594f.png" alt=""&gt;&lt;br&gt;
&lt;img src="/photo/2015/dfd2e4f77a9a075975530a8641e2f51c.png" alt=""&gt;&lt;br&gt;
4，从菜单File &amp;gt; Add to “YourApp”...添加下载下来的MonkeyTalk库文件：&lt;br&gt;
&lt;img src="/photo/2015/5ecec0bf02b62929b8fbd663d9475211.png" alt=""&gt;&lt;br&gt;
5，当弹窗出现时，导航到你解压MonkeyTalk压缩文件的地方，然后根据以下路径选择MonkeyTalk iOS库文件：&lt;br&gt;
pathToMonkeyTalkFolder/agents/iOS.&lt;br&gt;
6，选择Recursively create groups for any added folders选项。（提示：这取决于你是否愿意复制所有的item到新建的文件夹中）&lt;br&gt;
7，在Add to Targets的框中，取消选择原有的项目并选择你复制的项目：&lt;br&gt;
&lt;img src="/photo/2015/4f624d8ddb8d00b1abbae9d66a450bbd.png" alt=""&gt;&lt;br&gt;
8，点击Add&lt;br&gt;
9，MonkeyTalk库文件应该在你的项目中可见了。&lt;/p&gt;

&lt;p&gt;依赖库以及构建设置（Configuring Libraries and Build Settings）：&lt;br&gt;
1，右键选择复制的YourAppMonkey 构建项目，然后选择Build Phases选项。&lt;br&gt;
2，在Link Binaries With Libraries页面，如果你的项目中没有的话，你需要添加libstdc++.6.0.9.dylib libsqlite3.dylib CFNetwork.framework以及QuartzCore.framework到项目中。（这些框架是MonkeyTalk需要的）&lt;br&gt;
&lt;img src="/photo/2015/5fd43e24497f2c633afc1932c104e711.png" alt=""&gt;&lt;br&gt;
3，Xcode应该默认把libMonkeyTalk.a库添加到了references中。（备注：如果你想要build iOS4.x,请把UIKit.framework的选项从"Reqired"改成“Optional”）&lt;br&gt;
4，在Build Settings页面，下滑到 Linking部分，添加你的Other Linker Flags为：-all_load&lt;br&gt;
&lt;img src="/photo/2015/028a9afde2ed8341d89de80a7dfeb565.png" alt=""&gt;&lt;br&gt;
5，在Xcode的Scheme菜单中选择你复制的测试对象并选择在Simulator 或者设备上运行：&lt;br&gt;
&lt;img src="/photo/2015/09525dbad7bfbe83ed8f004894ccfc4c.png" alt=""&gt;&lt;br&gt;
输出日志会显示MonkeyTalk在你的应用上成功加载了（如下图所示）&lt;br&gt;
&lt;img src="/photo/2015/c851a9d66c43f674687120098c745571.png" alt=""&gt;&lt;br&gt;
你也可以查看培训视频：&lt;br&gt;
&lt;a href="http://www.youtube.com/watch?v=iDnX67NZ9jI&amp;amp;safety_mode=true&amp;amp;persist_safety_mode=1&amp;amp;safe=active" rel="nofollow" target="_blank"&gt;http://www.youtube.com/watch?v=iDnX67NZ9jI&amp;amp;safety_mode=true&amp;amp;persist_safety_mode=1&amp;amp;safe=active&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Android：&lt;br&gt;
安装MonkeyTalk Android Agent：&lt;br&gt;
在Eclipse中打开你的Android项目并执行以下步骤：&lt;br&gt;
1，在Eclipse中安装AspectJ Development Tools plugin (AJDT) 。&lt;br&gt;
2，转换你的Android项目为AspectJ类型：&lt;br&gt;
&lt;img src="/photo/2015/d2b40daa66ad529c772d0254f13e1b8e.png" alt=""&gt;&lt;br&gt;
3，添加monkeytalk-agent.jar到你的项目中&lt;br&gt;
    Agent文件可以在你之前下载的MonkeyTalk主压缩包中的agents/android/文件夹中找到。准确的Android Agent Jar包会包含版本信息。（例如monkeytalk-agent-1.0.30.jar）&lt;br&gt;
    如果你的Android项目中没有libs/文件夹的话，创建一个，然后把Agent jar包放进去。&lt;br&gt;
4，把monkeytalk-agent.jar包含进AspectJ构建路径中（右键点击monkeyTalk-agent.jar &amp;gt; AspectJ Tools &amp;gt; Add to Aspectpath）：&lt;br&gt;
&lt;img src="/photo/2015/c43d273c269379ebca65c791228ae398.png" alt=""&gt;&lt;br&gt;
5，更新你的AndroidManifest.xml，使其包含下列两种权限：&lt;br&gt;
    android.permission.INTERNET&lt;br&gt;
    android.permission.GET_TASKS&lt;br&gt;
&lt;img src="/photo/2015/3f8337f3d6e80f0c42929423cef6ee06.png" alt=""&gt;&lt;br&gt;
6，更新项目属性（右键点击项目 &amp;gt; Properties &amp;gt; Java Build Path），选择Order and Export页面，勾选AspectJ Runtime Library 旁边的勾选框来进行导出它：&lt;br&gt;
&lt;img src="/photo/2015/87870c6f1d0acd0e53b29e6b157faf65.png" alt=""&gt;&lt;br&gt;
7，你也应该勾选你导进去的monkeytalk-agent.jar文件来导出它。（在某些版本的Android开发工具中，会提示Dexification Error的错误，如果你看到这个错误，就不用勾选它了）&lt;br&gt;
8，在设备或者模拟器上部署你的应用。&lt;br&gt;
你也可以查看培训视频：&lt;br&gt;
&lt;a href="http://www.youtube.com/watch?v=P3fAbKysHWs&amp;amp;safety_mode=true&amp;amp;persist_safety_mode=1&amp;amp;safe=active" rel="nofollow" target="_blank"&gt;http://www.youtube.com/watch?v=P3fAbKysHWs&amp;amp;safety_mode=true&amp;amp;persist_safety_mode=1&amp;amp;safe=active&lt;/a&gt;&lt;/p&gt;</description>
      <author>weamylady</author>
      <pubDate>Fri, 16 Jan 2015 10:30:04 +0800</pubDate>
      <link>http://testerhome.com/topics/1880</link>
      <guid>http://testerhome.com/topics/1880</guid>
    </item>
    <item>
      <title>【翻译原创】（二）MonkeyTalk 语言参考说明</title>
      <description>&lt;p&gt;注： MonkeyTalk脚本语言是简单而强大的，此说明书中详细说明了很多用法，由于内容比较多，未翻译完的地方会后续有时间补充。&lt;/p&gt;

&lt;p&gt;概论：&lt;br&gt;
MonkeyTalk是由用户层面的一系列简单命令组成的多功能测试语言。它足够简单地给测试人员使用，并且几乎不需要开发功底来进行分析，同时也可以给那些需要进一步编程的人员无缝地使用Java Script来编写。脚本可以由简单到由txt文档直接编写，或者由MonkeyTalk IDE等录制工具直接生成。&lt;br&gt;
MonkeyTalk语言是与平台无关的，并且提供了标准的API，可以由任何一种编程语言来实现。MonkeyTalk 1.0中包含捆绑了Java Script语言。&lt;/p&gt;

&lt;p&gt;命令语法：&lt;br&gt;
它语法设计的出发点是让非开发人员也能轻易地看懂。它可读性高，可以使用简单的txt文本编辑器甚至表格来简单明了地阅读。另外，MonkeyTalk设计成可以用扁平表格编辑器例如MonkeyTalk IDE来进行阅读和编辑。&lt;br&gt;
MonkeyTalk是一行作为一个一个命令的开始和结束，每一行遵从如下语法：&lt;br&gt;
组件类型 MonkeyID 动作 各种参数... 修改器...&lt;br&gt;
（ComponentType MonkeyId Action Args… Modifiers…）&lt;br&gt;
总体说来，组件类型、MonkeyId、动作、参数、修改器合在一起构成命令的各个部分，组件类型所包含的动作就是这条命令的名字。&lt;br&gt;
下面是各部分的说明:&lt;br&gt;
1, 组件类型（必填）：动作执行所在的组件的类型。例如按钮(Button)或文本框(TextArea)。组件类型是大小写不敏感的。组件类型可以扩展其他的组件类型，正如下面所说，还可以继承任何已定义的方法及其参数。组件类型是代表了UI组件的逻辑名字（例如叫Button而不叫UIButton），但也可以是特定平台的别名。所有的UI组件都继承自View类型的组件，所以当你指定View作为组件类型时就像使用通配符匹配所有类型的组件，例如：&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="c"&gt;# 点击带有"OK"标签的任何组件&lt;/span&gt;
View OK Tap 
&lt;/pre&gt;

&lt;p&gt;2，MonkeyId（必填）：一个用来区分同一页面上同时显示的相同组件类型的不同组件标示。MonkeyId可以使用星号（*）表示识别到的第一个匹配类型的组件。&lt;br&gt;
MonkeyId也可以规定用从1开始(不是从0开始)的引索以 #N 的格式来表示。这种情况下，MonkeyId标志了显示页面中的第N个匹配类型的组件。组件引索的顺序是按照坐标(x, y)从上到下、从左到右的进行排序的。&lt;br&gt;
3，动作（必填）：就是要执行的动作。例如包括 Tap, Select, 和EnterText等。动作(Action)是大小写不敏感的。&lt;br&gt;
4，参数（按组件类型和动作需要填写）：是一个或多个由空格隔开的列表。参数默认是从整条命令的第四列(第四部分)开始的。尽管它是以String类型表现，解读的时候是由命令的需要来进行解读的。如果某个参数是必须的但是没有填写（少写了最后一个参数），它就会使用默认值。参数可以使用星号（*）来强制使用它默认值。&lt;br&gt;
5，修改器（选填）：以空格隔开的、以%name=value格式表示的参数列表，%前缀用来标示它是一个修改器。有三个系统定义的修改器：&lt;br&gt;
    %timeout - 等待多少毫秒超时，超时之前重复尝试执行命令&lt;br&gt;
    %thinktime - 尝试执行第一次命令时的等待时间（毫秒）&lt;br&gt;
    %retrydelay - 再次多次尝试执行命令之间的间隔时间（毫秒）。（注：如果执行不成功就会继续尝试直到超时，例如页面还没刷新找不到组件）&lt;/p&gt;

&lt;p&gt;命令举例：&lt;br&gt;
所有的列都是以空格隔开的。带空格的值一定要用引号引起来。表示引号本身需要在双引号内用反斜杠转义，来表示引号本身。&lt;br&gt;
点击OK按钮：&lt;/p&gt;
&lt;pre class="highlight shell"&gt;Button OK Tap
&lt;/pre&gt;

&lt;p&gt;点击页面上的第二个按钮：&lt;/p&gt;
&lt;pre class="highlight shell"&gt;Button &lt;span class="c"&gt;#2 Tap&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;点击页面上的第一个按钮：&lt;/p&gt;
&lt;pre class="highlight shell"&gt;Button &lt;span class="k"&gt;*&lt;/span&gt; Tap
&lt;/pre&gt;

&lt;p&gt;或者Button #1 Tap&lt;br&gt;
点击页面上的第一个控件：&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="k"&gt;*&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt; Tap
&lt;/pre&gt;

&lt;p&gt;传入参数带空格：&lt;/p&gt;
&lt;pre class="highlight shell"&gt;TextArea editText1 enterText “this is a &lt;span class="nb"&gt;test&lt;/span&gt;”
&lt;/pre&gt;

&lt;p&gt;设置动作超时时间为5秒&lt;/p&gt;
&lt;pre class="highlight shell"&gt;TextArea editText1 enterText “this is a &lt;span class="nb"&gt;test&lt;/span&gt;” %timeout&lt;span class="o"&gt;=&lt;/span&gt;5000
&lt;/pre&gt;

&lt;p&gt;注释是以#开头&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="c"&gt;# this is a comment&lt;/span&gt;
&lt;span class="c"&gt;# another comment&lt;/span&gt;
Button OK Tap
&lt;/pre&gt;

&lt;p&gt;换行用\n表示&lt;/p&gt;
&lt;pre class="highlight shell"&gt;Input shipping EnterText “John Smith&lt;span class="se"&gt;\n&lt;/span&gt;123 Main St.&lt;span class="se"&gt;\n&lt;/span&gt;Anytown, USA 12345”
&lt;/pre&gt;

&lt;p&gt;脚本：&lt;br&gt;
把一条或者多条MonkeyTalk命令放到一个文件中并保存为.mt文件你就得到了一个MonkeyTalk脚本。&lt;br&gt;
举个例子，一个登陆的.mt脚本可能看起来是这样的：&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="c"&gt;# simple script to login as joe&lt;/span&gt;
Input username EnterText joe-at-doe.com
Input password EnterText “i like cheese”
Button LOGIN Tap
&lt;/pre&gt;

&lt;p&gt;想在脚本中调用另一个脚本，可以使用Script命令加上.mt文件名作为MonkeyId，就像这样：Script login.mt Run&lt;/p&gt;

&lt;p&gt;变量：&lt;br&gt;
脚本中可以包含写法为 ${name} 的变量，并且可以在一条命令的任何地方使用。也可以包含写法类似于 ${var}的内置变量。&lt;br&gt;
内置变量有 %{componentType}, %{monkeyId}, %{action}以及内置参数 %{1}, %{2}等等。变量只能作为命令的某一部分，包括组件类型、MonkeyId等等。&lt;br&gt;
例如，一个已命名的变量可以作为参数：&lt;/p&gt;
&lt;pre class="highlight shell"&gt;Input username EnterText &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;usr&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;或者参数和MonkeyId：&lt;/p&gt;
&lt;pre class="highlight shell"&gt;Input &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; EnterText &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;bar&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;又或者整条命令都用参数：&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;bar&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;baz&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;变量可以内嵌到某些字符串里面，但是不能内嵌到另一个变量名中，例如：&lt;/p&gt;
&lt;pre class="highlight shell"&gt;Input username EnterText &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;usr&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;@example.com
&lt;/pre&gt;

&lt;p&gt;但是下面这样的命令是不合法的：&lt;/p&gt;
&lt;pre class="highlight shell"&gt;Input username EnterText &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;bar&lt;/span&gt;&lt;span class="k"&gt;}}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;参数化脚本：&lt;br&gt;
使用Vars.Define命令可以在脚本中命名变量并设置它们的默认值。让我们参数化我们的Login.mt脚本如下：&lt;/p&gt;
&lt;pre class="highlight shell"&gt;Vars &lt;span class="k"&gt;*&lt;/span&gt; Define &lt;span class="nv"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"default-at-example.com"&lt;/span&gt; &lt;span class="nb"&gt;pwd
&lt;/span&gt;Input username EnterText &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;usr&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
Input password EnterText &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;pwd&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
Button LOGIN Tap
&lt;/pre&gt;

&lt;p&gt;我们设置了两个变量 ${usr} 和${pwd}，并设置${usr}的默认值为default-at-example.com。${pwd}变量的默认值没有指定，所以默认值会是&amp;lt;pwd&amp;gt;（以尖括号括起来的变量名）。&lt;br&gt;
我们可以用如下方式调用我们的参数化脚本：&lt;/p&gt;
&lt;pre class="highlight shell"&gt;Script login.mt Run joe-at-doe.com &lt;span class="s2"&gt;"i like cheese"&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;或者让脚本参数使用默认值：&lt;/p&gt;
&lt;pre class="highlight shell"&gt;Script login.mt Run
&lt;/pre&gt;

&lt;p&gt;或者使用一个星号来使用${usr}的默认值：&lt;/p&gt;
&lt;pre class="highlight shell"&gt;Script login.mt Run &lt;span class="k"&gt;*&lt;/span&gt; password1
&lt;/pre&gt;

&lt;p&gt;请注意变量只能在定义它们的脚本中使用，所以${usr} 和 ${pwd}只在login.mt中有定义。当然除非你使用变量来调用一个子脚本。&lt;/p&gt;

&lt;p&gt;数据驱动脚本：&lt;br&gt;
参数化脚本只是一个开始，MonkeyTalk支持全数据驱动的脚本，仅仅只要使用RunWith代替Run命令，并且设定一个数据文件作为第一个参数。&lt;br&gt;
用我们的参数化脚本login.mt举例，我们首先编写一个数据文件credentials.csv，用csv格式保存如下：&lt;/p&gt;
&lt;pre class="highlight shell"&gt;joe-at-doe.com, &lt;span class="s2"&gt;"i like cheese"&lt;/span&gt;
alpha-at-beta.net, password1
charlie-at-dog.org, abc123
&lt;/pre&gt;

&lt;p&gt;第一行可以指定变量名（与login.mt脚本最前面的Vars.Define中他们命名完全相同），后面各行指定变量值。MonkeyTalk需要CSV文件每一列以逗号隔开，如果带空格需要用双引号引起来。&lt;br&gt;
现在，我们可以数据驱动我们的脚本：&lt;/p&gt;
&lt;pre class="highlight shell"&gt;Script login.mt RunWith credentials.csv
&lt;/pre&gt;

&lt;p&gt;这会根据数据文件中的每一行数据跑一边login.mt脚本。所以这个例子中login.mt会运行3此，第一次运行时参数usr = joe-at-doe.com和pwd = "i like cheese"，第二次 usr = alpha-at-beta.net 和pwd = password1，第三次usr = charlie-at-dog.org 和pwd = abc123。&lt;/p&gt;

&lt;p&gt;RunIf命令：&lt;br&gt;
使用RunIf命令，我们可以指定一个命令通过以后才跑某一个脚本。使用这条命令的方法是在一个带有Verify的命令执行通过以后跑指定一个脚本，使用命令如下：&lt;/p&gt;
&lt;pre class="highlight shell"&gt;Script YourScript.mt RunIf &lt;span class="o"&gt;[&lt;/span&gt;Verify Command]
&lt;/pre&gt;

&lt;p&gt;这意思是你在参数部分把脚本中的其他命令整个放在了里面。一个脚本例子如下：&lt;/p&gt;
&lt;pre class="highlight shell"&gt;Input username enterText Fred
Input password enterText SecurePassword
Button LOGIN tap 
script logout.mt RunIf Label &lt;span class="k"&gt;*&lt;/span&gt; Verify &lt;span class="s2"&gt;"Welcome, Fred!"&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;自定义命令：&lt;br&gt;
MonkeyTalk语言可以通过自定义部件类型(component type)和动作(Action)来进行拓展。任何以两个部分组成，格式为&amp;lt;componentType&amp;gt;.&amp;lt;action&amp;gt;.mt 命名的脚本自动可以作为自定义命令。例如，如果我们创建了一个名为 user.login.mt 的脚本，我们就可以增加一个user的部件类型，它拥有login的动作。&lt;br&gt;
我们用以下的样式来调用新的自定义命令：&lt;/p&gt;
&lt;pre class="highlight shell"&gt;User &lt;span class="k"&gt;*&lt;/span&gt; Login
&lt;/pre&gt;

&lt;p&gt;并且我们可以传递MonkeyId以及参数：&lt;/p&gt;
&lt;pre class="highlight shell"&gt;User joe Login joespassword
&lt;/pre&gt;

&lt;p&gt;在你自定义的命令中，可以使用%{monkeyId}的格式来使用传进来的monkeyId。下面是一个可以实现上面命令的user.login.mt脚本的例子：&lt;/p&gt;
&lt;pre class="highlight shell"&gt;Vars &lt;span class="k"&gt;*&lt;/span&gt; Define &lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"password"&lt;/span&gt;
Input username enterText %&lt;span class="o"&gt;{&lt;/span&gt;monkeyId&lt;span class="o"&gt;}&lt;/span&gt;
Input password enterText &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;pwd&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
Button LOGIN tap
&lt;/pre&gt;

&lt;p&gt;测试和验证：&lt;br&gt;
一个测试(Test)就是使用Test部件来代替Script部件进行调用一个脚本。测试结果会写到一个标准的文件中，以JUnit-compatible xml文件格式保存。&lt;br&gt;
每条命令的执行成功与否在于验证用户指定的界面部件(元素)是否存在。另外，你也可以在脚本中使用Verify动作来验证部件中的值是否与预期一致。首先，我们再次重写login.mt，加入一些Verify动作，像这样：&lt;/p&gt;
&lt;pre class="highlight shell"&gt;Vars &lt;span class="k"&gt;*&lt;/span&gt; Define &lt;span class="nv"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"default-at-example.com"&lt;/span&gt; &lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;name
Input username EnterText &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;usr&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
Input password EnterText &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;pwd&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
Button LOGIN Tap
Label welcome Verify &lt;span class="s2"&gt;"Welcome, &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!"&lt;/span&gt;
Button LOGOUT Verify
&lt;/pre&gt;

&lt;p&gt;现在，我们可以以如下方式测试(Test)的方式来运行login.mt，值得注意的是，我们增加了${name}这个变量，因此我们需要加入第三个参数进行调用：&lt;/p&gt;
&lt;pre class="highlight shell"&gt;Test login.mt Run joe-at-doe.com &lt;span class="s2"&gt;"i like cheese"&lt;/span&gt; &lt;span class="s2"&gt;"Joe Doe"&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;并且我们也可以使用数据驱动的方式来测试我们的脚本（注意增加第三列的数据到credentials.csv）&lt;/p&gt;
&lt;pre class="highlight shell"&gt;Test login.mt RunWith credentials.csv
&lt;/pre&gt;

&lt;p&gt;验证(Verify)：&lt;br&gt;
Verify动作存在于所有的部件中（除了Script 和 Device），用以验证实际的值是否是我们想要的值。在它的基本格式中，Verify接受三个可选参数：expectedValue, propPath, 以及failMessage。&lt;br&gt;
如果没有传递任何参数，Verify只验证部件是否存在：&lt;/p&gt;
&lt;pre class="highlight shell"&gt;Button LOGIN Verify
&lt;/pre&gt;

&lt;p&gt;当只有一个expectedValue参数时，Verify会检查部件中的值，这些值只会是部件逻辑上的值（Button的值是它的label，Input的值是它的text，CheckBox 的值是"On"或者"Off"，等等）：&lt;/p&gt;
&lt;pre class="highlight shell"&gt;Button LOGIN Verify LOGIN
&lt;/pre&gt;

&lt;p&gt;用expectedValue以及 propPath作为参数时，Verify会检查制定的部件属性。一些propPaths 例如value或item是逻辑上MonkeyTalk指定的属性路径，它们是跨平台的（它们不以点作为开头）。部件指定的属性值是平台相关的（它们以点作为开头）。&lt;br&gt;
验证一个iOS按钮的Font名字：&lt;/p&gt;
&lt;pre class="highlight shell"&gt;Button LOGIN Verify Helvetica .font.fontName
&lt;/pre&gt;

&lt;p&gt;验证Android上RatingBar总的星星数量：&lt;/p&gt;
&lt;pre class="highlight shell"&gt;RatingBar reviewRating Verify 5 .numStars
&lt;/pre&gt;

&lt;p&gt;最后一个参数时验证失败时给出的信息failMessage ：&lt;/p&gt;
&lt;pre class="highlight shell"&gt;Input username Verify joe-at-doe.com value &lt;span class="s2"&gt;"bad username!!!"&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;可以在用户手册上查看更详细内容：&lt;br&gt;
&lt;a href="http://www.cloudmonkeymobile.com/monkeytalk-documentation/monkeytalk-user-guide/verifying-expected-values/using-verification-commands" rel="nofollow" target="_blank"&gt;http://www.cloudmonkeymobile.com/monkeytalk-documentation/monkeytalk-user-guide/verifying-expected-values/using-verification-commands&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;测试套件(Suite)&lt;br&gt;
一个测试套件(Suite)就是若干脚本的Test放在一起执行的集合。当一个Test失败时，它不会立刻停止，而是跑下一个Test。当所有的Test执行完毕时，会生成一个xUnit-compatible的报告(&lt;a href="http://reflex.gforge.inria.fr/xunit.html#xunitReport" rel="nofollow" target="_blank"&gt;http://reflex.gforge.inria.fr/xunit.html#xunitReport&lt;/a&gt;)， 报告会统计所有所跑Test的Pass数、Fail数、Error数。&lt;br&gt;
Suite必须以.mts文件后缀结尾，与脚本区别开来。&lt;br&gt;
Suite使用Test命令调用脚本，以"Test"作为部件类型，脚本名称作为monkeyId，Run或者Runwith作为动作(action)。一个Test命令（在Suite中使用）与Script命令（在Scripte中使用）类似；它只是增加了一些额外的管理功能。例如一个简单的Suite如下：&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="c"&gt;# login and log out&lt;/span&gt;
Test login.mt Run joe@doe.com JoEsPaSsWoRd
Test logout.mt
&lt;/pre&gt;

&lt;p&gt;只有在Suite中可以使用Test命令，相反只有脚本中可以使用Scipt命令。一般来说，如果你想要跑一个脚本，就在Suite中调用Tests，在脚本中调用Script。&lt;br&gt;
有时候一组Test会共享一些依赖及清理工作，在每个Test前后进行维护时非常无聊并且容易出错的。Suite允许你使用"Setup"以及"Teardown"部件类型来进行设置初始化及清理工作（分别在每一条Test前后执行），用法与Test命令非常类似。在Suite中，任何这样定义的Setup脚本都会在没一个Test前进行调用，如果初始化成功，Test就会运行，然后Teardown就会运行（无论Test成功与否）。&lt;br&gt;
Suite里面可以调用其他的Suite，使用Suite部件类型。&lt;br&gt;
Suite中只能包含Test, Setup, Teardown, 和Suite，以及注释。&lt;br&gt;
举个例子，一个myapp.mts测试套件可能长这样：&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="c"&gt;# setup runs before every test&lt;/span&gt;
Setup login.mt Run joe@doe.com JoEsPaSsWoRd

&lt;span class="c"&gt;# teardown runs after every test&lt;/span&gt;
TearDown logout.mt Run

&lt;span class="c"&gt;# the tests...&lt;/span&gt;
Test add_contact.mt RunWith contacts.csv
Test remove_contact.mt RunWith contacts.csv
&lt;/pre&gt;

&lt;p&gt;例子中我们就使用Setup 和TearDown来指定每条Test执行前后需要调用的脚本。&lt;/p&gt;

&lt;p&gt;命令执行选项：&lt;br&gt;
除非特殊指定，否则MonkeyTalk在超时时间之前会不停地尝试去执行命令。超时时间的值有一个为2秒的全局默认值，也可以在每一条语句后面使用超时的编辑器(Modifier)来自定义。&lt;br&gt;
例如：&lt;/p&gt;
&lt;pre class="highlight shell"&gt;Button OK Tap %timeout&lt;span class="o"&gt;=&lt;/span&gt;5000 %thinktime&lt;span class="o"&gt;=&lt;/span&gt;2000 %retrydelay&lt;span class="o"&gt;=&lt;/span&gt;123
&lt;/pre&gt;

&lt;p&gt;上述命令会在尝试点击OK按钮之前等待2秒钟，然后每隔123毫秒会尝试一次执行命令，直到5秒的超时时间到。(命令最多会执行7秒钟)。&lt;/p&gt;

&lt;p&gt;注：后面的一些内容为介绍Java Script语法、Java API、命令大全的内容，太多就不翻译了。有兴趣的童鞋可以访问连接查看：&lt;br&gt;
&lt;a href="http://www.cloudmonkeymobile.com/monkeytalk-documentation/monkeytalk-language-reference/scripting-javascript" rel="nofollow" target="_blank"&gt;http://www.cloudmonkeymobile.com/monkeytalk-documentation/monkeytalk-language-reference/scripting-javascript&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;到这里语法说明终于告一段落。由于最近比较懒，更新也是断断续续的，语法说明篇幅大概在4000字左右，请期待下一篇- 3-&lt;/p&gt;</description>
      <author>weamylady</author>
      <pubDate>Tue, 23 Dec 2014 17:17:39 +0800</pubDate>
      <link>http://testerhome.com/topics/1723</link>
      <guid>http://testerhome.com/topics/1723</guid>
    </item>
    <item>
      <title>【翻译原创】（一）MonkeyTalk 工具简介</title>
      <description>&lt;p&gt;前言：MonkeyTalk工具是本人觉得强大、轻量、好用的一款工具，但是目前网上没有什么中文的资料，因此产生了对它官方文档进行一下翻译工作的想法，这是第一帖，本人水平有限，哪里有错还请大虾们指正。&lt;/p&gt;

&lt;p&gt;MonkeyTalk 简介：&lt;br&gt;
MonkeyTalk是世界上最强大的移动应用测试工具。它实现iOS及Android上真实的、功能交互的自动化测试 ——包括从最简单的冒烟测试到复杂的数据驱动测试集的所有的测试。它支持原生、移动、混合型应用，在虚拟机或者真实设备上。&lt;br&gt;
MonkeyTalk2.0社区版本是Gorilla Logic五年来创建自动化测试工具的巅峰成就。它的下载量超过7万次，支持者世界各地的团队灵敏快速地实现他们“五星好评”的移动应用。&lt;br&gt;
现在MonkeyTalk有了专业版，移动测试自动化变得更容易了。MonkeyTalk专业版本是建立在社区办的基础上，为专业的移动测试提供无缝的工作流、更高的生产力、更少的麻烦和更简单的配置。它设计的初衷就是服务于应用测试人员和开发人员，事实证明它为每个项目的自动化测试都带来了良好的收益。MonkeyTalk专业版是与CloudMonkeyMobile签约的产品，目前提供了免费的beta版本。&lt;/p&gt;

&lt;p&gt;MonkeyTalk FAQ：&lt;br&gt;
1，它总体是怎么工作的？&lt;br&gt;
答：MonkeyTalk是彻底的移动应用功能测试平台。它目前支持原生及混合的应用测试。此平台有三个基本的模块：MonkeyTalk IDE（集成开发环境），MonkeyTalk Agent及MonkeyTalk脚本。&lt;br&gt;
MonkeyTalk IDE —— 一个可以录制、回放及编写测试脚本的桌面应用&lt;br&gt;
MonkeyTalk Agent —— 一个必须插入到所测试应用中的库&lt;br&gt;
MonkeyTalk Script —— 美观、简单易懂、方便维护的测试脚本&lt;br&gt;
首先，你必须把MonkeyTalk Agent植入到所测的应用中（详情请看相关文档&lt;a href="http://www.cloudmonkeymobile.com/monkeytalk-documentation/monkeytalk-getting-started/install-agentMonkeyTalk" rel="nofollow" target="_blank"&gt;http://www.cloudmonkeymobile.com/monkeytalk-documentation/monkeytalk-getting-started/install-agentMonkeyTalk&lt;/a&gt;），然后你可以使用 IDE录制和回放脚本。参考文档（&lt;a href="http://www.cloudmonkeymobile.com/monkeytalk-documentation/monkeytalk-getting-started" rel="nofollow" target="_blank"&gt;http://www.cloudmonkeymobile.com/monkeytalk-documentation/monkeytalk-getting-started&lt;/a&gt;），你会很快地上手测试的。&lt;/p&gt;

&lt;p&gt;2，它支持真实设备吗，还是只支持虚拟设备Emulator/Simulator？&lt;br&gt;
答：都支持！它支持模拟器或者真实设备，支持USB线或者通过WiFi连接的真实设备。&lt;/p&gt;

&lt;p&gt;3，我需要Jailbreak或者Root我的设备吗？&lt;br&gt;
答：完全不用！只需要把MonkeyTalk Agent插入到你的应用代码中即可测试。（译者注：换句话说它需要源代码进行插码，或者未做安全/签名保护的Apk/ipa文件用专业版中的工具进行插入Agent）&lt;/p&gt;

&lt;p&gt;4，它是免费的吗？&lt;br&gt;
答：是的。MonkeyTalk免费下载，免费试用。&lt;/p&gt;

&lt;p&gt;5，它是开源的吗？&lt;br&gt;
答：是的。MonkeyTalk是基于GNU Affero General Public License v3 (AGPL v3) 开源协议的。我们非常欢迎对社区反馈和建议，尤其是补丁。&lt;br&gt;
AGPL是完全基于GPL的，但是有重要的一条是如果你修改使用了此开源代码，你必须把它发布出来。GPL是允许公众发布修改版本而不公布源代码，而AGPL修补了这一条漏洞，所以公众在公共服务器上能访问它的修改版本，就应该可以查看它的源代码。如你有任何疑问，请阅读AGPL v3协议及联系你的律师。&lt;/p&gt;

&lt;p&gt;6，它是跨平台的吗？我可以在Android和IOS上录制回放吗？我可以在Android上录制然后在IOS上回放吗？&lt;br&gt;
答：可以。如果你Android和IOS上是逻辑上一样的应用的话，你应该可以在其中一个录制然后在另一个进行回放。因为MonkeyTalk是基于最高级别进行事件记录，逻辑上一样的应用不一定要有完全一样的UI来进行记录回放。例如，Android典型的Tabs是在页面的顶部，而IOS是在底部，但只要它们有相同的操作记录成TabBar.Select，它们在不同的OS上就会进行不同的正确回放。&lt;/p&gt;

&lt;p&gt;7，我可以不需要源码进行测试吗？&lt;br&gt;
答：不可以。你必须在应用build阶段插入MonkeyTalk Agent，这是需要源码的。但是你一旦插码完毕后（无论是开发人员还是持续集成工具进行插码），你将不再需要访问源码。&lt;/p&gt;

&lt;p&gt;8，我可以测试第三方应用吗（例如Camera、Browser等等）？&lt;br&gt;
答：不可以。测试应用需要访问源码安装MonkeyTalkAgent。&lt;/p&gt;

&lt;p&gt;9，我可以测试HTML5 Web应用吗？&lt;br&gt;
答：可以。从1.0.40开始我们就支持原生、混合及Web应用，包括HTML5应用，可以使用我们提供的MTBrowser应用进行测试。&lt;/p&gt;

&lt;p&gt;10:，我可以测试桌面应用吗？Windows Phone 7呢？黑莓呢？Flex Mobile呢？&lt;br&gt;
答：不可以。从1.0.40开始我们支持IOS和Android应用，Flex和桌面Web应用仍然躺在Source Code tree中实验。我们的确有计划在未来支持更多的平台。&lt;/p&gt;

&lt;p&gt;11，我可以测试手机游戏吗？&lt;br&gt;
答：这个看情况。大部分游戏是基于随机数生成器的，这让可依赖的功能测试变得非常困难。未来我们可能发布覆盖随机数生成器及集成游戏引擎的MonkeyTalk版本。如果你使用标准UI的话，你仍然可以测试你应用中的非随机模块。&lt;/p&gt;

&lt;p&gt;12，我能测试平板吗？还是只能在手机上测试？&lt;br&gt;
答：都可以！MonkeyTalk支持所有的IOS和Android机器，如果你发现有机器上MonkeyTalk不工作，请让我们知道。&lt;/p&gt;

&lt;p&gt;13，测试可以全自动化吗？我可以在CI(持续集成)上跑吗？我可以在IDE之外跑吗？我可以在命令行跑吗？&lt;br&gt;
答：可以。MonkeyTalk测试可以使用Ant在命令行跑(详细请看Ant Runner介绍www.cloudmonkeymobile.com/content/ant-runner)或者使用MonkeyTalk Java命令行执行器(详细请看Java RUnner介绍www.cloudmonkeymobile.com/content/java-runner)。我们使用Hudson/Jenkins作为我们的CI服务器作为我们内部测试，它运行的非常良好。大部分的全自动化都使用模拟器来运行应用测试，因为它可以方便地保证一个可重复的初始状态。&lt;/p&gt;

&lt;p&gt;14，我可以发布一个插入了MonkeyTalk Agent的应用到应用商店吗？&lt;br&gt;
答：也许可以，但是极力不推荐。我们建议你生成一个MonkeyTalk-Enabled（插入了MonkeyTalk Agent的应用）只作为开发的版本。&lt;/p&gt;

&lt;p&gt;15，我可以测试内嵌的Web页面吗？（iOS上的UIWebView，Android上的WebView）&lt;br&gt;
答：从MonkeyTalk Beta4版本以后就支持内嵌的Web页面测试。在Beta5，内嵌Web页面的录制仍然没有支持，但是脚本回放功能工作的很好。我们计划在未来加入对其的录制功能。&lt;/p&gt;

&lt;p&gt;译者注：后面的FAQ是对于DIE、iOS Agent、Android Agent、MonkeyTalk脚本的一些内容，这里就不翻译了，后面对MonkeyTalk语言介绍及用户手册上都会有详细的说明。&lt;/p&gt;</description>
      <author>weamylady</author>
      <pubDate>Mon, 22 Dec 2014 10:46:03 +0800</pubDate>
      <link>http://testerhome.com/topics/1713</link>
      <guid>http://testerhome.com/topics/1713</guid>
    </item>
    <item>
      <title>MonkeyTalk 相对于 Appium 的优劣性</title>
      <description>&lt;p&gt;MonkeyTalk与Appium都属于开源项目，都支持跨平台iOS、Android，但是为何论坛及国内鲜有MonkeyTalk的讨论呢？本人初步总结了几点，总还是感觉MonkeyTalk要更加的简单快捷，除了需要插码操作以外，Appium总体来说没有MonkeyTalk好用。希望各位大神可以补充一下，告诉鄙人为何Appium用的人这么多MonkeyTalk却这么少捏？&lt;/p&gt;

&lt;p&gt;MonkeyTalk对比Appium的缺点：&lt;br&gt;
1，Appium不需要插码，而MonkeyTalk需要在源码插入agent。&lt;br&gt;
2，Appium的中文文档较多较全，MonkeyTalk的文档基本上都是英文的。&lt;/p&gt;

&lt;p&gt;MonkeyTalk对比Appium的优点：&lt;br&gt;
1，MonkeyTalk支持录制功能(Appium目前在Android上没有录制工具)，而且录制更能更加强大而简单。&lt;br&gt;
2，MonkeyTalk的执行速度比Appium快5倍以上(亲测执行速度快的飞起！)。&lt;br&gt;
3，MonkeyTalk编码简单，代码更加简单易懂（更类似与Robotium的风格）。&lt;br&gt;
4，MonkeyTalk不需要另外搭建Server，脚本直接与Device上的Agent通信。&lt;br&gt;
5，MonkeyTalk自带有日志输出功能，可自动生成xml报告，Appium没有此功能。&lt;/p&gt;

&lt;p&gt;共同点：&lt;br&gt;
1，都支持跨平台，iOS和Android可用相同的自动化脚本；&lt;br&gt;
2，都支持WebView识别(网上说法是MonkeyTalk也支持，但是本人未亲测)；&lt;br&gt;
3，都支持在脚本运行过程中插入Windows的操作(如查询数据库来验证案例结果)，像Robotium、UiAutomator等工具就不支持，因为它的脚本都是push到device上去运行的。&lt;/p&gt;

&lt;p&gt;笔者水平很有限，希望抛砖引玉，欢迎大家补充纠正意见。&lt;/p&gt;</description>
      <author>weamylady</author>
      <pubDate>Mon, 08 Dec 2014 14:37:31 +0800</pubDate>
      <link>http://testerhome.com/topics/1667</link>
      <guid>http://testerhome.com/topics/1667</guid>
    </item>
  </channel>
</rss>
