<!--
  App Environments:
  --------------------------------------------------------
  Ruby:  2.1.2-p95
  Rails: 4.1.1
  Thanks to RubyChina
-->
<!DOCTYPE html>
<html>
<head>
  <title>TesterHome | iPhone/iPad UI 自动化测试指南作者  转载 &raquo; 社区</title>
  <meta charset='utf-8' />
  <meta name="keywords" content="" />
  <meta name="description" content="" />
  <link data-turbolinks-track="true" href="../assets/front-7f214c07ef8cbdd59ba99f0ea4b052b9.css" media="screen" rel="stylesheet" />
    <link href="../assets/mobile-4fb33e42cee242735db607f08badd48a.css" media="screen and (max-width: 798px)" rel="stylesheet" />
  <link rel="shortcut icon" href="../assets/big_logo-e45f9cf8961e479b209d942f449d3b7b.png" />
  <link href="feed" rel="alternate" title="订阅最新帖" type="application/rss+xml" />
  <script data-turbolinks-track="true" src="../assets/app-d8b8d53b12135c77eba5ce7899b456b3.js"></script>
  <meta content="authenticity_token" name="csrf-param" />
<meta content="n6IluQs+rvFYzOtLM2JildRgsvcNIwvZOjb84Ctm9Jg=" name="csrf-token" />
  
  
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "//hm.baidu.com/hm.js?bfca03d31121ff43bab8f1bf58dcb58b";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>

</head>
<body data-offset="50" data-controller-name="topics">
  <div class="navbar navbar-fixed-top">
    <div class="navbar-inner">
      <div class="container">
        <h3>
          <a href="../index.html" class="site-logo"></a>
        </h3>
        <ul class="nav"><li class="first"><a href="../index.html">首页</a></li><li class="active"><a href="../notes/2">社区</a></li><li><a href="../wiki">Wiki</a></li><li><a href="../jobs">招聘</a></li><li class="last"><a href="../sites">酷站</a></li></ul>
        <span class="pull-right">
          <form action="http://testerhome.com/search" class="navbar-search" method="get">
            <input type="text" name="q" class="search-query" value="" placeholder="搜索" />
          </form>

            <ul class="nav pull-right" id="userbar"><li class="first"><a href="../account/sign_up">注册</a></li><li class="last"><a href="../account/password/edit">登录</a></li></ul>

        </span>
      </div>
    </div>
  </div>

  <div class="container">
    
    
    <div id="main" class="container-fluid">
      
<div class="content">
  <div id="topic_show" class="topics box hfeed">
    <div class="topic hentry">
      <div class="infos">
  <div class="pull-right avatar_large">
    <a href="../lihuazhang"><img alt="110" class="uface" src="../user/large_avatar/110.jpg" style="width:48px;height:48px;" /></a>
  </div>
  <h1 class="entry-title">iPhone/iPad UI 自动化测试指南作者  转载</h1>
  <div class="info leader">
    <a class="node" href="node23">Appium</a>
     · 
    <a data-author="true" data-name="恒温" href="../lihuazhang">lihuazhang</a>
     · 
    于<abbr class="timeago" title="2013-12-14T15:31:28+08:00"></abbr>发布
     · 
    472次阅读
  </div>
</div>

      
      <div class="body entry-content">
        <p>非常好的一篇关于 Instruments UI Automation 的文章，我之前在 testerhome qq 群里分享了。忍不住还是在这里转载。当然有部分内容不是最新的。但是大部分都是非常棒的。</p>

<p>发信人: LuDerek (DerekLu), 信区: MobileDev<br>
标  题: iPhone/iPad UI自动化测试指南<br>
发信站: 饮水思源 (2012年12月08日21:48:43 星期六)</p>

<p>简述</p>

<p>本指南使用XCode附件Instruments实现iPhone/iPad上的UI自动化测试.<br>
本指南较少涉及代码,在很大程度上只是思路的分享.</p>

<p>本指南完全基于iOS6，XCode版本4.5.1，Instruments版本4.5(4523)。<br>
作者碰到过一次从iOS到API的彻底的版本更新，导致原本写的测试代码<br>
大量的细节修改。所以本指南的过期是可以预见的。如果有任何版本更<br>
新导致的本指南与实际状况不一致，请不要来问我因为作者预期今后很<br>
长时间不会接触UI自动化开发了。</p>

<p>参考文件</p>

<p>UIA Objects Reference API：<br><a href="http://developer.apple.com/library/ios/#documentation/DeveloperTools/Reference/UIAutomationRef/_index.html" rel="nofollow" target="_blank">http://developer.apple.com/library/ios/#documentation/DeveloperTools/Reference/UIAutomationRef/_index.html</a></p>

<p>UIAutomation介绍：<br><a href="http://developer.apple.com/library/ios/#documentation/DeveloperTools/Reference/UIAutomationRef/Introduction/Introduction.html" rel="nofollow" target="_blank">http://developer.apple.com/library/ios/#documentation/DeveloperTools/Reference/UIAutomationRef/Introduction/Introduction.html</a></p>

<p>Hello World</p>

<p>入门：如何使用Instruments打印指定场景的拓扑结构</p>

<ol>
<li><p>打开XCode项目，选择调试目标（一般为iPhone或iPad模拟器模拟器），并且把调试模<br>
式指向Profile。</p></li>
<li><p>选择Automation。</p></li>
<li><p>等待，直到Instruments和模拟器都启动。</p></li>
<li><p>在模拟器中进行操作，直到达到你需要的场景（作为一个HelloWorld而言，你也可以不<br>
进行操作）</p></li>
<li><p>增加一个脚本</p></li>
<li><p>在脚本中添加打印环境语句：<br>
target.frontMostApp().logElementTree();</p></li>
<li><p>等待环境拓扑被打印出来</p></li>
</ol><p>可以看到，环境拓扑被以树的形式打印出来。树的节点与UI元素一一对应。</p>

<p>UI Automation<br>
Automation工具提供的元操作</p>

<p>Automation提供3种操作：<br>
    读取UI拓扑<br>
    模拟用户行为<br>
    记录日志</p>

<p>可以认为，Automation主要提供了“模拟用户行为并且记录一些环境信息”的工具。（相<br>
比之下，我认为自动化测试这个概念是基于自动化对指定数据做出判断的行为，是个更为<br>
狭窄的概念。）</p>

<p>读取UI拓扑</p>

<p>UI拓扑读取是类似于上章logElmentTree的行为。它是基于View的accessibility的。开发<br>
人员可以重新定义accessibility，方便测试人员测试。默认的View有默认的accessibili<br>
ty获取方式。大多数View的accessibility都是默认的。少量的按钮和表格的name属性做了<br>
显式的重定义。</p>

<p>模拟用户行为</p>

<p>用户行为模拟实际上是全局行为和UI拓扑的某些参数的结合。例如，API中提供了对按钮的<br>
点击动作（tap）。事实上这个行为可以被分解成两个部分：程序通过API获得这个按钮的<br>
位置和大小，计算这个按钮的中心位置相对于整个屏幕的位置，再把这个位置坐标传向设<br>
备，模拟了一个指定坐标的点击事件。值得注意的是，如果一个元素被遮挡，API也可以调<br>
用点击动作，然而结果却是上层遮挡的元素被点击。</p>

<p>日志记录</p>

<p>日志记录有两个方面，一方面Instruments会自动打印一些日志，一方面用户也可以自行打<br>
印一些日志。日志的类型，时间和内容会被记录。为了支持UI自动化测试，Instruments提<br>
供了8种用户日志类型。此外。像logElementTree之类的方法也可以认为是用户日志的一部<br>
分。值得注意的是，Automation暂时不支持原生的“将元素及其子元素转化为JSON格式返<br>
回”这样的操作，需要自行进行树的遍历与JSON格式转化。</p>

<p>UIA对象</p>

<p>Automation的API</p>

<p>UIA对象即是向运行于设备的app获取数据的API。UIA对象在JavaScript下是一些顶级对象<br>
与返回类型（在JavaScript中，“对象”和“类”的概念有一些微妙的通用关系）。它们<br>
具有一定的继承关系。<br>
例如，UIAElement类是大多数类的基类。UIASecureTextField和UIASearchBar是UIATextF<br>
ield的派生类。UIATextField是UIAElement的派生类。但UIATarget，UIAHost不是UIAEle<br>
ment的派生类。</p>

<p>继承</p>

<p>作为派生类，理所应当会继承基类的一些方法。比较常用的方法都来自于UIAElement类。<br>
例如name，value，elements，rect等。UIATextField有setValue方法，故而派生类UIASe<br>
cureTextField和UIASearchBar也会继承这些方法。</p>

<p>类名的获取</p>

<p>如何获取一个已知对象的类名？在JavaScript中这是一个比较繁琐的行为。JavaScript的<br>
typeof关键字只能判断基本的数据类型，而instanceof会判断类是否在对象的派生链上。<br>
所以通常会将所有的UIA对象按照派生顺序排成一列，再用instanceof关键字进行顺序判断<br>
。这是一种有点浪费但是效率上还好的做法。?<br>
行为模拟<br>
全局行为模拟 + 参数</p>

<p>在之前已经叙述过了，一个特定UIA对象上的行为模拟方法实际上是一个全局行为加上一些<br>
参数所模拟出来的。<br>
再举个例子。例如调用UIAKeyboard输入一个字符串，程序会把所输入的字符串截成字符逐<br>
个输入。这个过程稍微带点智能，比如在小写状态输入字母B，那么程序会去按一下shift<br>
再去按B，标点符号同理。但是比如如果输入的是中文字符，程序就会因为找不到对应的键<br>
盘输入方法而报错。<br>
因此，可以看到，所谓的UIA对象封装的API在实现上存在了大量的冗余。很多API本身可以<br>
使用其他API的组合来实现，当然可能在效率和兼容性上原生API可能做得更好（也存在大<br>
量不可靠的例子）。</p>

<p>行为模拟的作用范围</p>

<p>由于授权模式，行为模拟和真实行为的一大区别在于无法在权限以外进行操作。比如，B1<br>
Mobile运行过程中访问谷歌地图时可能会跳出一个需要location授权的alert，作为一个系<br>
统级alert框这个东西不能被模拟出来的行为杀掉，必须跑脚本之前手动杀掉。</p>

<p>日志记录</p>

<p>日志有两种输出格式：plist格式和trace格式。前者是一个xml，便于后续的程序性分析。<br>
后者是一个Instrments自带格式，存储了脚本，运行记录和日志多种信息，并提供原生的<br>
界面。</p>

<p>日志分类</p>

<p>日志大致上分为3种：<br>
1.   系统自动日志。例如使用脚本模拟行为时，系统会自动打印行为，并以Debug类型计入<br>
日志。再例如在JavaScript丢出一个没有被抓住的错误的时候，系统会以Error类型打印这<br>
个错误并停止脚本（话说Instrments最近一次版本更新以后增加了错误打印的代码栈，这<br>
个不错）。</p>

<ol>
<li><p>环境打印日志。在这里环境打印日志指的是logElement，logElementTree这样的方法所<br>
打印的日志。这类日志的特点在于日志是直接通过API打印的，中间没有JavaScript读取过<br>
程。比如logElementTree直接打印，日志中可以获得该对象的很多信息，但中间没有Java<br>
Script过程。诚然JavaScript可以通过遍历的方式来获得相应的信息，但效率上无法匹敌<br>
。比较特殊的环境打印日志还包括savaSnapShot，可以存储目标设备截图。</p></li>
<li><p>用户日志。用户有8种日志类型。都位于UIALogger之下。事实上可以推测出这种类型设<br>
计是专为自动化测试定制的。值得注意的是大部分系统自动日志都是Debug类型的，所以尽<br>
量避开这种类型可以防止和系统自动日志搞混。</p></li>
</ol><p>限制</p>

<p>Automation无法获取所有的元素。</p>

<p>在实践中，有一些元素是Automation无法获取的，主要是一些看起来像是浮于<br>
文字上方的元素。这些元素无法被Automation获取。</p>

<p>当然，前文已经说过，Automation无法获取这些元素的原因是因为在写代码的时候这些对<br>
象的accessibility没有正确的默认显示方式。如果愿意对Automation更大支持的话，也可<br>
以重写它们的accessibility。Accessibility不单影响Automation，对VoiceOver等特性也<br>
有支持。</p>

<p>部分元素被以“兼容模式”显示</p>

<p>同样是accessibility的问题。一些元素没有很好的打印支持，所以被以兼容模式显示。例<br>
如一个日期显示控件，或者一个WebView的Canvas元素，由于accessibility没有过多的支<br>
持，它们仅仅作为一张图片被打印，失去了内部特性。</p>

<p>另一方面，旧版本的GoogleMap同样以一张图片显示，新版本变成了一个UIAMapView。所以<br>
这类兼容模式显示的元素也有被新版本支持的“机会”与“风险”。</p>

<p>渲染细节的失去</p>

<p>在大部分情况下，关于元素的信息获取是有限的，一个UIAStaticText一般有name，value<br>
，label，rect等属性，而实际上它们还应该有关于字体渲染的细节，如字体大小，粗细，<br>
行距，字体类型等等。<br>
图片有同样的问题。程序只能分辨两张图片的位置和大小的不同，导致的问题是，两张相<br>
同大小的图片，程序无法分辨他们是不是同一张。</p>

<p>没有全局的唯一ID选择器。</p>

<p>没有类似于浏览器Dom的getElementById的方法。也就是说，需要选取一个已知id的元素，<br>
也必须通过其父节点。诚然可以通过遍历的方法找到一个匹配的元素。但是在B1Mobile这<br>
样的元素不多的应用环境场景下，一个深度遍历的算法选取某id元素也需要2分钟的时间。<br>
这是大多数测试下不能容忍的。</p>

<p>App以外无权限读写操作。</p>

<p>之前提到过，一个系统级alert是无法被环境所反馈的。事实上，所有app以外的设置都无<br>
法被环境所读取与操作。例如，B1Mobile需要到settings里去预先配置，这部分由于在ap<br>
p以外，必须手动完成，自动化操作无能为力。<br>
用户视图与Automation视图的差异</p>

<p>用户从物理设备上看到的应用与Automation获取的信息存在差异。除了上文提及的拓扑过<br>
程的信息缺失以外，还存在类似于这样的问题：</p>

<p>文本过长，渲染时以省略号作为摘要，而Automation丢失此渲染信息，直接获取原字符串<br>
。<br>
文本过长，渲染时浮出自动截断，而Automation丢失此渲染信息，直接获取原字符串。<br>
页过长，阅览时需要滚动条拖动显示，而Automation不需要滚动条，直接获取了所有页内<br>
所有信息。<br>
页被部分或完全遮挡，Automation仍能获取被遮挡页所有信息。</p>

<p>事实上对于这类例子，可以说是Automation获取了比正常用户更多的细节。但问题是，作<br>
为自动化测试，Automation本身应该以用户为准。即，存在这样一个事实，在app信息对于<br>
用户不可见的情况下，对Automation可见也是完全没有意义的。作为工具的限制，应该将<br>
Automation视图作为一个与用户视图“相似却不完全一样的黑盒”。</p>

<p>精确的时间</p>

<p>Automation无法做到精确的计时。这主要是因为整个API不是事件驱动的。例如，对于登陆<br>
时间的测算，从按下登陆按钮的那一刻起计时，当登陆后最后一个UI元素渲染完毕，设备<br>
不会传递一个事件给Automation告知渲染结束。一个解决方案是，程序每隔一段很小的时<br>
间去检查UI元素有没有渲染完毕，有则返回。这种做法的精确度取决于检查时间间隔，并<br>
且是低效而无奈的做法</p>

<p>另一方面，API的调用也需要返回时间。这段时间在模拟器中不够明显，在真实设备上，这<br>
个过程对程序相当地长。并且很遗憾的是，这段时间甚至不是能够预知的。这对于自动化<br>
测试的影响是，无法对某个在时间上过程性的行为做测试。例如。在某个页上点击后，一<br>
个新的页会滑入。理论上可以通过这个页掉落过程的坐标变换来判断它的滑入方向，但实<br>
际上由于API调用时间的不精确，不一定能够在这滑入时间间隔内使点击事件返回并重新调<br>
用选择器和位置方法。所以可以说，对于这种暂态的自动化测试是不可靠的。</p>

<p>错误</p>

<p>Instrments本身的频繁崩溃</p>

<p>我也不知道为什么。通过软件重启能够解决的问题都不是问题。</p>

<p>在同一个设备实例上同时运行两个Automation</p>

<p>听起来很美妙。在Instruments启动时我拖入了两个Automation组件，其一运行我预先写好<br>
的脚本，另一个每隔一段时间为设备截一张图。<br>
结果失败了。不管试几次Automation都会crash。<br>
我对于crash的猜测是，Instrments的确允许同时运行两个Automation，但两个Automatio<br>
n不能同时调用API。同一时间对于API的调用会出错，而且之前我说过了，API方法的返回<br>
有相当长的间隔时间。</p>

<p>elements方法的错误：返回全局对象</p>

<p>在我尝试写出全局遍历方法时，我遇到了我没有预期的栈溢出错误。分析问题时发现，el<br>
ements方法（即获取节点子节点）对于所有没有子节点的UIAStaticText都返回全局的UIA<br>
Application对象。后来Instruments升级到4.5后，返回对象改为了UIAWindow。这个问题<br>
应该也是accessibility问题。</p>

<p>频繁的UIALogger的方法</p>

<p>频繁的API调用会导致类似于竞争的问题。这个问题在UIALogger上尤为显著。UIALogger是<br>
简单的将字符串打印为日志的API，当我们频繁打印日志时（例如使用一个循环，迅速打印<br>
1000条日志），Instrments生成这1000条日志的时间会明显长于生成一条日志的1000倍时<br>
间。<br>
另外需要注意的是，虽然理论上日志条目可以无限长，但我建议将日志条目控制在5000以<br>
内，因为根据经验日志条目过长可能会导致意外崩溃。</p>

<p>不可靠的onAlert方法</p>

<p>作为这个号称事件驱动的方法，我的意见是直接放弃它。因为它从来没有正常运行过。<br>
在4.5版本中这个方法尤为诡异，对onAlert事件的绑定甚至会影响下一次运行。</p>

<p>JavaScript环境<br>
JavaScript版本</p>

<p>Automation所使用的JavaScript环境是一个类似于EcmaScript3的环境。当然它不支持像s<br>
trict mode，bind之类的方法。</p>

<p>与浏览器环境的差异</p>

<p>需要注意的是，Automation不是一个Browser环境，没有dom，所以也没有document方法，<br>
没有window方法。这意味着一些你可能觉得很常用的方法如setTimeout，在Automation的<br>
JavaScript环境中是不可用的。（事实上某些API有同名的setTimeout方法，但是用处是不<br>
一样的）。<br>
我倒不觉得这是一件坏事。对于JavaScript程序员来说，这是一个极佳的认识JavaScript<br>
本质的环境—环境更加简单纯净，而且脱离Browser的混淆，脱离像node这样的仍然是面向<br>
Web的JavaScript环境。而且通过一些环境bug来让你思考它的合理性。</p>

<p>Automation不提供console，也无法设置断点。在脚本错误时也无法实时在JavaScript环境<br>
中调试。这样对你来说脚本是逐句解释执行还是编译为二进制执行也没什么大区别。</p>

<p>效率</p>

<p>在效率方面，我曾经在我的办公用笔记本电脑的Chrome和Automation上跑了下Benchmark。<br>
大概的执行效率，Automation环境是Chrome的1/12。听起来是个很可怕的数字，但其实效<br>
率还好不是问题。可以容忍一些比较基本的算法。树的遍历啊什么的。</p>

<p>外部文件的加载</p>

<p>作为一个纯JavaScript环境，Automation可以无差别地加载一些纯JavaScript库，如back<br>
bone.js（一个MVC库），underscore.js（集合与Object的拓展方法库）等。</p>

<p>Automation为文件引用增加了 #import 语句。#import语句可以援引另一个JavaScript文<br>
件并插入原脚本头。值得注意的是，当被#import的文档再次#import其他文档时，这个其<br>
它文档会被插入被#import文档的尾部。可以说#import是个功能相当简单的语句，不要当<br>
C语言中的#include来用。</p>

<p>JavaScript环境的缺陷</p>

<p>设计理念</p>

<p>我相信苹果对于Automation的脚本设计理念是这样的：总要用一种脚本语言，又不可能用<br>
对头家的VB，定义自己的语言又有些多余，就选择一种相对合适的语言。于是就使用了Ja<br>
vaScript语言。</p>

<p>本质：类JavaScript语言</p>

<p>我更倾向于将Automation使用的语言称为“类似于JavaScript的脚本语言”，尽管在本指<br>
南中经常直接称它为JavaScript，官方文档最近也直接声明这种语言为JavaScript。但我<br>
不认为它是纯粹的JavaScript。比较直观的原因如下</p>

<p>#import语句不符合JavaScript语法标准（它本可以定义为注释类型）<br>
    waitForInvalid方法可以类似于break语句直接跳出循环。没有任何JavaScript方法可以<br>
混合实现这个效果。<br>
    从方法返回的对象并非是从顶级对象（类）名生成。修改prototype不会更改这些返回对<br>
象。</p>

<p>事实上不单单是具体缺陷的问题，这种缺陷反映了这样一个事实：Automation的JavaScri<br>
pt环境不是纯粹的JavaScript环境。从设计理念来说，可以理解为苹果公司只是借用了Ja<br>
vaScript大部分语法来实现自动化。Automation的JavaScript环境是以“够用”作为标准<br>
的，如果某些API在JavaScript标准语法中显得很奇怪，苹果会毫不犹豫打破JavaScript本<br>
身。这样就有一个risk，对于非常熟悉JavaScript的脚本撰写者而言，有一些API或者语法<br>
会跳出JavaScript的思维定势。</p>

<p>或者可以这么理解：Automation先把所谓的JavaScript代码放入一个预编译器，将#impor<br>
t，waitForInvalid这样的特殊语法重新解释，然后再把生成的代码送入JavaScript执行环<br>
境。<br>
?</p>

<p>其他：网络，阻塞与事件缺失</p>

<p>Automation的JavaScript环境是封闭的，没有任何办法访问网络。</p>

<p>计时方面，JavaScript失去了setTimeout队列使得它失去了很多特性。相对的提供了一个<br>
阻塞函数target.delay。很多UIA对象提供了封装性的函数。我不信任它们。事实上我很少<br>
使用waitForInvalid这样的函数，所以连pushTimeout这样的函数也用的很少。其一是因为<br>
B1 Mobile测试对于效率的要求不是很高，其二是因为我觉得它们的表现很不稳定。</p>

<p>UIA对象</p>

<p>UIA对象在这里指的是Automation JavaScript环境中UIA打头的一些对象。</p>

<p>虽然Automation的环境中有一些UIA顶级对象，但是通常可以直接忽略它们。我认为它们的<br>
唯一用途就是类型判断。很少有静态方法可供调用。</p>

<p>更多的是API，而非JavaScript对象</p>

<p>对于UIA对象，我的意见是直接将它们看做API（本文一直是这么表述的），而不要将它们<br>
看做传统的JavaScript对象。有的时候我们会使用一些JavaScript特性，比如绑架方法，<br>
更改调用者，访问constructor，更改prototype，这些特性在UIA对象中很难施行。</p>

<p>版本变化与API改变</p>

<p>UIA对象作为API会随版本更替而调整。例如上文提到的UIAMapView的增加。在4.5.1中增加<br>
了一个visible方法，判断一个对象是否可见（事实上就是判断一个元素中心点有没有被其<br>
他元素遮盖）。<br>
很多API事实上不是“元API”而只是其他API的组合，在这一点上前文已经叙述过了。</p>

<p>访问方法</p>

<p>访问一个UIA元素有两种方法：通过它的name或者通过它的index。这两种方法都需要取得<br>
它的父元素。没有全局的通过name来唯一搜寻的方法。另外，也可以通过元素类型来搜寻<br>
。UIAElement提供了一系列通过类型来搜寻的方法，例如通过cells来搜寻所有UIATableC<br>
ell对象。几乎所有的元素与属性都是通过函数而非变量来搜寻的（XXX.name()==”abc”<br>
而不是XXX.name==”abc”）。</p>

<p>另外UIA对象提供了Predicate选择器，通过Predicate语法来选取元素。可以理解为，通过<br>
一个正则表达式去匹配元素，把它们选择出来。这是一个原生的方法。例如一个元素有10<br>
00个子元素，如果直接使用RegExp，需要把1000个子元素统统选取，然后使用RegExp逐一<br>
比较。而Predicate理论上能够原生的提供更好的速度上的提升，忽略算法复杂度。<br>
对于B1 Mobile而言，需要使用Predicate的地方比较少，所以我不大用这个东西。</p>

<p>设备一致性</p>

<p>对于目标设备来说，理论上iOS设备应该有极佳的一致性。也就是说，只要操作系统版本和<br>
app一致，同样的Automation脚本一旦能跑在iPad模拟器上，那它就应该能跑在相同设置的<br>
任何物理iPad上（忽略provisioning问题）。事实上不是这样的。Accessibility有的时候<br>
会生成一些不需要的元素，例如把滚动条显示为窄而长的图片，影响脚本中元素顺序。</p>

<p>Utility设计</p>

<p>无论你将它们称为Utility还是Library，总之它们是一些在你写脚本之前会不假思索#imp<br>
ort的一些js文件。它们应该完成以下功能：</p>

<p>环境修复</p>

<p>Instruments有一些小问题，这些问题可以使用JavaScript本身修复。例如onAlert有一些<br>
奇怪的表现，通常我会选择直接屏蔽这个方法。再比如我会针对命令行执行方式给出一个<br>
比较好看的CT100格式渲染，所以会加载一个额外的库。</p>

<p>环境增强</p>

<p>比如我习惯于将当前环境存为window变量。再比如我希望UIALogger的方法除了接受strin<br>
g类型，也接受number或者Object类型。再比如我可以给function的prototype增加bind方<br>
法实现比较高级的调用，都可以在这部分完成。</p>

<p>自动化测试解决方案</p>

<p>Automation顾名思义是自动化而不是自动化测试。需要一个Utility来定义一个自动化测试<br>
脚本的撰写方法与日志规范。</p>

<p>选择器，集合运算与方法组合</p>

<p>Web下的JavaScript库JQuery给人留下了很深的印象。一些通用的操作可以被归纳起来，例<br>
如查找一个元素数组的子元素中一个特定name的元素，或者将一组元素转化为JSON类型，<br>
再作为String打印出来。又或者前文提到的很慢的遍历方法。这些都可以写在这个库里。</p>

<p>针对具体APP特定方法</p>

<p>例如登陆功能将用户名密码输入指定框然后按登陆，或者判断一个页面是否加载完成，又<br>
或者查找一个page。</p>

<p>针对以上所有Utility的测试</p>

<p>思考</p>

<p>遍历</p>

<p>不常用的方法<br>
遍历是非常差的方法。通常不需要通过遍历取某个元素，而是直接一层一层选择比较好。</p>

<p>Bug</p>

<p>一旦需要遍历，首先注意的是一个问题，就是一般UIAStaticText是没有子元素的，之前提<br>
过一个bug就是UIAStaticText访问子元素会访问UIAApplication。需要修复这一问题。<br>
广度遍历VS深度遍历<br>
另外对于B1 Mobile，广度遍历比深度遍历达到元素的速度会更快。比如一个UIATableCel<br>
l里有一个UIAStaticText，然而这个UIAStaticText会直接把它的value传递给UIATableCe<br>
ll作为name，那么访问UIAStaticText就是没意义与浪费时间的。广度遍历可以让你首先找<br>
到UIATableCell从而返回，阻止进一步的时间浪费。</p>

<p>适当的过滤</p>

<p>通常遍历不需要遍历不可见元素，所以在判断一个元素是否值得遍历子元素之前判断一下<br>
这个元素本身是否可见是比较好的方法。isVisible方法是一个比较粗糙的解决方案。</p>

<p>命名原则与名字空间</p>

<p>命名原则应该一致，且望文知义。名字空间上，按照功能与依赖丢入不同的名字空间（在<br>
这里就是$与B1MA）有利于维护和查找。例如login如果没有名字空间，就会造成污染。它<br>
很明显是个与app有关的方法，应该丢入B1MA。</p>

<p>Test Case设计</p>

<p>简短而正交<br>
除了个别特殊测试，Test Case应该保持简短而正交。<br>
例如，如果有2个相关的Test Case，第二个不必要地跟第一个有一些交叉。后来在交叉<br>
部分出现了一个Regression，就会让第一个Test Case报错。而事实上第二个Test Case是<br>
没有报错必要的，很可能这种不必要交叉会阻塞住第二个Test Case的进行。<br>
适当的长度<br>
Test Case过长一方面会增加TA撰写和调试时间，另一方面由于Instruments不是很稳定，<br>
或者网络不稳定就要导致这个Test Case重新跑，这是比较耗费时间的。控制一个Test Ca<br>
se在15分钟以内是比较好的设计。</p>

<p>代码压缩与闭包<br>
代码压缩可以去除一些不必要地存储空间，以及提升运行效率。事实上我使用google clo<br>
sure compiler对我写的Utility压缩过，结果挺好。<br>
比较高级的代码压缩能分析整个测试代码工程，将库中没有使用的函数去除，并且把所有<br>
的代码压缩成一个单独的文件。我个人比较喜欢压缩的单一文件。<br>
值得注意的是，google closure compiler高级功能需要一些配置和代码撰写规范。而且实<br>
际上这个工具是为web定制的，需要规避一些像window，document之类的变量名。</p>

<p>半自动化与全自动化<br>
现状：半自动化</p>

<p>事实上我一直认为我所做的事情一直是“半自动化”的：手动的打开XCode，手动的选择A<br>
utomation，手动的配置app，手动的载入脚本，手动的按开始键，然后自动运行完之后手<br>
动载入下一个脚本，手动开始。当然我所做的事情是“创造价值的那一半”，但我认为自<br>
动化测试可以做的更多。</p>

<p>全自动化解决方案</p>

<p>命令行是这一切的基础。基于Automation，网络上有bwoken和CI的解决方案。对于这个解<br>
决方案的大致描述是，bwoken提供了instruments命令行的参数环境兼容性解决方法，让用<br>
户越过instruments又臭又长的参数输入列表，同时对log稍微优化一下。CI和版本控制软<br>
件相连，版本控制软件一旦check in新版本，CI自动的取下新版本，并把相应的Automati<br>
on Test Case分配给不同的测试机worker（也许测试脚本可以进一下 Closure Compiler）<br>
。Worker取得test case，跑完以后再把log上传到服务器。待所有test case跑完以后，s<br>
erver将这些结果生成综合报告。</p>

<p>危险：来自Instruments</p>

<p>我认为这是一个恰当的全自动化测试方案。但是目前对于Instruments的依赖太强了。Ins<br>
truments作为一个比较新的工具，本身有很多不稳定因素，所以在此之上搭建更高级的平<br>
台有很大的风险。但是这的确是一个合理的全自动测试方案。与之相比，GUI的Instrment<br>
s看起来更像是一个自动化测试脚本设计工具。</p>
      </div>


      

      <div class="tools pull-right">
  
  <a class="likeable" href="../account/password/edit"><i class="icon small_like"></i> <span>喜欢</span></a>
  
  <a href="http://cli.im/api/qrcode"><i class="icon icon-qrcode"></i>二维码</a>
</div>
<div class='social-share-button' data-title='iPhone/iPad UI 自动化测试指南作者  转载 via: @testerhome ' data-img='' data-url=''>
<a class="social-share-button-twitter" data-site="twitter" href="289#" onclick="return SocialShareButton.share(this);" rel="nofollow " title="分享到Twitter"></a>
<a class="social-share-button-facebook" data-site="facebook" href="289#" onclick="return SocialShareButton.share(this);" rel="nofollow " title="分享到Facebook"></a>
<a class="social-share-button-google_plus" data-site="google_plus" href="289#" onclick="return SocialShareButton.share(this);" rel="nofollow " title="分享到Google+"></a>
<a class="social-share-button-weibo" data-site="weibo" href="289#" onclick="return SocialShareButton.share(this);" rel="nofollow " title="分享到新浪微博"></a>
<a class="social-share-button-douban" data-site="douban" href="289#" onclick="return SocialShareButton.share(this);" rel="nofollow " title="分享到豆瓣"></a>
</div>

    </div>
  </div>

    <div class="no_result">
      暂无回复。
    </div>

      <div id="reply" class="form box">
    <div style="padding:20px;">
    需要 <a class="btn btn-primary" href="../account/password/edit">登录</a> 后回复方可回复, 如果你还没有账号你可以 <a class="btn btn-danger" href="../account/sign_up">注册</a> 一个帐号。
    </div>
</div>
</div>

  <div class="sidebar">
    
    <div class="box">
  <h2 class="title">小帖士</h2>
  <div class="content">
    每个人都会遇到困难, 希望朋友的陪伴能够给你带来新的温暖
  </div>
</div>
    <div class="box clearfix">
  <h2 class="title">节点下其他话题</h2>
  <ul>
    <li><a href="1918" title="iOS 运行第二个 case 时报 500 错误">iOS 运行第二个 case 时报 500 错误</a></li>
  </ul>
</div>

  </div>

    </div>
  </div>

  <a class="go_top" href="289#"><i class="icon icons_go_top"></i></a>
  <footer class="footer">
    <div class="container">
      <div class="container">
      <div class="pull-right" style="width:200px; text-align:right;">
<a href="http://www.ucloud.cn/?ref=testerhome.com" target="_blank" rel="twipsy" style="display:inline-block;margin-right:5px;" data-original-title="本站服务器由 Ucloud 赞助"><img src="../photo/2014/ace04e205ff40be04f47de439d253b59.png" style="height:28px"></a>
</div>

<div>
<div class="pull-left" style="margin-right:10px;">
<img src="../photo/2015/7b5b57bb91762429809a9f95255392ad.png" style="width:48px;">
</div>
<p class="links">

<a href="143">关于</a> | 
<a href="http://weibo.com/u/3871514412">微博</a> | 
<a href="../users.1">活跃用户</a> | 
<a href="node13">反馈</a> | 
<a href="https://github.com/testerhome">Github</a> |
<a href="../wiki/spreadtesterhome">帮助推广</a> |  
<a href="http://www.miibeian.gov.cn/">京ICP备13049862号</a>


</p>
<p class="copyright">
TesterHome 移动测试社区，由众多移动测试工作者维护，致力于推进国内测试技术。
</p>
<p class="copyright">
友情链接

<a href="http://ruby-china.org/"  rel="twipsy" style="display:inline-block;margin-right:5px;" data-original-title="感谢RubyChina提供建站代码">Ruby-China</a> | 
<a href="http://www.diggerplus.org/">DiggerPlus</a> | 
<a href="http://www.testwo.com/">测试窝</a> | 
<a href="http://www.kootest.com/">酷测</a> | 
<a href="http://itest.info/">重定向科技</a> |
<a href="http://www.robotium.cn/">Robotium 中国</a> |
<a href="http://cafe.testin.cn/">Testin开发者社区</a>
<script src="http://s4.cnzz.com/z_stat.php?id=1000474281&web_id=1000474281" language="JavaScript"></script>

</p>

</div>
    </div>






    </div>
  </footer>
  <script type="text/javascript" data-turbolinks-eval=false>
    App.root_url = "http://testerhome.com/";
    App.asset_url = "http://testerhome.com";
    App.faye_client_url = "http://testerhome.com:8080/faye";
    if (App.faye_client_url) {
      App.initNotificationSubscribe();
    }
  </script>
    <script type="text/javascript">
    Topics.replies_per_page = 50;
    $(document).ready(function(){
    })
  </script>

  <script type="text/javascript">
      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-45014075-1']);
      _gaq.push(['_setSiteSpeedSampleRate', 100]);
      _gaq.push(['_trackPageview']);
      u=document.getElementById("user_menu");
      ur="";
      if(u) ur=document.getElementById("user_menu").innerText.split(" ")[0]
      _gaq.push(['_setCustomVar', 1,'user',ur,1]);

      (function() {
          var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
          ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
          var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
      })();
  </script>

  <div class="zoom-overlay"></div>
</body>
</html>
