<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>TesterHome 社区 Robotium 节点</title>
    <link>http://testerhome.com/</link>
    <description>TesterHome 社区 Robotium 节点最新发帖.</description>
    <item>
      <title>求大神支招，获取相同 id 的控件。</title>
      <description>&lt;p&gt;&lt;img src="/photo/2015/1e1ab013dfa7173c480f64dcc3a09ad0.png" alt=""&gt;&lt;br&gt;
菜鸟一枚，被相同id的控件搞的很无奈，这种id相同的不知道怎么定位。还有很多类似的情况，id相同，text也相同。&lt;/p&gt;</description>
      <author>kesha0</author>
      <pubDate>Mon, 19 Jan 2015 22:43:04 +0800</pubDate>
      <link>http://testerhome.com/topics/1901</link>
      <guid>http://testerhome.com/topics/1901</guid>
    </item>
    <item>
      <title>在运行测试时遇到 Test run failed: Instrumentation run failed due to 'Process crashed.'，有人遇到过吗，求解答</title>
      <description>&lt;p&gt;运行第一个测试用例时遇到这样的问题。&lt;br&gt;
package com.example.com.sinanew.www;&lt;/p&gt;

&lt;p&gt;import android.app.Activity;&lt;br&gt;
import android.graphics.AvoidXfermode;&lt;br&gt;
import android.test.ActivityInstrumentationTestCase2;&lt;/p&gt;

&lt;p&gt;import com.robotium.solo.Solo;&lt;/p&gt;

&lt;p&gt;public class TestOne extends ActivityInstrumentationTestCase2 {&lt;/p&gt;

&lt;p&gt;private static String LAUNCHER_ACTIVITY_FULL_CLASSNAME ="com.sina.news.ui.PowerOnScreen";&lt;br&gt;
    private static String packageName = "com.sina.news";&lt;br&gt;
    private static Class launcherActivityClass;&lt;/p&gt;

&lt;p&gt;static{&lt;br&gt;
        try {&lt;br&gt;
            launcherActivityClass = Class.forName(LAUNCHER_ACTIVITY_FULL_CLASSNAME);&lt;br&gt;
        } catch (ClassNotFoundException e) {&lt;br&gt;
            e.printStackTrace();&lt;br&gt;
        }&lt;br&gt;
    }&lt;/p&gt;

&lt;p&gt;public TestOne() {&lt;br&gt;
        super(packageName,launcherActivityClass);&lt;/p&gt;

&lt;p&gt;}&lt;br&gt;
    protected Solo solo;&lt;br&gt;
    public Activity activity;&lt;/p&gt;

&lt;p&gt;&lt;a href="/Override" class="at_user" title="@Override"&gt;&lt;i&gt;@&lt;/i&gt;Override&lt;/a&gt;&lt;br&gt;
    protected void setUp() throws Exception{&lt;br&gt;
        this.activity = this.getActivity();&lt;br&gt;
        solo = new Solo(getInstrumentation(), getActivity());&lt;/p&gt;

&lt;p&gt;}&lt;br&gt;
    &lt;a href="/Override" class="at_user" title="@Override"&gt;&lt;i&gt;@&lt;/i&gt;Override&lt;/a&gt;&lt;br&gt;
    protected void tearDown() throws Exception {&lt;br&gt;
        //super.tearDown();&lt;br&gt;
        try{&lt;br&gt;
        solo.finishOpenedActivities();&lt;/p&gt;

&lt;p&gt;} catch (Exception e) {&lt;/p&gt;

&lt;p&gt;e.printStackTrace();&lt;br&gt;
        }&lt;/p&gt;

&lt;p&gt;}&lt;br&gt;
    public void testLogin() {&lt;br&gt;
        solo.sleep(10000);&lt;br&gt;
        //solo.waitForText("Log In",1,10000);&lt;br&gt;
        //solo.clickOnText("Log In");&lt;br&gt;
    }&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;&lt;img src="/photo/2015/d0bb7b200116856a00f6e9552eee6ac3.png" alt=""&gt;&lt;br&gt;
&lt;img src="/photo/2015/a9be9e3ae2ccee0e358ce36b680c2946.png" alt=""&gt;&lt;/p&gt;</description>
      <author>xuanwei</author>
      <pubDate>Mon, 19 Jan 2015 12:48:31 +0800</pubDate>
      <link>http://testerhome.com/topics/1898</link>
      <guid>http://testerhome.com/topics/1898</guid>
    </item>
    <item>
      <title>哪位大侠有空来解救一下吧。ROBOTIUM 虚拟机怎么执行 ADB SHELL 的命令啊？</title>
      <description>&lt;p&gt;正在实践前两天论坛大侠写得关于ADB 实现ROBOTIUM跨进程的问题。&lt;br&gt;
&lt;a href="/xuxu" class="at_user" title="@xuxu"&gt;&lt;i&gt;@&lt;/i&gt;xuxu&lt;/a&gt; &lt;a href="/qinggchu" class="at_user" title="@qinggchu"&gt;&lt;i&gt;@&lt;/i&gt;qinggchu&lt;/a&gt;&lt;br&gt;
实际操作的时候出了状况。&lt;br&gt;
目前发现所有的ADB SHELL命令都实际没有执行。&lt;/p&gt;

&lt;p&gt;CMD直接进ADB SHELL都是可以用得。UIAUTOMATOR可以DUMP出来。&lt;br&gt;
但是在ROBOTIUM里面就是取不出来。&lt;br&gt;
试了一下连LS都取不出。&lt;/p&gt;

&lt;p&gt;C:\Users\yangch&amp;gt;adb shell&lt;br&gt;
root@generic_x86:/ # ls&lt;br&gt;
ls&lt;br&gt;
直接进的是ROOT用户，这打印说明不用再ROOT了吧？&lt;/p&gt;

&lt;p&gt;MANIFEST也增加了sharedUserId的权限。&lt;br&gt;
    &amp;lt;uses-permission &lt;br&gt;
        android:name="android.permission.WRITE_EXTERNAL_STORAGE"&lt;br&gt;
        android:sharedUserId="android.uid.system"&lt;br&gt;
        /&amp;gt;&lt;br&gt;
哪位大侠以前弄过？这里还有什么坑没填过去？还是INSTRUMENT的架构就不能直接调ADB SHELL？&lt;br&gt;
还是源APK也要修改一些内容？暂时搞不定了。。。求解救。&lt;br&gt;
掉得是XUXU提供的ADB库。&lt;br&gt;
附基本的代码：&lt;/p&gt;
&lt;pre class="highlight java"&gt;        &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;v&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"mainActivity"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ShellUtils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getShellOut&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ShellUtils&lt;/span&gt;
                 &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ls"&lt;/span&gt;&lt;span class="o"&gt;)));&lt;/span&gt;
   &lt;span class="err"&gt;调用链：&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Process&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"adb shell "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;BufferedReader&lt;/span&gt; &lt;span class="n"&gt;shellOut&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt; &lt;span class="n"&gt;ps&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;BufferedInputStream&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BufferedInputStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInputStream&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="n"&gt;BufferedReader&lt;/span&gt; &lt;span class="n"&gt;br&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BufferedReader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;InputStreamReader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;br&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;getShellOut&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt; &lt;span class="n"&gt;ps&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;StringBuilder&lt;/span&gt; &lt;span class="n"&gt;sb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;StringBuilder&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;BufferedReader&lt;/span&gt; &lt;span class="n"&gt;br&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shellOut&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ps&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;br&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readLine&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;sb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;append&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//          sb.append(line + System.getProperty("line.separator"));&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;br&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Process&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Process&lt;/span&gt; &lt;span class="n"&gt;ps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;ps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Runtime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getRuntime&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;exec&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ps&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;</description>
      <author>yangchengtest</author>
      <pubDate>Thu, 15 Jan 2015 15:21:07 +0800</pubDate>
      <link>http://testerhome.com/topics/1876</link>
      <guid>http://testerhome.com/topics/1876</guid>
    </item>
    <item>
      <title>求助 Listview 定义中有子类，然后获取 id，view 定义出错的情况</title>
      <description>&lt;p&gt;因为是公司代码，所以详细代码我就不贴了。&lt;/p&gt;

&lt;p&gt;待测代码中：&lt;br&gt;
该控件的为下图中的PullListView，该view是自定义的。id是list&lt;/p&gt;

&lt;p&gt;&lt;img src="/photo/2015/6528d172cd97b4b5002f95a6b140e2b1.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;但是找不到PullListView $ListView9这个类，于是我的定义和赋值为：&lt;/p&gt;

&lt;p&gt;PullListView listView = &lt;br&gt;
        (PullListView)solo.getCurrentActivity().findViewById(android.R.id.list);&lt;/p&gt;

&lt;p&gt;结果报错：&lt;/p&gt;

&lt;p&gt;java.lang.ClassCastException: com.example.PullListView$ListView9 cannot be cast to com.example.PullListView&lt;/p&gt;

&lt;p&gt;然后我找了下PullListView的源码，发现ListView9是这个PullListView中定义的一个子类，大概就是：&lt;/p&gt;

&lt;p&gt;public class PullListView{&lt;br&gt;
     /*&lt;/p&gt;

&lt;p&gt;*/&lt;br&gt;
    ......&lt;br&gt;
    ......&lt;br&gt;
    final class ListView9{&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;各位大神，求教这种情况下，这个控件怎么定义啊？&lt;br&gt;
&lt;code&gt;PullListView listView;&lt;/code&gt;不对，&lt;code&gt;PullListView$ListView9&lt;/code&gt; 也没有&lt;/p&gt;</description>
      <author>blue_momo2009</author>
      <pubDate>Thu, 15 Jan 2015 15:05:36 +0800</pubDate>
      <link>http://testerhome.com/topics/1874</link>
      <guid>http://testerhome.com/topics/1874</guid>
    </item>
    <item>
      <title>ROBOTIUM LISTVIEW 中元素不等高且超过一屏的遍历方法。供参考~</title>
      <description>&lt;p&gt;方法就是在当前元素竖坐标超过屏幕高度*0.8时，将最下面的挪到最上面去，然后判断,将重复的去掉。&lt;br&gt;
缺点是如果LISTVIEW有重复元素，最后一页检索可能会有问题。&lt;br&gt;
分享一下源码：&lt;/p&gt;
&lt;pre class="highlight java"&gt;        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;scrollnum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;DisplayMetrics&lt;/span&gt; &lt;span class="n"&gt;dm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;DisplayMetrics&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;activity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getWindowManager&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getDefaultDisplay&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getMetrics&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dm&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;screenHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;heightPixels&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;v&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"mainActivity"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"屏幕宽度:"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;valueOf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;screenHeight&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;audiolist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCount&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt;
        &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="n"&gt;TextView&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;solo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"***"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;scrollnum&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getLocationOnScreen&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
            &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;v&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"mainActivity"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"第"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;valueOf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)+&lt;/span&gt;&lt;span class="s"&gt;"个音频名称是："&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getText&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getText&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testaudio&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
            &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;testnum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;v&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"mainActivity"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;valueOf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)+&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
            &lt;span class="n"&gt;scrollnum&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;screenHeight&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;scrtext&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getText&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;solo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;scrollListToLine&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;audiolist&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;solo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sleep&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;scrollnum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;nexttext&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;scrtext&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nexttext&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
                &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="n"&gt;TextView&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;solo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"****"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;scrollnum&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                    &lt;span class="n"&gt;nexttext&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getText&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                    &lt;span class="n"&gt;scrollnum&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;</description>
      <author>yangchengtest</author>
      <pubDate>Thu, 15 Jan 2015 10:44:22 +0800</pubDate>
      <link>http://testerhome.com/topics/1870</link>
      <guid>http://testerhome.com/topics/1870</guid>
    </item>
    <item>
      <title>一点疑惑，请问大侠们，你们都在同时维护 APPIUM 和 ROBOTIUM 两套代码么？</title>
      <description>&lt;p&gt;一个APK的基本功能用ROBOTIUM实现，个人总觉得ROBOTIUM速度快很多，而且对于LISTVIEW这种组件，不用自己写SCROLL。对于内部控件的可操作的内容也比APPIUM多很多。看了一下前两天论坛大侠提到的ADB跨进程的内容，感觉绕了一圈，可操作的API还没有APPIUM多啊。&lt;br&gt;
但是ROBOTIUM不支持跨进程。所以又用了APPIUM来写跨进程的用例。&lt;br&gt;
现在发现如果源APK最基本的一些操作修改，悲剧的就要改两套代码了啊。&lt;br&gt;
大侠们也遇到过类似的情况么？请问是如何解决的啊？&lt;/p&gt;</description>
      <author>yangchengtest</author>
      <pubDate>Tue, 13 Jan 2015 14:52:45 +0800</pubDate>
      <link>http://testerhome.com/topics/1852</link>
      <guid>http://testerhome.com/topics/1852</guid>
    </item>
    <item>
      <title>android studio 下可以进行 robotium 测试吗？</title>
      <description>&lt;p&gt;android studio 下可以对工程进行robotium测试吗？&lt;/p&gt;</description>
      <author>jiguanghover</author>
      <pubDate>Mon, 12 Jan 2015 09:39:53 +0800</pubDate>
      <link>http://testerhome.com/topics/1837</link>
      <guid>http://testerhome.com/topics/1837</guid>
    </item>
    <item>
      <title> 史上最简单 Robotium 跨进程操作实践——基于 ADB 框架</title>
      <description>&lt;p&gt;最开始发在csdn的，为了更多小伙伴看到，特在这里再转一下。&lt;a href="http://blog.csdn.net/qingchunjun/article/details/42580937" rel="nofollow" target="_blank"&gt;http://blog.csdn.net/qingchunjun/article/details/42580937&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Robotium是Android平台下一款非常优秀的自动化测试框架，它做android平台自动化的优势想必看到这篇文章的人应该都很清楚。但优点归优点，缺点也比较多，最明显的缺点有两个，一是必须要和被测系统签名保持一致，二是不能做任何跨进程的操作。&lt;/p&gt;

&lt;p&gt;很多小伙伴知道怎么用robotium，也知道它有这些限制，但不知道其中的原因。这里简单地说一下，robotium的这些先天不足的主要原因是由于它本身是基于instrumentation机制的，这既有好处也有坏处。好处是通过instrumentation注入到被测进程，从而与被测进程运行在同一进程空间，使得它能够非常方便地识别被测应用中的被测对象，并对这些对象进行操作。坏处是既然robotium已经跟被测应用”合体”了，那么根据android的进程隔离机制，它自然也被系统隔离在其他进程之外，无法跨进程操作任何对象，如图（1）所示。&lt;/p&gt;

&lt;p&gt;&lt;img src="/photo/2015/65f123aa69884669c16e014a9421d378.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;图（1）Android进程沙箱示意图&lt;/p&gt;

&lt;p&gt;其实使用相同的签名对于单应用的测试来说并不是难事，网上有很多应用重签名的方法和工具供大家使用。但不能跨进程操作确实成为了robotium最大的软肋，很多第三方的应用测试或多或少都有一些跨进程操作的测试场景，所以不少人因为这个问题而放弃了robotium，甚是可惜啊。&lt;/p&gt;

&lt;p&gt;作为robotium的铁杆粉之一(我最开始接触android自动化测试就是用的robotium)，断断续续用了好几年，一直觉得是android平台最好用的自动化测试工具之一。对于robotium怎样突破进程的限制也做过一些研究，网上比较多的解决方案无外乎有以下几种：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;自己写服务做server，基于AIDL或编写socket与monkeyserver进行通讯，然后在robotium测试脚本里调用接口方法来间接地进行跨进程的操作，这种方式可以参考下这篇文章的例子：&lt;a href="http://www.robotium.cn/archives/584aidl%E6%8E%A5%E5%8F%A3%E6%9D%A5%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C%EF%BC%8C%E6%AF%94%E5%A6%82%E8%B0%83%E7%94%A8%E6%8B%8D%E7%85%A7%E6%93%8D%E4%BD%9C%EF%BC%8C%E6%89%80%E4%BB%A5%E5%85%B6%E5%AE%9E%E4%BE%8B%E5%AD%90%E5%B9%B6%E4%B8%8D%E6%98%AF%E5%BE%88%E5%A4%9A%EF%BC%8C%E6%8A%80%E6%9C%AF%E4%B8%8A%E7%9A%84%E5%B1%80%E9%99%90%E6%80%A7%E8%BE%83%E5%A4%A7%E3%80%82" rel="nofollow" target="_blank"&gt;http://www.robotium.cn/archives/584aidl接口来进行操作，比如调用拍照操作，所以其实例子并不是很多，技术上的局限性较大。&lt;/a&gt;。文章的作者只是给出了思路，我自己曾经按照这种方法去实现过，发现该方法的优势是比较稳定，缺点就是实现起来确实比较复杂，而且有些操作无法找到现成的系统&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;基于广播和service服务。这种方法的实现方式可以参考&lt;a href="http://www.ltesting.net/ceshi/open/kygncsgj/2013/0507/206229.htmlapi%EF%BC%8C%E9%9A%BE%E5%BA%A6%E4%B9%9F%E4%B8%8D%E7%AE%97%E5%B0%8F%EF%BC%8C%E6%89%80%E4%BB%A5%E4%B8%80%E8%88%AC%E4%B8%8D%E5%BB%BA%E8%AE%AE%E4%BD%BF%E7%94%A8%E8%BF%99%E7%A7%8D%E6%96%B9%E5%BC%8F%E3%80%82" rel="nofollow" target="_blank"&gt;http://www.ltesting.net/ceshi/open/kygncsgj/2013/0507/206229.htmlapi，难度也不算小，所以一般不建议使用这种方式。&lt;/a&gt;这篇文章的描述。这种方法我没有亲自去试过，但不难发现这种方法原理稍微简单些，但该方法貌似需要系统签名，而且自己写广播和服务来调用系统&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;综合上面的这些跨进程的解决方案，其实都感觉不太理想，对于很多初学者来说不是太难实现就是局限性比较大，一直没有找到一个比较理想的解决方案。直到后来在testerhome上看到一个技术很牛的兄弟把常用的adb命令做了一个很完备的封装(PS：真的是很全了，至少常用的adb命令都在，我甚至之前都没有想过adb命令还能做这么多事情)，做成了一个独立的测试辅助工具。我就突然联想到为何不能使用adb命令来辅助robotium进行跨进程操作呢？既然该框架已经封装了基于adb的所有操作，而且adb又是不受系统限制的，那么基于这个框架理论上进行跨进程操作是没有任何问题的。后来经过试验，确实效果不错，轻量级、操作简单、使用方便，并且轻松跨进程，真是居家测试、屌丝逆袭的必备神器啊。好了，闲话不多说了，接下来我们就来详细地看看究竟是怎么用的。&lt;/p&gt;

&lt;p&gt;先来简单地介绍下这个adb命令框架的常用接口。这个框架里有三个主要的包，分别介绍如下：&lt;/p&gt;

&lt;p&gt;xuxu.autotest这个包里面主要有两个类，一个是AdbDevice，封装了功能测试中常用的一些操作，如获取当前activity的名称和包名、获取设备分辨率、关闭应用、点击对象等常用功能，非常实用。另一个类是XuImage，顾名思义，即封装了一些常见的图片操作，如得到指定边界的图片截图、对比图片是否一致、截取图片等。&lt;/p&gt;

&lt;p&gt;xuxu.autotest.element这个包主要用于获取被测对象，主要是封装了一个Position对象，用于通过Class Name、Id、Contentdesc等属性来获取一个被测对象，其底层是通过uiautomator来dump 当前ui的xml文件的，可以获取到所有对象节点的xml文件。&lt;/p&gt;

&lt;p&gt;xuxu.autotest.utils这个包里面主要提供了对Date日期时间的操作，ImageUtil对图片的操作及正则表达式和shell语句的操作的封装，方便大家的使用。总的来说整个框架的接口设计还是非常齐全的，可以实现很多常用功能，具体功能大家可以自己看源码和帮助文档来摸索。&lt;/p&gt;

&lt;p&gt;接下来就进入我们本次的主题——跨进程。为了方便大家理解，我会在本文中选择两个非常常见的跨进程操作场景来说明如何跨进程，也就是大家喜闻乐见的相机拍照和打电话来进行演示。&lt;/p&gt;

&lt;p&gt;例子1、跨进程操作之相机拍照。&lt;/p&gt;

&lt;p&gt;被测程序非常简单，程序界面截图如下图（2）所示：&lt;br&gt;
&lt;img src="/photo/2015/37c762fa3e7e7e6673669795a6c83ac2.jpg" alt=""&gt;&lt;br&gt;
图（2）&lt;/p&gt;

&lt;p&gt;点击第一个界面的“拍照片”按钮后，进入界面2，点击其中的“拍张照片”后启动系统的相机，当用户按下拍照功能键后，系统可以将用户拍下的照片显示在应用中，以备后续浏览或者是上传。由于相机应用和我们所写的被测应用是两个不同的应用，所以这就属于典型的跨进程操作，Robotium框架本身是无法对这个相机界面进行操作的。&lt;/p&gt;

&lt;p&gt;接下来看看关键的测试工程怎么创建的。测试工程的创建方法非常简单，操作步骤如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;首先按照常规的android测试工程的建法，创建一个常规测试工程。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在工程中引入robotium和adbForAndroid的jar包。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这样，我们的测试工程就准备好了。&lt;/p&gt;

&lt;p&gt;接下来的步骤就是写测试脚本。由于AdbForAndroid框架是按照元素的相关属性来查找并定位被测对象的，所以首先要弄清楚我们要操作的跨进程的界面上的对象的信息，这些信息我们可以通过很多现成工具来看，我这里选择android自带的uiautomatorviewer。先在模拟器上手工打开被测程序，进入拍照的相机界面，并用uiautomatorviewer查看界面元素信息如下图(3)所示：&lt;/p&gt;

&lt;p&gt;&lt;img src="/photo/2015/e6785e3a9f10a1b225dc29753dbacbef.jpg" alt=""&gt;&lt;br&gt;
图（3）&lt;/p&gt;

&lt;p&gt;我们可以看到，我们要点击的拍照按钮的属性在图（3）的右下角的列表中已全部展现出来。那么我们该选哪个呢？这个问题取决于adbForAndroid框架支持由哪些属性来获取元素。通过查询其帮助文档，我们知道目前这个框架中常用的查找元素的方法如下：&lt;br&gt;
findElementByContentdesc&lt;br&gt;
findElementByClass&lt;br&gt;
findElementByText&lt;br&gt;
findElementById&lt;/p&gt;

&lt;p&gt;由于我现在使用的模拟器版本为4.2.2，所以uiautomatorviewer无法显示id属性，如果大家用的是4.3版本以上，就可以看到元素的id属性了。&lt;br&gt;
那么现在这种情况来看，我们最好就选择Contentdesc属性来定位对象了。代码很简单，如下：&lt;br&gt;
Element element =position.findElementByContentdesc("Shutter button");&lt;br&gt;&lt;br&gt;
adbDevice.tap(element);  //点击拍照按钮&lt;br&gt;&lt;br&gt;
好，接下来点击了拍照按钮之后，拍照功能还会让你选择是确定还是取消操作，如下图（4）所示：&lt;br&gt;
&lt;img src="/photo/2015/6f573a1669c286f262736b78507f69a8.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;图（4）&lt;/p&gt;

&lt;p&gt;那么如法炮制，我们通过查询获知，这个用于确定的“√”按钮，它的属性能用于定位的其实只有class属性。不过这里要注意的是，此时由于我们用的是class属性，大家可以看到界面上class属性跟我们要点击的“√”这个按钮相同的对象很多，所以我们必须用findElementsByClass方法了。这个方法返回的是一个ArrayList&amp;lt;Element&amp;gt;，所以我们可以写如下的代码来获取所有class属性为”android.widget.ImageView”的元素列表。&lt;/p&gt;

&lt;p&gt;ArrayList&amp;lt;Element&amp;gt; imageViews =position.findElementsByClass("android.widget.ImageView");  &lt;/p&gt;

&lt;p&gt;好，写完之后，现在问题来了，究竟这个数组里面哪个index才是对应的我们要点击的“√”按钮呢？经过试验，我发现界面上多个相同元素返回到数组中时，对应元素位置是按照界面上的位置从上到下、从左到右来的，所以我们要点击的这个按钮的index应该是4。所以点击它的代码如下：&lt;/p&gt;

&lt;p&gt;adbDevice.tap(imageViews.get(4));    //2是x，3是重拍，4是√  &lt;/p&gt;

&lt;p&gt;上面的代码运行完后，界面就会回到我们的被测程序，后面的操作就不用我再多说了，大家看看是不是非常简单？大笑&lt;/p&gt;

&lt;p&gt;例子2、跨进程操作之打电话&lt;/p&gt;

&lt;p&gt;有了第一个例子的基础，其实第二个例子就很好实现了。被测程序非常简单，如下图（5）所示：&lt;br&gt;
&lt;img src="/photo/2015/0835e84fe4ea660d77f082757bae0f7f.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;图（5）&lt;/p&gt;

&lt;p&gt;点击“拨打该号码”后，系统自动进入拨号界面，所以也是典型的跨进程测试场景。&lt;/p&gt;

&lt;p&gt;实现方法还是跟例1中一样，先还是用uiautomatorviewer查看界面中的对象信息，再使用对应的方法来操作对象即可。而且在这个例子中，我还给大家演示了另外一种情况，即有些跨进程操作不但要进行操作，还要取得一些对象属性来进行验证，这也是基本可以的。这里我直接给出我的测试代码(稍微封装了一下)：&lt;/p&gt;

&lt;p&gt;public boolean CallUtil(String callNumber){&lt;br&gt;&lt;br&gt;
            Element  element;&lt;br&gt;&lt;br&gt;
            boolean  result;&lt;br&gt;&lt;br&gt;
            //验证是否拨打了正确的号码&lt;br&gt;&lt;br&gt;
            if(callNumber.length() == 11){//正常号码需要转变为 x xxx-xxx-xxxx的格式&lt;br&gt;&lt;br&gt;
                    StringformatCallNumber = callNumber.substring(0, 1) + " " +callNumber.substring(1, 4) + "-" + callNumber.substring(4,7) +"-" + callNumber.substring(7, callNumber.length());&lt;br&gt;&lt;br&gt;
                    element= position.findElementByText(formatCallNumber);&lt;br&gt;&lt;br&gt;
                    try{&lt;br&gt;&lt;br&gt;
                            Thread.sleep(2000);  //线程休眠2秒&lt;br&gt;&lt;br&gt;
                    }catch (InterruptedException e) {&lt;br&gt;&lt;br&gt;
                            e.printStackTrace();&lt;br&gt;&lt;br&gt;
                    }&lt;br&gt;&lt;br&gt;
            }else{&lt;br&gt;&lt;br&gt;
                    element= position.findElementByText(callNumber);//除正常号码外，其他格式的号码不进行格式转换&lt;br&gt;&lt;br&gt;
            }&lt;br&gt;&lt;br&gt;
            if(element != null){&lt;br&gt;&lt;br&gt;
                    result= true;&lt;br&gt;&lt;br&gt;
            }else{&lt;br&gt;&lt;br&gt;
                    result= false;&lt;br&gt;&lt;br&gt;
            }&lt;br&gt;&lt;br&gt;
            element= position.findElementByContentdesc("End");   //挂断电话&lt;br&gt;&lt;br&gt;
            if(element != null) adbDevice.tap(element);&lt;br&gt;&lt;br&gt;
            return  result;&lt;br&gt;&lt;br&gt;
    }  &lt;/p&gt;

&lt;p&gt;好了，整个过程非常简单。我相信能用robotium的童鞋用起来应该都没有任何问题，所有代码都是非常易用易懂的。&lt;/p&gt;

&lt;p&gt;相信通过前面的实例，大家可以发现说这是“史上最简单”的Robotium跨进程操作解决方案我估计没人会反对，这并不是夸大事实、博人眼球，确实很简单，功能也很强大。其他也不用我多说了，最后我再来对该框架总结一下下吧：&lt;/p&gt;

&lt;p&gt;优点：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;确实非常全，基本封装了adb的所有常用命令，它本身就是一个adb命令使用大全了。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;框架接口设计清晰易懂，简单明了，封装成jar包，用起来也很方便。另外希望大家都能看看它的源码并了解它的实现细节，作者封装得还是很不错的，很值得我们学习，而不仅仅是简单地使用它。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不需要root权限。其实这点还是很重要的，有些公司的测试机是没有root权限，用adb就很方便。对于不想放弃robotium，又确实有跨进程操作需求的童鞋来说，真的是非常实用的一个框架。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;目前已知的不足：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;手机的版本必须是4.1以上，即至少必须支持uiautomator的手机才行，因为该框架本身底层是依赖于uiautomator来dump出对象布局xml文件，最终获取对象的坐标进行操作的，所以你的手机版本本身并不支持uiautomator的话，就没法实现dump操作。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有些对象是uiautomator也无法识别和操作的，那当然这个框架也无能为力了。比如屏幕最上方的通知消息栏的对象，所有工具都没法显示和识别，这个肯定没办法了，另外还比如输入文字时的弹出键盘上的按钮对象等，也无法识别，大家可以试试。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以后想要尝试的改进：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;对于手机版本的支持问题，个人觉得有个曲线救国的方法可以解决。即我们可以稍微修改下源码，加入判断手机版本的代码，判断当前手机版本如果高于4.1，就直接通过uiautomator来dump，如果低于4.1，则读取PC上事先导出到指定位置的xml文件。这样的话，如果你使用的手机不是4.1以上的版本，只需要事先把被测应用用4.1以上版本的手机通过uiautomator先dump到PC的一个指定路径上就行了，这样效果应该是一样的，只要最终能得到对象坐标就OK。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;再加一些比较实用的功能。比如现在可以根据text来查找对象，但实际上很多时候我们可能是得到对象了，但想通过这个对象去获取对象的其他属性，所以建议增加类似getXXXXByElement(Element e)这样的方法，有空试一下，呵呵。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上只是我的一些个人想法，如果大家还有一些什么别的建议，也欢迎大家都提出来，一起来完善这个很实用的框架。&lt;/p&gt;

&lt;p&gt;最后，再次感谢AdbForAndroid框架的作者: xuxu。&lt;/p&gt;

&lt;p&gt;框架源码github地址：&lt;a href="https://github.com/gb112211/Adb-For-Test" rel="nofollow" target="_blank"&gt;https://github.com/gb112211/Adb-For-Test&lt;/a&gt;&lt;br&gt;
本文中相关样例工程源码(含被测程序和测试程序)下载 &lt;/p&gt;</description>
      <author>qinggchu</author>
      <pubDate>Sat, 10 Jan 2015 15:42:52 +0800</pubDate>
      <link>http://testerhome.com/topics/1826</link>
      <guid>http://testerhome.com/topics/1826</guid>
    </item>
    <item>
      <title>robotium 在同一个布局里面，第一个控件可以访问，第二个空间却不能访问</title>
      <description>&lt;p&gt;大家好，我有个问题，我们的界面有个布局是listview，里面有四个控件，布局为relativelayout，我可以直接通过 clickontext()，直接访问到第一个relativelayout里面的textview控件(我的积分)。再次直接时，再次使用clickontext()方法访问第二个控件“我的漫币”，却一直都无法触发到点击事件。如下截图所示：&lt;br&gt;
&lt;img src="/photo/2015/1740ba17fbdeda9a3e9e5b036a59adf3.png" alt=""&gt;&lt;br&gt;
&lt;img src="/photo/2015/e429030f8b21d57d2bb879f543961fae.png" alt=""&gt;&lt;br&gt;
是不是因为布局relativelayout的原因导致无法访问到除第一个以外的其他控件呢？大家有没有遇到这种问题，如何解决呢？谢谢！&lt;/p&gt;</description>
      <author>yunbin_7</author>
      <pubDate>Tue, 06 Jan 2015 17:06:14 +0800</pubDate>
      <link>http://testerhome.com/topics/1786</link>
      <guid>http://testerhome.com/topics/1786</guid>
    </item>
    <item>
      <title>怎么触发多个层级嵌套下的最底层控件(id 一样时)，且没有源码</title>
      <description>&lt;p&gt;大家好，现在还是层级嵌套的访问，有些控件我已经按照层级关系访问了，但是还是无法触发点击到该控件的操作，如下图：&lt;br&gt;
&lt;img src="/photo/2015/f427356cb23a09b666983b34005b2b71.png" alt=""&gt;&lt;br&gt;
我要怎么点击“我的”这个控件呢？&lt;/p&gt;</description>
      <author>yunbin_7</author>
      <pubDate>Tue, 06 Jan 2015 15:55:15 +0800</pubDate>
      <link>http://testerhome.com/topics/1783</link>
      <guid>http://testerhome.com/topics/1783</guid>
    </item>
    <item>
      <title>ROBOTIUM 实现简单的图像识别。~</title>
      <description>&lt;p&gt;手机上的看到的图片是原图经过服务器的处理，有部分的裁剪，同时进行过等比例的缩放。进行手机图片和原图的比较。&lt;br&gt;
思路：&lt;br&gt;
1.通过ROBOTIUM获取IMAGEVIEW的BITMAP。&lt;br&gt;
2.将原图读入BITMAP，根据服务器的裁剪规则，对原图进行裁剪。&lt;br&gt;
3.根据原图裁剪过的比例，将IMAGEVIEW上获取到的图片进行上下或左右边框留白去除。&lt;br&gt;
4.通过RGB加权的算法，进行图片识别。&lt;/p&gt;

&lt;p&gt;每个人需求不同，这边提供一个思路供参考。这个不需要第三方的工具。~就是要自己写点算法，网上有现成的RGB算法，这里加入了缩放的比例权限。感觉效果还凑合~&lt;/p&gt;

&lt;p&gt;PS:如果不进行2，3的裁剪操作，可以考虑OPENCV的SIFT和SURF特征点的算法，具体怎么判断图片的一致性好像比较困难。&lt;br&gt;
（太复杂，看了1天没看明白）&lt;br&gt;
 论坛内大神有提供PIL和OPENCV FOR PYTHON（JAVA)的使用方法，可以借鉴。&lt;/p&gt;</description>
      <author>yangchengtest</author>
      <pubDate>Tue, 30 Dec 2014 15:47:53 +0800</pubDate>
      <link>http://testerhome.com/topics/1746</link>
      <guid>http://testerhome.com/topics/1746</guid>
    </item>
    <item>
      <title>请问如何访问 listviewinscrollview 这个控件</title>
      <description>&lt;p&gt;大家好！今天遇到一个问题，就是我通过层级查看器发现，有个控件是使用容器嵌套的，就是在ScrollView中嵌套ListView，导致整个控件只有一个id，如下截图，我想要访问它的孙子级textview，由于这个textview的id和前面的层级的id是一样的，而只有listviewinscrollview这一级的id是唯一的，所以想问下怎么去访问这个控件呢，谢谢！&lt;br&gt;
&lt;img src="/photo/2014/e4c512b6341cc398e2194ada476010c9.jpg" alt=""&gt;&lt;/p&gt;</description>
      <author>yunbin_7</author>
      <pubDate>Tue, 30 Dec 2014 15:09:32 +0800</pubDate>
      <link>http://testerhome.com/topics/1745</link>
      <guid>http://testerhome.com/topics/1745</guid>
    </item>
    <item>
      <title>有没有大神在 ROBOTIUM 上做过图片相似度对比的内容？请教一下啊？</title>
      <description>&lt;p&gt;目前项目有3种图片存在：&lt;br&gt;
1.原图，2.缩略图 3.放在服务器端的原图。后两个是在手机上呈现的，主要就是拿原图和这两个图对比。&lt;br&gt;
各个图其实都不太一样，有的缩放过，有的裁剪过。（具体怎么缩放或者裁剪的不知道）&lt;br&gt;
有做过图片相似度对比的同学么？有没有什么通用的方法或者类？&lt;br&gt;
从网上搜了一个“感知哈西算法”，有做过的朋友么？这个靠谱不？&lt;br&gt;
谢谢了！&lt;/p&gt;</description>
      <author>yangchengtest</author>
      <pubDate>Tue, 23 Dec 2014 17:10:24 +0800</pubDate>
      <link>http://testerhome.com/topics/1722</link>
      <guid>http://testerhome.com/topics/1722</guid>
    </item>
    <item>
      <title>使用 robotium 执行测试用例时提示 'java.lang.ClassNotFoundException'</title>
      <description>&lt;p&gt;大家好，我在创建测试工程后，编写一个测试用例，已经导入robotium-solo-5.2.1.jar包，且代码中使用的包名和类名均正确，在执行其中的一个testCase时，提示找不到类的异常，如下所示：&lt;br&gt;
Test run failed: Instrumentation run failed due to 'java.lang.ClassNotFoundException'‘；&lt;br&gt;
我使用了很多网络上的操作，比如确定启动类“LAUNCHER_ACTIVITY_FULL_CLASSNAME”是否正确，导入junit4等，&lt;br&gt;
但是问题还是没有办法得到解决，因为之前在执行一样的代码都是可以正常运行的，不会出现这个提示。&lt;br&gt;
想问一下，是否有对设置场景的遗漏导致的呢？大家有没有遇到类似的错误提示呢？谢谢！&lt;br&gt;
代码如下：&lt;br&gt;
import org.junit.After;&lt;br&gt;
import org.junit.Assert;&lt;br&gt;
import org.junit.Before;&lt;br&gt;
import org.junit.Test;&lt;/p&gt;

&lt;p&gt;import com.robotium.solo.Solo;&lt;br&gt;
import android.test.ActivityInstrumentationTestCase2;&lt;br&gt;
import android.widget.*;&lt;/p&gt;

&lt;p&gt;public class CaiYinLibraryTest extends ActivityInstrumentationTestCase2 {&lt;/p&gt;

&lt;p&gt;private Solo solo;&lt;br&gt;
    private static final String LAUNCHER_ACTIVITY_FULL_CLASSNAME="xxxxx";&lt;br&gt;
    private static String packageName="xxxxxxxx";&lt;br&gt;
    private static Class&amp;lt;?&amp;gt; launcherActivityClass;&lt;br&gt;
    static {&lt;br&gt;
        try {&lt;br&gt;
            launcherActivityClass = Class.forName(LAUNCHER_ACTIVITY_FULL_CLASSNAME);&lt;br&gt;
        } catch (ClassNotFoundException e) {&lt;br&gt;
            throw new RuntimeException(e);&lt;br&gt;
        }&lt;br&gt;
    }&lt;br&gt;
    &lt;a href="/SuppressWarnings" class="at_user" title="@SuppressWarnings"&gt;&lt;i&gt;@&lt;/i&gt;SuppressWarnings&lt;/a&gt;({ "unchecked", "deprecation" })&lt;br&gt;
    public CaiYinLibraryTest() throws ClassNotFoundException{&lt;br&gt;
        super(packageName,Class.forName(LAUNCHER_ACTIVITY_FULL_CLASSNAME));&lt;br&gt;
    }&lt;br&gt;
    &lt;a href="/Override" class="at_user" title="@Override"&gt;&lt;i&gt;@&lt;/i&gt;Override&lt;/a&gt;&lt;br&gt;
    &lt;a href="/Before" class="at_user" title="@Before"&gt;&lt;i&gt;@&lt;/i&gt;Before&lt;/a&gt;&lt;br&gt;
    public void setUp() throws Exception {&lt;br&gt;
        solo=new Solo(getInstrumentation());&lt;br&gt;
        getActivity();&lt;br&gt;
    }&lt;/p&gt;

&lt;p&gt;&lt;a href="/Override" class="at_user" title="@Override"&gt;&lt;i&gt;@&lt;/i&gt;Override&lt;/a&gt;&lt;br&gt;
    &lt;a href="/After" class="at_user" title="@After"&gt;&lt;i&gt;@&lt;/i&gt;After&lt;/a&gt;&lt;br&gt;
    public void tearDown() throws Exception {&lt;br&gt;
        try {&lt;br&gt;
            solo.finishOpenedActivities();// 解决执行多个用例时出现卡住的问题&lt;br&gt;
        } catch (Throwable e) {&lt;br&gt;
            e.printStackTrace();&lt;br&gt;
        }&lt;br&gt;
        getActivity().finish();&lt;br&gt;
        super.tearDown();&lt;br&gt;
    }&lt;/p&gt;

&lt;p&gt;&lt;a href="/Test" class="at_user" title="@Test"&gt;&lt;i&gt;@&lt;/i&gt;Test&lt;/a&gt;&lt;br&gt;
    public void testDetail() {&lt;br&gt;
        solo.sleep(2000);&lt;br&gt;
        solo.getCurrentActivity();&lt;/p&gt;

&lt;p&gt;RelativeLayout parentView = (RelativeLayout)solo.getView("pic_lick_num_id").getParent();&lt;br&gt;
    LinearLayout linearlayout=(LinearLayout)parentView.findViewById(1);&lt;br&gt;
    linearlayout.getChildAt(0);&lt;br&gt;
    solo.clickOnView(solo.getView("gallery_flower_btn"));&lt;/p&gt;

&lt;p&gt;}&lt;br&gt;
}&lt;/p&gt;</description>
      <author>yunbin_7</author>
      <pubDate>Mon, 22 Dec 2014 11:39:47 +0800</pubDate>
      <link>http://testerhome.com/topics/1715</link>
      <guid>http://testerhome.com/topics/1715</guid>
    </item>
    <item>
      <title>求教，ROBOTIUM 下的 GETWEBELEMENTS 方法的使用~多谢！</title>
      <description>&lt;p&gt;我原来用PYTHON FOR APPIUM，使用：&lt;br&gt;
   el = self.driver.find_elements_by_id("com.zte.homenas:id/subtitle")&lt;br&gt;
            print (len(el))&lt;br&gt;
            check=0&lt;br&gt;
            for i in range(len(el))&lt;br&gt;
获取一个LISTVIEW的元素个数。一直都没问题。&lt;br&gt;
现在换ROBOTIUM架构了。&lt;br&gt;
int devnum=solo.getWebElements(By.id("com.zte.homenas:id/subtitle")).size();&lt;br&gt;
        Log.v("mainActivity","设备个数："+String.valueOf(devnum));&lt;br&gt;
查看LOG，获取到的元素个数一直是0。&lt;br&gt;
能不能请大侠们帮忙看看？哪里有问题？或者还有其他简单的方法？&lt;br&gt;
多谢！~&lt;/p&gt;</description>
      <author>yangchengtest</author>
      <pubDate>Mon, 22 Dec 2014 11:08:56 +0800</pubDate>
      <link>http://testerhome.com/topics/1714</link>
      <guid>http://testerhome.com/topics/1714</guid>
    </item>
    <item>
      <title>robotium 怎么获取多层布局嵌套下的控件呢？</title>
      <description>&lt;p&gt;大家好，请教一下，有些app的布局嵌套非常多层级，我要如何才能获取到最里面的控件，然后使用它的点击事件呢？有没有比较好的方法呢？&lt;img src="/photo/2014/768961482a4e57dd594c155bf230b318.png" alt=""&gt;&lt;/p&gt;</description>
      <author>yunbin_7</author>
      <pubDate>Wed, 17 Dec 2014 20:15:55 +0800</pubDate>
      <link>http://testerhome.com/topics/1705</link>
      <guid>http://testerhome.com/topics/1705</guid>
    </item>
    <item>
      <title>Robotium 专题（五）：Robotium 升级到 5.1 后的一些改进</title>
      <description>&lt;p&gt;最近事情有点多，不过觉得都是在瞎忙，昨天才抽空研究了下Robotium5.1，其实现在Robotium已经更新到了5.2.1，只是还没去细看，这里就先简单说下5.1更新的一些内容吧，知道的就当是复习下，不知道的就了解下吧，后续会再把5.2.1的更新内容写出来的！&lt;/p&gt;

&lt;p&gt;新增类：&lt;br&gt;
com.robotium.solo.Solo.Config: 静态类，用于对Robotium做一些初始化设置，包括默认超时时间、截图文件类型和保存路径、是否滚屏等。示例用法如下：&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Config&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;screenshotFileType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ScreenshotFileType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;PNG&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 截图类型&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;screenshotSavePath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Environment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getExternalStorageDirectory&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"/Robotium/"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 截图路径&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;shouldScroll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//是否滚屏&lt;/span&gt;
    &lt;span class="n"&gt;solo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Solo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getInstrumentation&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 新的构造方法&lt;/span&gt;
    &lt;span class="n"&gt;getActivity&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;新增方法：&lt;br&gt;
新增Solo构造函数 - 和Config有关的构造函数&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;span class="n"&gt;getConfig&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;// 返回Robotium的Config类&lt;/span&gt;

&lt;span class="n"&gt;getWebElements&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 返回当前WebView中所有展现的Web元素&lt;/span&gt;

&lt;span class="n"&gt;getWebElements&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 返回当前WebView中所有展现的符合条件（By）的Web元素&lt;/span&gt;

&lt;span class="n"&gt;pressSoftKeyboardNextButton&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 点击软键盘的下一步按钮&lt;/span&gt;

&lt;span class="n"&gt;pressSoftKeyboardSearchButton&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 点击软键盘的搜索按钮&lt;/span&gt;

&lt;span class="n"&gt;waitForEmptyActivityStack&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 等待直到Activity栈为空&lt;/span&gt;

&lt;span class="n"&gt;setNavigationDrawer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 设置NavigationDrawer的状态&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;改进点：&lt;br&gt;
改进所有可点击的方法 - 改进了一些异常情况下的行为&lt;br&gt;
改进了waitForDialogToOpen和waitForDialogToClose方法 - 现在可以识别所有的对话框了&lt;br&gt;
改进内部视图处理类 &lt;br&gt;
改进TakeScreenshot方法 - 支持GLSurfaceViews（OpenGL ES 3.0） &lt;/p&gt;

&lt;p&gt;前几天用Robotium5.2.1写个Case，发现以前用的import方法怎么都会报错，&lt;br&gt;
后来看了下Robotium官方的代码，做了下修改，这里也简单说一下：&lt;br&gt;
老方法：import com.jayway.android.robotium.solo.Solo;&lt;br&gt;
新方法：import com.robotium.solo.Solo;&lt;br&gt;
也有可能以前一直都是用的import com.robotium.solo.Solo; 只是我在参考网上例子的时候一直都写的是import com.jayway.android.robotium.solo.Solo；在这里做个标记，防止以后再搞错！&lt;br&gt;
大家多向&lt;a href="/monkey" class="at_user" title="@monkey"&gt;&lt;i&gt;@&lt;/i&gt;monkey&lt;/a&gt;学习，不断自我改进，加油！&lt;/p&gt;</description>
      <author>bill</author>
      <pubDate>Tue, 16 Dec 2014 15:53:29 +0800</pubDate>
      <link>http://testerhome.com/topics/1701</link>
      <guid>http://testerhome.com/topics/1701</guid>
    </item>
    <item>
      <title>Robotium 专题（四）： Robotium 中部分常用的方法集锦</title>
      <description>&lt;p&gt;这几天一直在忙着产品上线，没有做更新，最近用robotium的地方也不是太多，只是在回归某个应用的时候会写一些Case，对于新的robotium.jar，还没来得急研究，里面多了几个软键盘操作的方法，明天抽空研究下。&lt;br&gt;
今天就把平时用的较多的方法做个笔记，方便以后使用。&lt;/p&gt;

&lt;p&gt;①  点击：&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;span class="n"&gt;clickOnButton&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//Clicks on a Button with a given index.&lt;/span&gt;
&lt;span class="n"&gt;clickOnButton&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//Clicks on a Button with a given text.&lt;/span&gt;
&lt;span class="n"&gt;clickOnCheckBox&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//Clicks on a CheckBox with a given index.&lt;/span&gt;
&lt;span class="n"&gt;clickOnView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//Clicks on a given View.&lt;/span&gt;
&lt;span class="n"&gt;clickOnText&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//Clicks on a View displaying a given text.&lt;/span&gt;
&lt;span class="n"&gt;clickLongOnText&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//Long clicks on a given View.&lt;/span&gt;
&lt;span class="n"&gt;clickOnRadioButton&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//Clicks on a RadioButton with a given index.&lt;/span&gt;
&lt;span class="n"&gt;clickOnScreen&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//Clicks on a given coordinate on the screen.&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;②  取得：&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;span class="n"&gt;getCurrentActivity&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;//Returns the current Activity.&lt;/span&gt;
&lt;span class="n"&gt;getText&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//Returns a TextView which shows a given text.&lt;/span&gt;
&lt;span class="n"&gt;getView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//Returns a View with a given id.&lt;/span&gt;
&lt;span class="n"&gt;getEditText&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//Returns an EditText which shows a given text.  &lt;/span&gt;
&lt;span class="n"&gt;getImage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//Returns an ImageView with a given index.&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;③  拖拽：&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;span class="n"&gt;drag&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//Simulate touching a given location and dragging it to a new location.&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;④  搜索：&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;span class="n"&gt;searchText&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//Searches for a text string and returns true if at least one item is found with the expected text.&lt;/span&gt;
&lt;span class="n"&gt;searchEditText&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//Searches for a text string in the EditText objects located in the current Activity.&lt;/span&gt;
&lt;span class="n"&gt;searchButton&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//Searches for a Button with the given text string and returns true if at least one Button is found.&lt;/span&gt;
&lt;/pre&gt;




&lt;pre class="highlight java"&gt;&lt;span class="n"&gt;clickOnMenuItem&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;功能是点击Menu按钮，选择文本描述为String的菜单，如我们的例子是"Add note"&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;span class="n"&gt;assertCurrentActivity&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;这个是判断当前的activity是否和我预期的一致&lt;br&gt;
message是描述性的文字&lt;br&gt;
name是指activity的名字&lt;br&gt;
关于如何知道activity 名字，目前的方法是得看源码中的 AndroidManifest.xml--Application label--Application Nodes，在那里我们可以看到所有的activity的name&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;span class="n"&gt;enterText&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;index用来标识写到哪个EditText中。如果当前只打开一个EditText，那index=0&lt;br&gt;
text：就是我们要写入的内容&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;span class="n"&gt;goBack&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;相当于手机上的 返回键（back key)&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;span class="n"&gt;goBackToActivity&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;返回到指定的activity&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;span class="n"&gt;searchText&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;在当前的activity中搜索是否含有text的内容&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;span class="n"&gt;clickInList&lt;/span&gt;&lt;span class="err"&gt;（&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;点击list表的第index行，进入该文本界面&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;span class="n"&gt;solo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setActivityOrientation&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Solo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LANDSCAPE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;setActivityOrientation，设置手机屏幕显示方式&lt;br&gt;
LANDSCAPE：横向显示&lt;br&gt;
Portrait：竖向显示&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;span class="n"&gt;clickOnText&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;点击包含该文字的地方&lt;br&gt;
其中text可以用正则表达式表示&lt;br&gt;
(?i)----忽略大小写。默认情况是大小写敏感的。&lt;br&gt;
正则表达式与java保持一致&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;span class="n"&gt;clickLongOnText&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;长时间按住所选的文字&lt;/p&gt;

&lt;p&gt;这里需要注意：被测apk和测试apk必须使用相同的签名。&lt;/p&gt;</description>
      <author>bill</author>
      <pubDate>Wed, 10 Dec 2014 15:10:06 +0800</pubDate>
      <link>http://testerhome.com/topics/1677</link>
      <guid>http://testerhome.com/topics/1677</guid>
    </item>
    <item>
      <title>关于 ListView 的滑动点击</title>
      <description>&lt;p&gt;关于ListView的点击有很多版本，在这里也跟大家分享一下我的这个版本&lt;br&gt;
嘿嘿&lt;br&gt;
欢迎大家指正&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;span class="cm"&gt;/**
*我的需求是找列表中符合某种条件的Item
*可以点进去查看 
*思路：滑动一个，判断一个，也就是说，每次点击的都是当前屏幕的第一个
*/&lt;/span&gt; 
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;findItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;solo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sleep&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_1S&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;//获取listView 随便怎么获取&lt;/span&gt;
        &lt;span class="n"&gt;ListView&lt;/span&gt; &lt;span class="n"&gt;listView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;solo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ListView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCount&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"列表为空"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;clickLine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;oneScreenCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;listView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getChildCount&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;listView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCount&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"列表点击第"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"个"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;solo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;clickInList&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clickLine&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;conditions&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"列表符合条件的是第"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"个"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="c1"&gt;//break;&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;oneScreenCount&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;oneScreenCount&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;//滑动到了列表的最后一屏&lt;/span&gt;
                &lt;span class="n"&gt;clickLine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clickLine&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;clickLine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"当前没有符合条件的东西"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;solo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;goBack&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;solo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;scrollListToLine&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;//如果return换成break  此时点击clickLine就是你想要的了&lt;/span&gt;
        &lt;span class="c1"&gt;//solo.clickInList(clickLine);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;</description>
      <author>uncle_mm</author>
      <pubDate>Tue, 09 Dec 2014 15:55:15 +0800</pubDate>
      <link>http://testerhome.com/topics/1675</link>
      <guid>http://testerhome.com/topics/1675</guid>
    </item>
    <item>
      <title>Robotium 自动化测试 - 手工用例 和 自动化用例的关系?</title>
      <description>&lt;p&gt;现在真心纠结的问题，希望和大家一起讨论.&lt;/p&gt;

&lt;p&gt;测试新人，也没有什么经验，领导给安排做自动化，说实话，自动化这个概念已经不新了，而且基本上好多公司也在做。而且也已经成型了。 我在一家创业公司，搞这个的就我自己，因为之前也没有什么经验，所以都是在自己慢慢摸索。&lt;/p&gt;

&lt;p&gt;就目前情况来看，自动化的实施还是存在相当多的难点的，其中也包括许多细节的处理。&lt;/p&gt;

&lt;p&gt;针对自动化用例这个问题，我一开始是脱离手工用例的，按照自己的对业务的理解来写自动化case，但是发现这样的话，对手工测试来说，自动化没有给他们带来所谓的解放.. 因为自动化对照手工用例来讲，覆盖的是少之又少....&lt;/p&gt;

&lt;p&gt;领导不乐意了...我也觉得这样做的话  意义不大。&lt;/p&gt;

&lt;p&gt;接着，对照手工用例来写自动化用例。哇...手工用例真心好细啊，覆盖起来也是成本很高。&lt;/p&gt;

&lt;p&gt;所以就引发了这样的思考...&lt;/p&gt;

&lt;p&gt;Robotium自动化测试 - 手工用例 和 自动化用例的关系?&lt;br&gt;
     觉的这个问题很矛盾 如果完全按照手工来，自动化成本有点太高了。 如果不按手工来，又不能帮助手工减少负担... 究竟如何达到一个平衡点呢?又要怎么去实施呢?&lt;/p&gt;

&lt;p&gt;第一次发帖~&lt;br&gt;
     欢迎大家给出意见~&lt;br&gt;
谢谢前辈们！ &lt;/p&gt;</description>
      <author>uncle_mm</author>
      <pubDate>Tue, 09 Dec 2014 10:16:23 +0800</pubDate>
      <link>http://testerhome.com/topics/1670</link>
      <guid>http://testerhome.com/topics/1670</guid>
    </item>
  </channel>
</rss>
