<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>TesterHome社区</title>
    <link>http://testerhome.com/</link>
    <description>TesterHome社区最新发帖.</description>
    <language>en-us</language>
    <item>
      <title>你应该学会使用的 5 个 ruby 方法</title>
      <description>&lt;p&gt;今天看到了这篇文章--&lt;a href="https://blog.engineyard.com/2015/five-ruby-methods-you-should-be-using" target="_blank"&gt;Five Ruby Methods You Should Be Using&lt;/a&gt;,感觉收获颇丰，先简单翻译一下先。&lt;/p&gt;

&lt;p&gt;作者写这篇文章的契机是在&lt;a href="http://exercism.io/" target="_blank"&gt;Exercism&lt;/a&gt;上看到了很多ruby代码可以用更好的方式去重构，因此他分享了一些冷门的但是非常有用的ruby方法。&lt;/p&gt;
&lt;h4&gt;Object#tap&lt;/h4&gt;
&lt;p&gt;你是否曾发现在某个对象上调用方法时返回值不是你所预期？你想返回这个对象，但是返回的时候又想对这个对象进行一些修改。比方说，你想给hash对象增加1个key value，这时候你需要调用Hash.[]方法，但是你想返回的是整个hash对象，而不是具体的某个value值，因此你需要显示的返回该对象。&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update_params&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:foo&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'bar'&lt;/span&gt;
  &lt;span class="n"&gt;params&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;最后一行的那个params显得有些多余了。&lt;/p&gt;

&lt;p&gt;我们可以用&lt;code&gt;Object#tap&lt;/code&gt;方法来优化这个方案。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.ruby-doc.org/core-2.1.5/Object.html#method-i-tap" target="_blank"&gt;tap&lt;/a&gt;方法用起来非常简单,直接在某个对象上调用tap方法，然后就可以在代码块里yielded这个对象，最后这个对象本身会被返回。下面的代码演示了如何使用tap方法来重构刚才的实现。&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update_params&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;tap&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:foo&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'bar'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;有很多地方都可以使用到&lt;code&gt;Object#tap&lt;/code&gt;方法，一般的规律是对那些在对象上调用，希望返回对象，但是却没返回该对象本身的方法都适用。&lt;/p&gt;
&lt;h4&gt;Array#bsearch&lt;/h4&gt;
&lt;p&gt;我不清楚你的情况，但我经常在数组里去查找数据。ruby的enumerable模块提供了很多简单好用的方法&lt;code&gt;select, reject, find&lt;/code&gt;。不过当数据源很庞大的时候，我开始对这些查找的性能表示忧桑。&lt;/p&gt;

&lt;p&gt;如果你正在使用ActiveRecord和非NO SQL的数据库，查询的算法复杂度是经过优化了的。但是有时候你需要从数据库里把所有的数据拉出来进行处理，比方说如果你加密了数据库，那就不能好好的写sql做查询了。&lt;/p&gt;

&lt;p&gt;这时候我会冥思苦想以找到一个最小的算法复杂度来筛选数据。如果你不了解算法复杂度，也就是这个O，请阅读&lt;a href="https://justin.abrah.ms/computer-science/big-o-notation-explained.html" target="_blank"&gt; Big-O Notation Explained By A Self-Taught Programmer&lt;/a&gt;或［Big-O Complexity Cheat Sheet](&lt;a href="http://bigocheatsheet.com/" rel="nofollow" target="_blank"&gt;http://bigocheatsheet.com/&lt;/a&gt;)。&lt;/p&gt;

&lt;p&gt;一般来说，算法复杂度越低，程序运行的速度就越快。&lt;code&gt;O(1), O(log n), O(n), O(n log(n)), O(n^2), O(2^n), O(n!)&lt;/code&gt;，在这个例子里，越往右算法复杂度是越高的。所以我们要让我们的算法接近左边的复杂度。&lt;/p&gt;

&lt;p&gt;当我们搜索数组的时候，一般第一个想到的方法便是&lt;code&gt;Enumerable#find&lt;/code&gt;,也就是select方法。不过这个方法会搜索整个数组直到找到预期的结果。如果要找的元素在数组的开始部分，那么搜索的效率倒不会太低，但如果是在数据的末尾，那么搜索时间将是很可观的。find方法的算法复杂度是O(n)。&lt;/p&gt;

&lt;p&gt;更好的办法是使用(Array#bsearch)[&lt;a href="http://www.ruby-doc.org/core-2.1.5/Array.html#method-i-bsearchO(log" rel="nofollow" target="_blank"&gt;http://www.ruby-doc.org/core-2.1.5/Array.html#method-i-bsearchO(log&lt;/a&gt;]方法。该方法的算法复杂度是 n)。你可以查看&lt;a href="http://fluxusfrequency.github.io/blog/2014/01/31/building-a-binary-search/" target="_blank"&gt;Building A Binary Search&lt;/a&gt;这篇文章来该算法的原理。&lt;/p&gt;

&lt;p&gt;下面的代码显示了搜索50000000个数字时不同算法之间的性能差异。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;require 'benchmark'

data = (0..50_000_000)

Benchmark.bm do |x|
  x.report(:find) { data.find {|number| number &amp;gt; 40_000_000 } }
  x.report(:bsearch) { data.bsearch {|number| number &amp;gt; 40_000_000 } }
end

         user       system     total       real
find     3.020000   0.010000   3.030000   (3.028417)
bsearch  0.000000   0.000000   0.000000   (0.000006)
&lt;/pre&gt;

&lt;p&gt;如你所见，&lt;code&gt;bsearch&lt;/code&gt;要快的多。不过要注意的是bsearch要求搜索的数组是排序过的。尽管这个限制bsearch的使用场景，bsearch在显示生活中确实是有用武之地的。比如通过&lt;code&gt;created_at&lt;/code&gt;字段来查找从数据库中取出的数据。&lt;/p&gt;
&lt;h4&gt;Enumerable#flat_map&lt;/h4&gt;
&lt;p&gt;考虑这种情况，你有个blog应用，你希望找到上个月有过评论的所有作者，你可以会这样做：&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;CommentFinder&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_for_users&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_ids&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;user_ids&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;comments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;username&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;得到的结果看起来会是这样的&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="o"&gt;[[[&lt;/span&gt;&lt;span class="s1"&gt;'Ben'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Sam'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'David'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Keith'&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;[[]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="s1"&gt;'Chris'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;[]]]&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;不过你想得到的是所有作者，这时候你大概会使用&lt;code&gt;flatten&lt;/code&gt;方法。&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;CommentFinder&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_for_users&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_ids&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;user_ids&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;comments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;username&lt;/span&gt;
      &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;flatten&lt;/span&gt;
    &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;flatten&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;另一个选择是使用&lt;code&gt;flat_map&lt;/code&gt;方法。&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;CommentFinder&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_for_users&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_ids&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;user_ids&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;flat_map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;comments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;flat_map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;username&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;这跟使用flatten方法没什么太大的不同，不过看起来会优雅一点，毕竟不需要反复调用flatten了。&lt;/p&gt;
&lt;h4&gt;Array.new with a Block&lt;/h4&gt;
&lt;p&gt;想当年我在一个技术训练营，我们的导师Jeff Casimir同志(&lt;a href="http://turing.io/" target="_blank"&gt;Turing School&lt;/a&gt;的创始人)让我们在一小时内写个Battleship游戏。这是极好的进行面向对象编程的练习，我们需要Rules，Players, Games和Boards类。&lt;/p&gt;

&lt;p&gt;创建代表Board的数据结构是一件非常有意思的事情。经过几次迭代我发现下面的方法是初始化8x8格子的最好方式：&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Board&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;board&lt;/span&gt;
    &lt;span class="vi"&gt;@board&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s1"&gt;'0'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;上面的代码是什么意思？当我们调用&lt;code&gt;Array.new&lt;/code&gt;并传入了参数length，1个长度为length的数组将会被创建。&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#=&amp;gt; [nil, nil, nil, nil, nil, nil, nil, nil]&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;当你传入一个block，这时候block的返回值会被当成是数组的每个元素。&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s1"&gt;'O'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;#=&amp;gt; ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;因此，当你向block传入1个具有8个元素的数组时，你会得到8x8个元素的嵌套数组了。&lt;/p&gt;

&lt;p&gt;用Array#new加block的方式可以创建很多有趣和任意嵌套层级的数组。&lt;/p&gt;
&lt;h4&gt;&amp;lt;=&amp;gt;&lt;/h4&gt;
&lt;p&gt;这个方法就很常见了。简单来说这方法是判断左值和右值的关系的。如果左值大于右值返回1，相等返回0，否则返回－1。&lt;/p&gt;

&lt;p&gt;实际上&lt;code&gt;Enumerable#sort, Enumerable#max&lt;/code&gt;方法都是基于&amp;lt;=&amp;gt;的。另外如果你定义了&amp;lt;=&amp;gt;，然后再include Comparable，你将免费得到&amp;lt;=, &amp;lt;, &amp;gt;=, &amp;gt;以及between方法。&lt;/p&gt;

&lt;p&gt;这是作者的在现实生活中所用到的例子：&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fix_minutes&lt;/span&gt;
  &lt;span class="k"&gt;until&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;member?&lt;/span&gt; &lt;span class="n"&gt;minutes&lt;/span&gt;
    &lt;span class="vi"&gt;@hours&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;minutes&lt;/span&gt;
    &lt;span class="vi"&gt;@minutes&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;minutes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="vi"&gt;@hours&lt;/span&gt; &lt;span class="sx"&gt;%= 24
  self
end

&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;这个方法不是很好理解，大概的意思就是如果minutes超过60的话，小时数+1,等于60小时数不变，否则－1。&lt;/p&gt;
&lt;h4&gt;讨论&lt;/h4&gt;
&lt;p&gt;会的方法越多写出来的代码可能会更有表现力，边写代码边改进,另外多读rubydoc。&lt;/p&gt;</description>
      <author>easonhan007</author>
      <pubDate>Mon, 19 Jan 2015 10:40:32 +0800</pubDate>
      <link>http://testerhome.com/topics/1896</link>
      <guid>http://testerhome.com/topics/1896</guid>
    </item>
    <item>
      <title>Android CTS 合集</title>
      <description>&lt;p&gt;感谢&lt;a href="/doctorq" class="at_user" title="@doctorq"&gt;&lt;i&gt;@&lt;/i&gt;doctorq&lt;/a&gt;给我们贡献了cts的分享。我常常想论坛里有那么多好的帖子，有入门的，有进阶的，但是还是每天很多人来问重复同样的问题。有的时候会觉得我们这些默默贡献文章的同学挺无奈的。这些CTS的文章都是非常好的。很多天了，也没多少人来看，也没多少评论。希望&lt;a href="/doctorq" class="at_user" title="@doctorq"&gt;&lt;i&gt;@&lt;/i&gt;doctorq&lt;/a&gt;不要伤心。我们支持你。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://testerhome.com/topics/1808" target="_blank"&gt;CTS 框架解析&lt;/a&gt;&lt;br&gt;
&lt;a href="http://testerhome.com/topics/1858" target="_blank"&gt;CTS 设备管理之自动检测设备&lt;/a&gt;&lt;br&gt;
&lt;a href="http://testerhome.com/topics/1863" target="_blank"&gt;CTS 设备管理之设备分类&lt;/a&gt;&lt;br&gt;
&lt;a href="http://testerhome.com/topics/1881" target="_blank"&gt;CTS 框架解析之 case 的组织&lt;/a&gt;&lt;br&gt;
&lt;a href="http://testerhome.com/topics/1890" target="_blank"&gt;CTS 框架解析之 case 执行结果处理模块&lt;/a&gt;&lt;/p&gt;</description>
      <author>lihuazhang</author>
      <pubDate>Sun, 18 Jan 2015 09:13:55 +0800</pubDate>
      <link>http://testerhome.com/topics/1891</link>
      <guid>http://testerhome.com/topics/1891</guid>
    </item>
    <item>
      <title>CTS 框架解析之 case 执行结果处理模块</title>
      <description>&lt;h4&gt;UML&lt;/h4&gt;
&lt;p&gt;&lt;img src="/photo/2015/c42f8a2d1dc72efc81520aae0055621f.png" alt=""&gt;&lt;/p&gt;
&lt;h4&gt;解释&lt;/h4&gt;
&lt;p&gt;cts框架中将case的执行和case结果的收集分成了独立的2个部分，我们称case的结果收集叫测试结果收集模块。设计的思路来源为ddmlib中的ITestRunListener接口，该接口是一个抽象的观察者组件，cts创建有很多具体的组件。但是这些组件不是一个一个去注册成为监听者的，而是通过run方法传递给ddmlib中RemoteAndroidTestRunner类的。所以只要我们继承了该接口，在run的时候把该接口的实例对象传过去，我们就能在对象实例的相应方法中接受信息。但是我们想要在多个地方都能接受到测试结果呢？没关系，cts为我们准备了ResultForwarder类。看具体实现细节：&lt;/p&gt;
&lt;h4&gt;ResultForwarder&lt;/h4&gt;&lt;pre class="highlight java"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ResultForwarder&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;ITestInvocationListener&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ITestInvocationListener&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mListeners&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Create a {@link ResultForwarder} with deferred listener setting. Intended
     * only for use by subclasses.
     */&lt;/span&gt;
    &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="n"&gt;ResultForwarder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;mListeners&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;emptyList&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Create a {@link ResultForwarder}.
     * 
     * @param listeners
     *            the real {@link ITestInvocationListener}s to forward results
     *            to
     */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ResultForwarder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ITestInvocationListener&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;listeners&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;mListeners&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;listeners&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Alternate variable arg constructor for {@link ResultForwarder}.
     * 
     * @param listeners
     *            the real {@link ITestInvocationListener}s to forward results
     *            to
     */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ResultForwarder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ITestInvocationListener&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;listeners&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;mListeners&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;asList&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listeners&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Set the listeners after construction. Intended only for use by
     * subclasses.
     * 
     * @param listeners
     *            the real {@link ITestInvocationListener}s to forward results
     *            to
     */&lt;/span&gt;
    &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;setListeners&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ITestInvocationListener&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;listeners&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;mListeners&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;listeners&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Set the listeners after construction. Intended only for use by
     * subclasses.
     * 
     * @param listeners
     *            the real {@link ITestInvocationListener}s to forward results
     *            to
     */&lt;/span&gt;
    &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;setListeners&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ITestInvocationListener&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;listeners&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;mListeners&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;asList&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listeners&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * {@inheritDoc}
     */&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;invocationStarted&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IBuildInfo&lt;/span&gt; &lt;span class="n"&gt;buildInfo&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ITestInvocationListener&lt;/span&gt; &lt;span class="n"&gt;listener&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mListeners&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;invocationStarted&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buildInfo&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * {@inheritDoc}
     */&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;invocationFailed&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Throwable&lt;/span&gt; &lt;span class="n"&gt;cause&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ITestInvocationListener&lt;/span&gt; &lt;span class="n"&gt;listener&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mListeners&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;invocationFailed&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cause&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * {@inheritDoc}
     */&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;invocationEnded&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;elapsedTime&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;InvocationSummaryHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;reportInvocationEnded&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mListeners&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;elapsedTime&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * {@inheritDoc}
     */&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;TestSummary&lt;/span&gt; &lt;span class="n"&gt;getSummary&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// should never be called&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * {@inheritDoc}
     */&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;testLog&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;dataName&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LogDataType&lt;/span&gt; &lt;span class="n"&gt;dataType&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;InputStreamSource&lt;/span&gt; &lt;span class="n"&gt;dataStream&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;//      CLog.logAndDisplay(LogLevel.INFO,&lt;/span&gt;
&lt;span class="c1"&gt;//              String.format("[testLog] dataName: %s", dataName));&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ITestInvocationListener&lt;/span&gt; &lt;span class="n"&gt;listener&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mListeners&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;testLog&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataName&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dataType&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dataStream&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * {@inheritDoc}case开始时显式的调用
     */&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;testRunStarted&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;runName&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;testCount&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;//      CLog.logAndDisplay(LogLevel.INFO, String&lt;/span&gt;
&lt;span class="c1"&gt;//              .format("[testRunStarted] runName: %s testCount:%d", runName,&lt;/span&gt;
&lt;span class="c1"&gt;//                      testCount));&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ITestInvocationListener&lt;/span&gt; &lt;span class="n"&gt;listener&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mListeners&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;testRunStarted&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;runName&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;testCount&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * {@inheritDoc}
     */&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;testRunFailed&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;errorMessage&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;//      CLog.logAndDisplay(LogLevel.INFO,&lt;/span&gt;
&lt;span class="c1"&gt;//              String.format("[testRunFailed] errorMessage: %s", errorMessage));&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ITestInvocationListener&lt;/span&gt; &lt;span class="n"&gt;listener&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mListeners&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;testRunFailed&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errorMessage&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * {@inheritDoc}
     */&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;testRunStopped&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;elapsedTime&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;//      CLog.logAndDisplay(LogLevel.INFO,&lt;/span&gt;
&lt;span class="c1"&gt;//              String.format("[testRunStopped] elapsedTime: %d", elapsedTime));&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ITestInvocationListener&lt;/span&gt; &lt;span class="n"&gt;listener&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mListeners&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;testRunStopped&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elapsedTime&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * {@inheritDoc}
     */&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;testRunEnded&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;elapsedTime&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;runMetrics&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;//      CLog.logAndDisplay(LogLevel.INFO,&lt;/span&gt;
&lt;span class="c1"&gt;//              String.format("[testRunEnded] elapsedTime: %d", elapsedTime));&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ITestInvocationListener&lt;/span&gt; &lt;span class="n"&gt;listener&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mListeners&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;testRunEnded&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elapsedTime&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;runMetrics&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * {@inheritDoc}
     */&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;testStarted&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestIdentifier&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;//      CLog.logAndDisplay(LogLevel.INFO,&lt;/span&gt;
&lt;span class="c1"&gt;//              String.format("[testStarted] %s", test.toString()));&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ITestInvocationListener&lt;/span&gt; &lt;span class="n"&gt;listener&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mListeners&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;testStarted&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * {@inheritDoc}
     */&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;testFailed&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestFailure&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TestIdentifier&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;//      CLog.logAndDisplay(LogLevel.INFO,&lt;/span&gt;
&lt;span class="c1"&gt;//              String.format("[testFailed] %s", test.toString()));&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ITestInvocationListener&lt;/span&gt; &lt;span class="n"&gt;listener&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mListeners&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;testFailed&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * {@inheritDoc}
     */&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;testEnded&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestIdentifier&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;testMetrics&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;//      CLog.logAndDisplay(LogLevel.INFO,&lt;/span&gt;
&lt;span class="c1"&gt;//              String.format("[testEnded] %s", test.toString()));&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ITestInvocationListener&lt;/span&gt; &lt;span class="n"&gt;listener&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mListeners&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;testEnded&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;testMetrics&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/pre&gt;

&lt;p&gt;该类中继承于&lt;code&gt;ITestInvocationListener&lt;/code&gt;接口，&lt;code&gt;ITestInvocationListener&lt;/code&gt;也继承与&lt;code&gt;ITestRunListener&lt;/code&gt;接口，然后在&lt;code&gt;ITestRunListener&lt;/code&gt;接口接触上添加了一些cts自定义的方法。&lt;/p&gt;

&lt;p&gt;而我们具体看看&lt;code&gt;ResultForwarder&lt;/code&gt;构造方法你会发现，传递的参数是多个&lt;code&gt;ITestInvocationListener&lt;/code&gt;对象，传递到&lt;code&gt;ResultForwarder&lt;/code&gt;后保存到&lt;code&gt;List&amp;lt;ITestInvocationListener&amp;gt;&lt;/code&gt;集合中。这样当我们&lt;code&gt;ResultForwarder&lt;/code&gt;传递到&lt;code&gt;ddmlib&lt;/code&gt;内部的时候，&lt;code&gt;ResultForwarder&lt;/code&gt;相应方法被调用后，集合里的每一个&lt;code&gt;ITestInvocationListener&lt;/code&gt;对象都会收到结果。良好的设计啊！&lt;/p&gt;
&lt;h4&gt;ResultForwarder子类&lt;/h4&gt;
&lt;p&gt;当case执行失败的时候，cts为我们准备了3个处理类，这三个类都是继承与&lt;code&gt;ResultForwarder&lt;/code&gt;，因此它们都是case执行结果的监听器，case失败的时候会自动的进行相关的动作。&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;span class="cm"&gt;/**
     * 保存bugreport日志 A {@link ResultForwarder} that will forward a bugreport on
     * each failed test.
     */&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FailedTestBugreportGenerator&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;ResultForwarder&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;ITestDevice&lt;/span&gt; &lt;span class="n"&gt;mDevice&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;FailedTestBugreportGenerator&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ITestInvocationListener&lt;/span&gt; &lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ITestDevice&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;mDevice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// 当ddmlib中ITestRunListener监听器触发testFailed方法时,该方法被调用.ITestRunListener的方法是由ddmlib内部调用的&lt;/span&gt;
        &lt;span class="c1"&gt;// 该方法将在android-cts\repository\logs生成bugreport信息的文本文件并打包&lt;/span&gt;
        &lt;span class="nd"&gt;@Override&lt;/span&gt;
        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;testFailed&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestFailure&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TestIdentifier&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;testFailed&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;InputStreamSource&lt;/span&gt; &lt;span class="n"&gt;bugSource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mDevice&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getBugreport&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="c1"&gt;// System.out.println("CtsTest.FailedTestBugreportGenerator.testFailed: 执行case失败,需要保存当前bugreport的信息");&lt;/span&gt;
            &lt;span class="c1"&gt;// CLog.logAndDisplay(LogLevel.INFO,&lt;/span&gt;
            &lt;span class="c1"&gt;// String.format("[testFailed] %s", test.toString()));&lt;/span&gt;
            &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;testLog&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"bug-%s_%s"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getClassName&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getTestName&lt;/span&gt;&lt;span class="o"&gt;()),&lt;/span&gt; &lt;span class="n"&gt;LogDataType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;TEXT&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bugSource&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;bugSource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cancel&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * 保存system缓冲区的日志 A {@link ResultForwarder} that will forward a logcat
     * snapshot on each failed test.
     */&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FailedTestLogcatGenerator&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;ResultForwarder&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;ITestDevice&lt;/span&gt; &lt;span class="n"&gt;mDevice&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;mNumLogcatBytes&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;FailedTestLogcatGenerator&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ITestInvocationListener&lt;/span&gt; &lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ITestDevice&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;maxLogcatBytes&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;mDevice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;mNumLogcatBytes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;maxLogcatBytes&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="nd"&gt;@Override&lt;/span&gt;
        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;testFailed&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestFailure&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TestIdentifier&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;testFailed&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;// sleep a small amount of time to ensure test failure stack trace&lt;/span&gt;
            &lt;span class="c1"&gt;// makes it into logcat&lt;/span&gt;
            &lt;span class="c1"&gt;// capture&lt;/span&gt;
            &lt;span class="n"&gt;RunUtil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getDefault&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;sleep&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;InputStreamSource&lt;/span&gt; &lt;span class="n"&gt;logSource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mDevice&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getLogcat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mNumLogcatBytes&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;testLog&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"logcat-%s_%s"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getClassName&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getTestName&lt;/span&gt;&lt;span class="o"&gt;()),&lt;/span&gt; &lt;span class="n"&gt;LogDataType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;TEXT&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;logSource&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;logSource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cancel&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * 保存截图 A {@link ResultForwarder} that will forward a screenshot on test
     * failures.
     */&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FailedTestScreenshotGenerator&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;ResultForwarder&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;ITestDevice&lt;/span&gt; &lt;span class="n"&gt;mDevice&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;FailedTestScreenshotGenerator&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ITestInvocationListener&lt;/span&gt; &lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ITestDevice&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;mDevice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="nd"&gt;@Override&lt;/span&gt;
        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;testFailed&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestFailure&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TestIdentifier&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;testFailed&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

            &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;InputStreamSource&lt;/span&gt; &lt;span class="n"&gt;screenSource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mDevice&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getScreenshot&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;testLog&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"screenshot-%s_%s"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getClassName&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getTestName&lt;/span&gt;&lt;span class="o"&gt;()),&lt;/span&gt; &lt;span class="n"&gt;LogDataType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;PNG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;screenSource&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;screenSource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cancel&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DeviceNotAvailableException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// TODO: rethrow this somehow&lt;/span&gt;
                &lt;span class="n"&gt;CLog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;e&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Device %s became unavailable while capturing screenshot, %s"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mDevice&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSerialNumber&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;1&lt;/code&gt;.老大FailedTestBugreportGenerator：保存bugreport信息。&lt;br&gt;
&lt;code&gt;2&lt;/code&gt;.老二FailedTestLogcatGenerator：logcat信息，system缓冲区里的日志信息保存到本地。&lt;br&gt;
&lt;code&gt;3&lt;/code&gt;.老三FailedTestScreenshotGenerator：截图，case失败时保存第一现场的截图。&lt;/p&gt;</description>
      <author>doctorq</author>
      <pubDate>Sat, 17 Jan 2015 23:30:12 +0800</pubDate>
      <link>http://testerhome.com/topics/1890</link>
      <guid>http://testerhome.com/topics/1890</guid>
    </item>
    <item>
      <title>Appium + Selenium Grid2 = Appium Parallel Execution</title>
      <description>&lt;p&gt;Hi all,&lt;/p&gt;

&lt;p&gt;今天要分享一下我用appium + selenium grd2 來達到 appium parallel execution的經驗&lt;br&gt;
我這邊主要試的是iOS device的parallel execution&lt;/p&gt;

&lt;p&gt;簡單說一下selenium grid的架構，他需要一台hub來連接多個node&lt;br&gt;
hub用來分配test到各個node上面去執行，因為appium所用的web driver是和selenium是同一套&lt;br&gt;
所以說appium可以用於selenium grid上面, 也就是說我可以針對iOS或android的原生app去平行化跑automation&lt;br&gt;
&lt;img src="/photo/2015/dc49796233439d55cc73c9637dc54b6d.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;準備資料：Mac OS*3(1台mac mini搭配裡面2個Mac OS VM)，這邊我把mac mini當作hub，另外兩個Mac OS VM當作node使用&lt;br&gt;
為什麼要各自的Mac OS VM呢？因為Mac OS的限制，一台Mac OS只能跑一台iOS device&lt;br&gt;
所以我用了VM，一個VM接一台iOS device；至於android就沒有這個限制了，所以說你可以同一台machine上面既跑hub也跑多個node都沒關係&lt;/p&gt;

&lt;p&gt;首先在這3台Mac OS都裝上appium，怎麼裝appium我就不詳細描述了&lt;/p&gt;

&lt;p&gt;接著在mac mini上面，下載最新版的selenium grid 2 &lt;br&gt;
&lt;a href="http://selenium-release.storage.googleapis.com/index.html" rel="nofollow" target="_blank"&gt;http://selenium-release.storage.googleapis.com/index.html&lt;/a&gt;&lt;br&gt;
我這邊下載的版本是selenium-server-standalone-2.44.0.jar&lt;/p&gt;

&lt;p&gt;在來在另外兩台Mac OS VM上面，分別找個位置去建立一個configuration file&lt;br&gt;
我的configuration如下&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="s"&gt;"capabilities"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;

        &lt;span class="p"&gt;{&lt;/span&gt;

            &lt;span class="s"&gt;"browserName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iphone 6"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

            &lt;span class="s"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"8.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

            &lt;span class="s"&gt;"maxInstances"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

            &lt;span class="s"&gt;"platform"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"MAC"&lt;/span&gt;

        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;],&lt;/span&gt;

    &lt;span class="s"&gt;"configuration"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="s"&gt;"cleanUpCycle"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

        &lt;span class="s"&gt;"timeout"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;30000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

        &lt;span class="s"&gt;"hub"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"http://10.1.200.113:4444/grid/register"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

        &lt;span class="s"&gt;"host"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"10.1.201.178"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

        &lt;span class="s"&gt;"proxy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"org.openqa.grid.selenium.proxy.DefaultRemoteProxy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

        &lt;span class="s"&gt;"maxSession"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

        &lt;span class="s"&gt;"port"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4723&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

        &lt;span class="s"&gt;"hubPort"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4444&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

        &lt;span class="s"&gt;"hubHost"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"10.1.200.113"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

        &lt;span class="s"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"http://10.1.201.178:4723/wd/hub"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

        &lt;span class="s"&gt;"remoteHost"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"http://10.1.201.178:4723"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

        &lt;span class="s"&gt;"register"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

        &lt;span class="s"&gt;"registerCycle"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

         &lt;span class="s"&gt;"role"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"node"&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;記得要把相對應的address改成你的環境裡面的設定&lt;/p&gt;

&lt;p&gt;在來就是執行的部分&lt;/p&gt;

&lt;p&gt;在hub上面打開terminal，run以下的command&lt;/p&gt;

&lt;p&gt;java -jar selenium-server-standa-2.44.0.jar -port 4444 -role hub -nodeTimeout 600&lt;/p&gt;

&lt;p&gt;不加-port 4444也行，因為預設的port就是4444&lt;/p&gt;

&lt;p&gt;接著在各個node上面先連結你的testing device，這邊就是iPhone，連到node上面&lt;/p&gt;

&lt;p&gt;打開terminal，run以下的command&lt;/p&gt;

&lt;p&gt;appium -a 10.1.201.178 -p 4723 -U $(your device's udid)  --nodeconfig $(your absolute path to  config.json)&lt;/p&gt;

&lt;p&gt;其中 10.1.201.178是你node的ip address，port是你appium要開的port。這兩個資料要和你的config.json裡面設定的要一樣, 記得把各個參數改成你相對應的環境參數，這邊nodeconfig的位址記得改成絕對路徑&lt;/p&gt;

&lt;p&gt;輸入完之後，你可以從node的terminal裡面看到&lt;/p&gt;

&lt;p&gt;info: --&amp;gt; GET /wd/hub/status {}&lt;/p&gt;

&lt;p&gt;info: [debug] Responding to client with success: {"status":0,"value":{"build":{"version":"1.3.4","revision":"c8c79a85fbd6870cd6fc3d66d038a115ebe22efe"}}}&lt;/p&gt;

&lt;p&gt;的訊息&lt;/p&gt;

&lt;p&gt;接著在hub的terminal裡面也會看到連結成功的訊息&lt;/p&gt;

&lt;p&gt;或者從hub機器裡，打開browser，輸入&lt;a href="http://localhost:444" rel="nofollow" target="_blank"&gt;http://localhost:444&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;也可以看到這台hub所連接的node的資訊&lt;br&gt;
&lt;img src="/photo/2015/3a269a226384854c776e426c1d1591f1.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;如果到這邊都沒問題的話，就可以run你的test case了&lt;/p&gt;

&lt;p&gt;你要測試的app記得放在node機器裡面，如果你的app位置是放在local的話&lt;/p&gt;

&lt;p&gt;run你的test case就和run appium一樣，只是你要把server address和port改成hub的位址資訊&lt;/p&gt;

&lt;p&gt;連結到hub之後，hub就會自動的把你的test case轉到node上面去run&lt;/p&gt;

&lt;p&gt;run了一次，還沒跑完的時候，在run一次test case，hub會幫你把test case轉到另一台free的node上面去run，這樣子就是appium parallel execution&lt;/p&gt;

&lt;p&gt;大概就是這樣&lt;/p&gt;</description>
      <author>colorhaake</author>
      <pubDate>Fri, 16 Jan 2015 16:49:52 +0800</pubDate>
      <link>http://testerhome.com/topics/1888</link>
      <guid>http://testerhome.com/topics/1888</guid>
    </item>
    <item>
      <title>uiautomatorviewer 新增功能 compressed 之 Device 端细节</title>
      <description>&lt;p&gt;昨天了解了uiautoamtorviewer新增功能dump --compressed，是一个直接发送到设备端的命令，那么这个命令发送到设备端后，设备端是如何操作的呢？我又成了10万个为什么了？继续源码研究......&lt;/p&gt;
&lt;h4&gt;源码地址&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://android.googlesource.com/platform/frameworks/uiautomator/+/android-sdk-4.4.2_r1.0.1" target="_blank"&gt;google source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这个jar包最新的版本只到了4.4.2。说明5.0后的uiautomator设备端是没有改变的，那么说明dump --compressed之前就有，只是我不知道罢鸟。结论：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;dump --compressed命令4.4.2时代就有，只是年少无知没发现&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;源码环境搭建&lt;/h4&gt;
&lt;p&gt;解压以后项目结果如下所示：&lt;/p&gt;

&lt;p&gt;&lt;img src="/photo/2015/dd78f7a02a0762ae4e35ad4e2a0cd305.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;直接用eclipse的import功能导入，整体导入。导入eclipse后,如下图所示，感叹号是因为没有添加&lt;code&gt;android.jar&lt;/code&gt;造成的，加上就好了。&lt;/p&gt;

&lt;p&gt;&lt;img src="/photo/2015/3201f97ca892be343611373840bbc1fa.png" alt=""&gt;&lt;/p&gt;
&lt;h4&gt;源码分析&lt;/h4&gt;
&lt;p&gt;当我们在命令行下输入下面命令的时候，android系统就会调用&lt;code&gt;cmds&lt;/code&gt;目录下的&lt;code&gt;Launcher&lt;/code&gt;类中的&lt;code&gt;main&lt;/code&gt;方法中&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;uiautomator&lt;/span&gt; &lt;span class="n"&gt;dump&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;compressed&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;uidump&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;xml&lt;/span&gt;
&lt;/pre&gt;
&lt;h4&gt;Launcher&lt;/h4&gt;
&lt;p&gt;所以我们从main开始我们的大餐:&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// show a meaningful process name in `ps`&lt;/span&gt;
        &lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setArgV0&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"uiautomator"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Command&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;findCommand&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{};&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="c1"&gt;// consume the first arg&lt;/span&gt;
                    &lt;span class="n"&gt;args2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;copyOfRange&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
                &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;HELP_COMMAND&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;下面一步一步解释上面的代码的意思：&lt;br&gt;
&lt;code&gt;1&lt;/code&gt;.首先在进程信息中添加上&lt;code&gt;uiautomator&lt;/code&gt;信息，这样你在命令行中敲&lt;code&gt;adb shell ps&lt;/code&gt;就能查看到&lt;code&gt;uiautomator&lt;/code&gt;进程的信息了。&lt;br&gt;
&lt;code&gt;2&lt;/code&gt;.判断参数数量是否大于0，其中要了解的是上面的命令中dump算第一个参数。不要把system/bin/uiautmator当成了第一个参数。&lt;br&gt;
&lt;code&gt;3&lt;/code&gt;.当参数数量大于0时，获得第一个参数的值args[0]，其中findCommand()方法根据命令的名称得到命令的类型。总共有四个命令:&lt;code&gt;help&lt;/code&gt;、&lt;code&gt;events&lt;/code&gt;、&lt;code&gt;runtest&lt;/code&gt;、&lt;code&gt;dump&lt;/code&gt;，你如果想知道各个命令是干什么的，你可以在命令行下敲一下看看输出就知道了。&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Command&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;COMMANDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Command&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;HELP_COMMAND&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;RunTestCommand&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;DumpCommand&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;EventsCommand&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
    &lt;span class="o"&gt;};&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;4&lt;/code&gt;.如果命令不为空，就要执行相应的命令，但是还要将剩下的参数(可能为空的参数，但不是null值)传入&lt;code&gt;run&lt;/code&gt;方法中，让各个类型自己处理。我们的命令是dump命令，所以下一步进入&lt;code&gt;DumpCommand&lt;/code&gt;中。&lt;br&gt;
&lt;code&gt;5&lt;/code&gt;.如果不带参数的话，直接执行&lt;code&gt;help&lt;/code&gt;命令。&lt;/p&gt;
&lt;h4&gt;DumpCommand&lt;/h4&gt;&lt;pre class="highlight java"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="n"&gt;dumpFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DEFAULT_DUMP_FILE&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;verboseMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"--compressed"&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
                &lt;span class="n"&gt;verboseMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;startsWith&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;dumpFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;UiAutomationShellWrapper&lt;/span&gt; &lt;span class="n"&gt;automationWrapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;UiAutomationShellWrapper&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;automationWrapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;connect&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;verboseMode&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// default&lt;/span&gt;
            &lt;span class="n"&gt;automationWrapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setCompressedLayoutHierarchy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;automationWrapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setCompressedLayoutHierarchy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// It appears that the bridge needs time to be ready. Making calls to the&lt;/span&gt;
        &lt;span class="c1"&gt;// bridge immediately after connecting seems to cause exceptions. So let's also&lt;/span&gt;
        &lt;span class="c1"&gt;// do a wait for idle in case the app is busy.&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;UiAutomation&lt;/span&gt; &lt;span class="n"&gt;uiAutomation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;automationWrapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getUiAutomation&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;uiAutomation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;waitForIdle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;AccessibilityNodeInfo&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;uiAutomation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getRootInActiveWindow&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ERROR: null root node returned by UiTestAutomationBridge."&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;

            &lt;span class="n"&gt;Display&lt;/span&gt; &lt;span class="n"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
                    &lt;span class="n"&gt;DisplayManagerGlobal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getRealDisplay&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Display&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;DEFAULT_DISPLAY&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;rotation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getRotation&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;Point&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSize&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;AccessibilityNodeInfoDumper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dumpWindowToFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dumpFile&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rotation&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TimeoutException&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ERROR: could not get idle state."&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;automationWrapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;disconnect&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"UI hierchary dumped to: %s"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dumpFile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAbsolutePath&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;run方法执行的步骤有点长，没关系，慢慢来。&lt;br&gt;
&lt;code&gt;1&lt;/code&gt;.首先创建文件用来保存dump下来的信息，这个时候需要注意&lt;code&gt;getLegacyExternalStorageDirectory&lt;/code&gt;是个隐藏的方法，官网上的api没有这个方法的解释，可以在源码上找到，我贴在这里，帮助理解,该文件的路径为&lt;code&gt;/storage/emulated/legacy/window_dump.xml&lt;/code&gt;&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;span class="cm"&gt;/** {@hide} */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="n"&gt;getLegacyExternalStorageDirectory&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getenv&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ENV_EXTERNAL_STORAGE&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;2&lt;/code&gt;.然后解析传入的参数得到保存的路径以及是否压缩。&lt;br&gt;
&lt;code&gt;3&lt;/code&gt;.然后创建&lt;code&gt;UiAutomationShellWrapper对象&lt;/code&gt;，启动Handler线程，创建Uiautomation对象，并建立连接。然后设置了压缩属性。这个&lt;code&gt;UiAutomationShellWrapper&lt;/code&gt;也是隐藏的，也只能到源码环境下查看。&lt;br&gt;
&lt;code&gt;4&lt;/code&gt;.然后我们得到了Uiautomation的对象实例&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;span class="n"&gt;UiAutomation&lt;/span&gt; &lt;span class="n"&gt;uiAutomation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;automationWrapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getUiAutomation&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;uiAutomation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;waitForIdle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;AccessibilityNodeInfo&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;uiAutomation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getRootInActiveWindow&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;等待UI界面处于稳定后(idle状态)，然后我们调用&lt;code&gt;getRootInActiveWindow&lt;/code&gt;方法获得结果的根节点。这个时候我们整个流程差不多结束了，我们care的--compressed还没看到。&lt;/p&gt;
&lt;h4&gt;compressed&lt;/h4&gt;
&lt;p&gt;经过一路追踪,发现compressed属性在整个过程中的作用是给&lt;code&gt;AccessibilityServiceInfo&lt;/code&gt;对象添加了一个 &lt;a href="http://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#FLAG_INCLUDE_NOT_IMPORTANT_VIEWS" target="_blank"&gt;FLAG_INCLUDE_NOT_IMPORTANT_VIEWS &lt;/a&gt;标志位。其他的就是正常获取dump信息流程,这个标志位对获取信息时候的影响有多大，留到以后来解释(没有源码环境，不好调试啊，头疼......)。&lt;/p&gt;</description>
      <author>doctorq</author>
      <pubDate>Fri, 16 Jan 2015 16:48:23 +0800</pubDate>
      <link>http://testerhome.com/topics/1887</link>
      <guid>http://testerhome.com/topics/1887</guid>
    </item>
    <item>
      <title>CTS 框架解析之 case 的组织</title>
      <description>&lt;h4&gt;uml图&lt;/h4&gt;
&lt;p&gt;以"作孽"的&lt;code&gt;UML&lt;/code&gt;知识画成的关系图：&lt;/p&gt;

&lt;p&gt;&lt;img src="/photo/2015/91f306c33e7c8935f5fde63c167769a6.png" alt=""&gt;&lt;/p&gt;
&lt;h4&gt;解释&lt;/h4&gt;
&lt;p&gt;上图涉及5个类：&lt;code&gt;ddmlib&lt;/code&gt;提供的&lt;code&gt;TestIdentifier&lt;/code&gt;类，&lt;code&gt;cts&lt;/code&gt;自定义的&lt;code&gt;IRemoteTest&lt;/code&gt;接口、&lt;code&gt;ITestPackageDef&lt;/code&gt;接口、&lt;code&gt;TestFilter&lt;/code&gt;类和&lt;code&gt;TestPackage&lt;/code&gt;类。具体意义如下：&lt;/p&gt;
&lt;h4&gt;TestIdentifier&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ddmlib&lt;/code&gt;为我们提供的属于&lt;code&gt;instrumentation&lt;/code&gt;测试的&lt;code&gt;case&lt;/code&gt;实体类，里面有2个属性，case的类名和方法名。这样我们就可以找到一个case。&lt;/p&gt;
&lt;h4&gt;IRemoteTest&lt;/h4&gt;
&lt;p&gt;一种测试类型的接口定义，该测试类型可以直接将结果发送到监听器，让其处理。所以测试runner部分只管撒了欢的跑，抓结果的模块是单独存在的。&lt;/p&gt;
&lt;h4&gt;ITestPackageDef&lt;/h4&gt;
&lt;p&gt;case相关信息的容器，信息从哪里来？举个例子，写&lt;code&gt;uiautomator case&lt;/code&gt;的人都了解，我们写的case都要打成jar包，随着jar一起生成的还有一个与jar包名一样的xml文件，我们的信息就是从该xml文件里来，里面定义了jar包的标识符，测试包名等信息。&lt;/p&gt;
&lt;h4&gt;TestFilter&lt;/h4&gt;
&lt;p&gt;case的过滤器类，定义一些过滤的条件。里面有2个集合保存了要被过滤掉的case的类名或&lt;code&gt;TestIdentifier&lt;/code&gt;对象，以及1个特殊的类名和方法名，这个属性默认是为&lt;code&gt;null&lt;/code&gt;，一般情况下需要你去设值，如果不设置，那么这个条件就不作为过滤的条件，来具体看看删选的处理代码：&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Collection&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TestIdentifier&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Collection&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TestIdentifier&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TestIdentifier&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;filteredTests&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TestIdentifier&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestIdentifier&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mIncludedClass&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getClassName&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mIncludedClass&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// skip&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mIncludedMethod&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getTestName&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mIncludedMethod&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// skip&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mExcludedClasses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getClassName&lt;/span&gt;&lt;span class="o"&gt;()))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// skip&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mExcludedTests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// skip&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;filteredTests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;Collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filteredTests&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;TestIdComparator&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;filteredTests&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

&lt;/pre&gt;

&lt;p&gt;代码块很简单，随着条件分支一步一步过滤，最后剩下来的case添加到新集合中返回。&lt;/p&gt;
&lt;h4&gt;TestPackage&lt;/h4&gt;
&lt;p&gt;包含上面3个实体对象(除了&lt;code&gt;TestFilter&lt;/code&gt;)，一个TestPackage代表了一个case包(jar或者apk等)相关的所有信息，例如一个&lt;code&gt;uiautomator&lt;/code&gt;写出的jar包，那么一个jar包就需要定义一个&lt;code&gt;TestPackage&lt;/code&gt;对象：该jar包包含的case集合，该jar包执行的测试类型，以及jar一些相关属性信息。有了这些就足够了，case就可以执行run的动作了。cts执行的时候只需要得到TestPackage对象集合(代表一个个的case包对象)，就可以遍历得到所有要执行的case。&lt;/p&gt;
&lt;h4&gt;具体执行过程&lt;/h4&gt;
&lt;p&gt;cts中是以plan来定义要跑的case包集合，plan则是一个xml文件，里面定义了一个或多个case包的标识信息。这样去case的目录下就可以找到case包以及case包的xml配置文件。当我们传入一个plan进入cts后，发生了什么？(一下方法都是CtsTest中的方法)&lt;/p&gt;
&lt;h4&gt;buildTestsToRun方法&lt;/h4&gt;
&lt;p&gt;当测试执行的时候，cts会先调用该方法获得所有TestPackage对象，上面说过，获得这个就足够了。具体该实现：&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TestPackage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;buildTestsToRun&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TestPackage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;testPkgList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;LinkedList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TestPackage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// 获得testcases目录下所有的xml文件解析出来的case包对象&lt;/span&gt;
            &lt;span class="n"&gt;ITestPackageRepo&lt;/span&gt; &lt;span class="n"&gt;testRepo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;createTestCaseRepo&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="c1"&gt;// 得到本次plan所需跑的case&lt;/span&gt;
            &lt;span class="n"&gt;Collection&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ITestPackageDef&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;testPkgDefs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getTestPackagesToRun&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testRepo&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ITestPackageDef&lt;/span&gt; &lt;span class="n"&gt;testPkgDef&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;testPkgDefs&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;addTestPackage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testPkgList&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;testPkgDef&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testPkgList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isEmpty&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;logAndDisplay&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LogLevel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WARN&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LOG_TAG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"No tests to run"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FileNotFoundException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;IllegalArgumentException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"failed to find CTS plan file"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ParseException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;IllegalArgumentException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"failed to parse CTS plan file"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ConfigurationException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;IllegalArgumentException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"failed to process arguments"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;testPkgList&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;首先会去将固定路径下的(cts根目录下的repository\testcases)下所有xml文件解析出来，这些xml文件都是和case包一一对应的，你不能去解析jar包或者apk包吧，所以需要一个case包配置文件的存在，这样我们读取xml的信息就可以得到相关的信息。然后我们要筛选出本次plan需要跑的case包。&lt;/p&gt;
&lt;h4&gt;getTestPackagesToRun方法&lt;/h4&gt;
&lt;p&gt;该方法里有4条分支，每条分支代表不同的执行任务的标识。&lt;br&gt;
&lt;code&gt;1&lt;/code&gt;以plan名定义的任务&lt;br&gt;
&lt;code&gt;2&lt;/code&gt;.以case包的uri定义的集合所定义的任务&lt;br&gt;
&lt;code&gt;3&lt;/code&gt;.以class定义的(一个类中的所有case)任务&lt;br&gt;
&lt;code&gt;4&lt;/code&gt;.以sessionID(cts为之前跑过的任务都定义了一个session)所定义的任务，这个是重跑之前的任务。&lt;/p&gt;

&lt;p&gt;我们来只看第一种，以plan方式启动的任务。&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Collection&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ITestPackageDef&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getTestPackagesToRun&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ITestPackageRepo&lt;/span&gt; &lt;span class="n"&gt;testRepo&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;ParseException&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FileNotFoundException&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ConfigurationException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// use LinkedHashSet to have predictable iteration order&lt;/span&gt;
        &lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ITestPackageDef&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;testPkgDefs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;LinkedHashSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ITestPackageDef&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mPlanName&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LOG_TAG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Executing CTS test plan %s"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mPlanName&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
            &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="n"&gt;ctsPlanFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mCtsBuildHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getTestPlanFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mPlanName&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;ITestPlan&lt;/span&gt; &lt;span class="n"&gt;plan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;createPlan&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mPlanName&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;plan&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;createXmlStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctsPlanFile&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;plan&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getTestUris&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;mExcludedPackageNames&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;ITestPackageDef&lt;/span&gt; &lt;span class="n"&gt;testPackage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;testRepo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getTestPackage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                    &lt;span class="n"&gt;testPackage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setExcludedTestFilter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plan&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getExcludedTestFilter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
                    &lt;span class="n"&gt;testPkgDefs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testPackage&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mPackageNames&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="o"&gt;......&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mClassName&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="o"&gt;......&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mContinueSessionId&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="o"&gt;......&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// should never get here - was checkFields() not called?&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;IllegalStateException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"nothing to run?"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;testPkgDefs&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;该分支中，首先根据plan名找到所有xml文件，然后解析xml文件，得到case。这样我们就得到了ITestPackageDef对象，遍历得到所有这样的对象，然后将该对象集合返回。回到上面的&lt;code&gt;buildTestsToRun()&lt;/code&gt;中，然后根据返回的集合元素创建&lt;code&gt;TestPackage&lt;/code&gt;对象集合，这样我们的处理过程就完成了。&lt;/p&gt;</description>
      <author>doctorq</author>
      <pubDate>Fri, 16 Jan 2015 13:15:46 +0800</pubDate>
      <link>http://testerhome.com/topics/1881</link>
      <guid>http://testerhome.com/topics/1881</guid>
    </item>
    <item>
      <title>【翻译原创】（三）MonkeyTalk 用户手册 - IDE 及 Agent 的安装</title>
      <description>&lt;p&gt;由于用户手册的内容实在太多，会分多个章节来翻译，本章节已完成。&lt;/p&gt;

&lt;p&gt;概述：&lt;br&gt;
在这里你会找到如何使用MonkeyTalk的完整的列表。如果你仍然对MonkeyTalk存在问题，请查看我们免费的社区论坛或者了解更多我们的包年支持服务，它可以让你与MonkeyTalk的创造者直接交流与获得帮助。&lt;/p&gt;

&lt;p&gt;安装MonkeyTalk：&lt;br&gt;
1，首先，你必须安装MonkeyTalkIDE，请查看《安装手册》取得详细的帮助：&lt;br&gt;
&lt;a href="http://www.cloudmonkeymobile.com/monkeytalk-documentation/monkeytalk-getting-started/install-ide" rel="nofollow" target="_blank"&gt;http://www.cloudmonkeymobile.com/monkeytalk-documentation/monkeytalk-getting-started/install-ide&lt;/a&gt;&lt;br&gt;
2，然后，你必须在你的Android或者iOS应用（或者两者皆有的跨平台测试）上面安装MonkeyTalk Agent。根据你的平台查看不同的安装手册：&lt;br&gt;
&lt;a href="http://www.cloudmonkeymobile.com/monkeytalk-documentation/monkeytalk-getting-started/install-agent/ios" rel="nofollow" target="_blank"&gt;http://www.cloudmonkeymobile.com/monkeytalk-documentation/monkeytalk-getting-started/install-agent/ios&lt;/a&gt;&lt;br&gt;
&lt;a href="http://www.cloudmonkeymobile.com/monkeytalk-documentation/monkeytalk-getting-started/install-agent/android" rel="nofollow" target="_blank"&gt;http://www.cloudmonkeymobile.com/monkeytalk-documentation/monkeytalk-getting-started/install-agent/android&lt;/a&gt;&lt;br&gt;
3，想要自动构建启用MonkeyTalk的App请参考如何使用Ant进行构建：&lt;br&gt;
&lt;a href="https://www.cloudmonkeymobile.com/monkeytalk-documentation/monkeytalk-user-guide/installing-monkeytalk/building-ant" rel="nofollow" target="_blank"&gt;https://www.cloudmonkeymobile.com/monkeytalk-documentation/monkeytalk-user-guide/installing-monkeytalk/building-ant&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;使用Ant进行构建(build with Ant)：&lt;br&gt;
为了构建一个启用MonkeyTalk的应用程序，第一步是下载并安装AspectJ.工具。你可以从 &lt;a href="http://www.eclipse.org/aspectj/downloads.php" rel="nofollow" target="_blank"&gt;http://www.eclipse.org/aspectj/downloads.php&lt;/a&gt; 处下载最新稳定版本，解压Jar包并记住文件路径。&lt;br&gt;
要使用终端为你的Android项目创建buld.xml，首先打开终端并进入到你的项目路径，然后输入：&lt;/p&gt;
&lt;pre class="highlight shell"&gt;android update project --target android-minSDKlevel --path .
&lt;/pre&gt;

&lt;p&gt;要与MonkeyTalk Agent一起build，把samples/android目录下的MonkeyTalk Demo1的custom_rules.xml拷贝到与build.xml相同的目录，然后把monkeytalk-agent.jar添加到你的Android项目库中。&lt;br&gt;
最后使用Ant命令运行：&lt;/p&gt;
&lt;pre class="highlight shell"&gt;ant clean debug -Dsdk.dir&lt;span class="o"&gt;=&lt;/span&gt;/your/android-sdk -Daspectj.dir&lt;span class="o"&gt;=&lt;/span&gt;/your/aspectj-1.2.3
&lt;/pre&gt;

&lt;p&gt;现在你就可以自动构建启用MonkeyTalk的应用程序了。&lt;/p&gt;

&lt;p&gt;装备你的应用：（就是在应用上插如Agent）&lt;br&gt;
如何安装MonkeyTalk Agent&lt;br&gt;
如果你想直接尝试MonkeyTalk，你可以尝试使用我们的Sample应用，你可以在MonkeyTalk安装压缩文件的samples 文件夹中找到这些应用。这些应用都已经植入了MonkeyTalk Agent，这样你就可以直接安装打开它们，然后跳到&lt;a href="https://www.cloudmonkeymobile.com/monkeytalk-documentation/monkeytalk-getting-started/about-ide" rel="nofollow" target="_blank"&gt;https://www.cloudmonkeymobile.com/monkeytalk-documentation/monkeytalk-getting-started/about-ide&lt;/a&gt; 去了解我们的IDE功能。如果你想设置自己的应用程序，请继续下一步。&lt;br&gt;
&lt;img src="/photo/2015/ee3acbd036070a56ed255cc3af91aa73.jpg" alt=""&gt;&lt;br&gt;
你可以在MonkeyTalk安装压缩文件的agents文件夹下找到这些Agent，它们在不同标签的子文件夹下。iOS的Agent在agents/ios文件夹，Android的在agents/android文件夹。每个平台的Agent的安装都是不一样的。&lt;br&gt;
&lt;img src="/photo/2015/19ede23b4957661b024cc691878fb648.jpg" alt=""&gt;&lt;br&gt;
接下来的内容是不同平台的安装说明。&lt;/p&gt;

&lt;p&gt;IOS：&lt;br&gt;
安装MonkeyTalk IOS Agent：&lt;br&gt;
1，在你的操作系统上下载MonkeyTalk 压缩文件。&lt;br&gt;
2，在XCode上打开你的应用项目。&lt;br&gt;
3，右键选择你的Build Target然后选择Duplicate命令复制你的构建目标：&lt;br&gt;
&lt;img src="/photo/2015/8293ac1ab12eee94797814bbbbe2cc7f.png" alt=""&gt;&lt;br&gt;
重命名你复制的文件为YourAppMonkey之类的名字：&lt;br&gt;
&lt;img src="/photo/2015/11bae94413d8634b4e7847ba4bb708a5.png" alt=""&gt;&lt;br&gt;
它看起来是这样的：&lt;br&gt;
&lt;img src="/photo/2015/93d1d2d3128e856838100ccd36d27986.png" alt=""&gt;&lt;br&gt;
你也许想在Schemes窗口中重命名你的Scheme：&lt;br&gt;
&lt;img src="/photo/2015/e20f44db9ae86af4e2942fbd137c594f.png" alt=""&gt;&lt;br&gt;
&lt;img src="/photo/2015/dfd2e4f77a9a075975530a8641e2f51c.png" alt=""&gt;&lt;br&gt;
4，从菜单File &amp;gt; Add to “YourApp”...添加下载下来的MonkeyTalk库文件：&lt;br&gt;
&lt;img src="/photo/2015/5ecec0bf02b62929b8fbd663d9475211.png" alt=""&gt;&lt;br&gt;
5，当弹窗出现时，导航到你解压MonkeyTalk压缩文件的地方，然后根据以下路径选择MonkeyTalk iOS库文件：&lt;br&gt;
pathToMonkeyTalkFolder/agents/iOS.&lt;br&gt;
6，选择Recursively create groups for any added folders选项。（提示：这取决于你是否愿意复制所有的item到新建的文件夹中）&lt;br&gt;
7，在Add to Targets的框中，取消选择原有的项目并选择你复制的项目：&lt;br&gt;
&lt;img src="/photo/2015/4f624d8ddb8d00b1abbae9d66a450bbd.png" alt=""&gt;&lt;br&gt;
8，点击Add&lt;br&gt;
9，MonkeyTalk库文件应该在你的项目中可见了。&lt;/p&gt;

&lt;p&gt;依赖库以及构建设置（Configuring Libraries and Build Settings）：&lt;br&gt;
1，右键选择复制的YourAppMonkey 构建项目，然后选择Build Phases选项。&lt;br&gt;
2，在Link Binaries With Libraries页面，如果你的项目中没有的话，你需要添加libstdc++.6.0.9.dylib libsqlite3.dylib CFNetwork.framework以及QuartzCore.framework到项目中。（这些框架是MonkeyTalk需要的）&lt;br&gt;
&lt;img src="/photo/2015/5fd43e24497f2c633afc1932c104e711.png" alt=""&gt;&lt;br&gt;
3，Xcode应该默认把libMonkeyTalk.a库添加到了references中。（备注：如果你想要build iOS4.x,请把UIKit.framework的选项从"Reqired"改成“Optional”）&lt;br&gt;
4，在Build Settings页面，下滑到 Linking部分，添加你的Other Linker Flags为：-all_load&lt;br&gt;
&lt;img src="/photo/2015/028a9afde2ed8341d89de80a7dfeb565.png" alt=""&gt;&lt;br&gt;
5，在Xcode的Scheme菜单中选择你复制的测试对象并选择在Simulator 或者设备上运行：&lt;br&gt;
&lt;img src="/photo/2015/09525dbad7bfbe83ed8f004894ccfc4c.png" alt=""&gt;&lt;br&gt;
输出日志会显示MonkeyTalk在你的应用上成功加载了（如下图所示）&lt;br&gt;
&lt;img src="/photo/2015/c851a9d66c43f674687120098c745571.png" alt=""&gt;&lt;br&gt;
你也可以查看培训视频：&lt;br&gt;
&lt;a href="http://www.youtube.com/watch?v=iDnX67NZ9jI&amp;amp;safety_mode=true&amp;amp;persist_safety_mode=1&amp;amp;safe=active" rel="nofollow" target="_blank"&gt;http://www.youtube.com/watch?v=iDnX67NZ9jI&amp;amp;safety_mode=true&amp;amp;persist_safety_mode=1&amp;amp;safe=active&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Android：&lt;br&gt;
安装MonkeyTalk Android Agent：&lt;br&gt;
在Eclipse中打开你的Android项目并执行以下步骤：&lt;br&gt;
1，在Eclipse中安装AspectJ Development Tools plugin (AJDT) 。&lt;br&gt;
2，转换你的Android项目为AspectJ类型：&lt;br&gt;
&lt;img src="/photo/2015/d2b40daa66ad529c772d0254f13e1b8e.png" alt=""&gt;&lt;br&gt;
3，添加monkeytalk-agent.jar到你的项目中&lt;br&gt;
    Agent文件可以在你之前下载的MonkeyTalk主压缩包中的agents/android/文件夹中找到。准确的Android Agent Jar包会包含版本信息。（例如monkeytalk-agent-1.0.30.jar）&lt;br&gt;
    如果你的Android项目中没有libs/文件夹的话，创建一个，然后把Agent jar包放进去。&lt;br&gt;
4，把monkeytalk-agent.jar包含进AspectJ构建路径中（右键点击monkeyTalk-agent.jar &amp;gt; AspectJ Tools &amp;gt; Add to Aspectpath）：&lt;br&gt;
&lt;img src="/photo/2015/c43d273c269379ebca65c791228ae398.png" alt=""&gt;&lt;br&gt;
5，更新你的AndroidManifest.xml，使其包含下列两种权限：&lt;br&gt;
    android.permission.INTERNET&lt;br&gt;
    android.permission.GET_TASKS&lt;br&gt;
&lt;img src="/photo/2015/3f8337f3d6e80f0c42929423cef6ee06.png" alt=""&gt;&lt;br&gt;
6，更新项目属性（右键点击项目 &amp;gt; Properties &amp;gt; Java Build Path），选择Order and Export页面，勾选AspectJ Runtime Library 旁边的勾选框来进行导出它：&lt;br&gt;
&lt;img src="/photo/2015/87870c6f1d0acd0e53b29e6b157faf65.png" alt=""&gt;&lt;br&gt;
7，你也应该勾选你导进去的monkeytalk-agent.jar文件来导出它。（在某些版本的Android开发工具中，会提示Dexification Error的错误，如果你看到这个错误，就不用勾选它了）&lt;br&gt;
8，在设备或者模拟器上部署你的应用。&lt;br&gt;
你也可以查看培训视频：&lt;br&gt;
&lt;a href="http://www.youtube.com/watch?v=P3fAbKysHWs&amp;amp;safety_mode=true&amp;amp;persist_safety_mode=1&amp;amp;safe=active" rel="nofollow" target="_blank"&gt;http://www.youtube.com/watch?v=P3fAbKysHWs&amp;amp;safety_mode=true&amp;amp;persist_safety_mode=1&amp;amp;safe=active&lt;/a&gt;&lt;/p&gt;</description>
      <author>weamylady</author>
      <pubDate>Fri, 16 Jan 2015 10:30:04 +0800</pubDate>
      <link>http://testerhome.com/topics/1880</link>
      <guid>http://testerhome.com/topics/1880</guid>
    </item>
    <item>
      <title>了解 uiautomatorviewer 新增的 dump --compressed 功能</title>
      <description>&lt;p&gt;新版本的&lt;code&gt;uiautomatorviewer&lt;/code&gt;工具中新增了&lt;code&gt;dump --compressed&lt;/code&gt;功能，可以选择只获取界面中呈现在你面前的控件，非常精简。那么它是怎么做到的，是更换命令了么？还是在&lt;code&gt;dump&lt;/code&gt;的基础上在本地做了一个优化呢？速度怎么样？我带着这些疑惑开始了源码分析之路。&lt;/p&gt;
&lt;h4&gt;下载源码&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://android.googlesource.com/platform/tools/swt/+/android-5.0.2_r1/uiautomatorviewer/" target="_blank"&gt;google source&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;配置源码环境&lt;/h4&gt;
&lt;p&gt;解压缩有项目结构如下：&lt;/p&gt;

&lt;p&gt;&lt;img src="/photo/2015/4a2614b4ddec104946a434d1f82b4bea.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;用你熟悉的方式将源码配置IDE中，我用的是eclipse具体配置过程如下：&lt;/p&gt;

&lt;p&gt;虽然它有&lt;code&gt;build.gradle&lt;/code&gt;，但是我用这个往&lt;code&gt;eclipse&lt;/code&gt;里导入&lt;code&gt;gradle&lt;/code&gt;依然没成功，没关系，用暴力的方式。直接创建一个&lt;code&gt;gradle&lt;/code&gt;项目，然后将源码&lt;code&gt;copy&lt;/code&gt;进去(原谅我的无知)，创建的过程看&lt;a href="http://blog.csdn.net/itfootball/article/details/42710653" target="_blank"&gt;gradle学习(21)-在eclipse中构建java项目 &lt;/a&gt;。导入以后肯定有很多错误，这是缺少jar包造成的，添加如下&lt;code&gt;jar&lt;/code&gt;包就行了：&lt;/p&gt;

&lt;p&gt;&lt;img src="/photo/2015/4bc647cdcc839aedbfb8317b645359a9.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;所有jar包都可以在你的sdk目录下的&lt;code&gt;tools/lib&lt;/code&gt;中找到，其中需要注意一点的是&lt;code&gt;swt.jar&lt;/code&gt;包在以&lt;code&gt;x86&lt;/code&gt;开始的文件夹中，选择对应平台的&lt;code&gt;jar&lt;/code&gt;包就行。&lt;/p&gt;

&lt;p&gt;&lt;img src="/photo/2015/bb1e860142cb11c147a04dd2eba571f9.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;等这些都完成以后，代码中的x号就会消失，项目结构如下：&lt;/p&gt;

&lt;p&gt;&lt;img src="/photo/2015/999a3ef1341fd44372d5b2778dd5133c.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;这个时候在&lt;code&gt;UiAutomatorViewer&lt;/code&gt;类中启动main方法，会出现我们熟悉的&lt;code&gt;uiautomatorviewer&lt;/code&gt;工具界面：&lt;/p&gt;

&lt;p&gt;&lt;img src="/photo/2015/bdd66bb73a2cafa3ffb2590f4fc69fef.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;这个时候你点击&lt;code&gt;Device screentshot&lt;/code&gt;按钮会报错：&lt;/p&gt;

&lt;p&gt;&lt;img src="/photo/2015/336194599cca28b29e5d906d72494c0a.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;这是因为uiautomatorviewer项目是根据&lt;code&gt;com.android.uiautomator.bindir&lt;/code&gt;属性去找sdk路径的，这就要求你启动的时候需要去添加这个属性。打开&lt;code&gt;DebugBridge&lt;/code&gt;类可以看到getAdbLocation()方法中代码：&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;toolsDir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getProperty&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"com.android.uiautomator.bindir"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//$NON-NLS-1$&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;toolsDir&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="n"&gt;sdk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;toolsDir&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;getParentFile&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="c1"&gt;// check if adb is present in platform-tools&lt;/span&gt;
        &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="n"&gt;platformTools&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sdk&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"platform-tools"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="n"&gt;adb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;platformTools&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SdkConstants&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FN_ADB&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;adb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exists&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;adb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAbsolutePath&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// check if adb is present in the tools directory&lt;/span&gt;
        &lt;span class="n"&gt;adb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;toolsDir&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SdkConstants&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FN_ADB&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;adb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exists&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;adb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAbsolutePath&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// check if we're in the Android source tree where adb is in $ANDROID_HOST_OUT/bin/adb&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;androidOut&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getenv&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ANDROID_HOST_OUT"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;androidOut&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;adbLocation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;androidOut&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;separator&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"bin"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;separator&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                    &lt;span class="n"&gt;SdkConstants&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FN_ADB&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;adbLocation&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;exists&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;adbLocation&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;你可以在&lt;code&gt;main&lt;/code&gt;方法中加上这个属性，通过&lt;code&gt;System.setProperty(key, value)&lt;/code&gt;来设置，key就是上面&lt;code&gt;com.android.uiautomator.bindir&lt;/code&gt;，&lt;code&gt;value&lt;/code&gt;值就是你的sdk路径，当然这种方式是不好的，换路径了还得再改，这个很不好的。当然我们不必鸟它，我们采用cts的方式。将返回&lt;code&gt;null&lt;/code&gt;值的地方全部用&lt;code&gt;adb&lt;/code&gt;代替，代码修改如下:&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;ADB_COMMAND&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"adb"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;getAdbLocation&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;toolsDir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getProperty&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"com.android.uiautomator.bindir"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//$NON-NLS-1$&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;toolsDir&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ADB_COMMAND&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;......&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ADB_COMMAND&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;好，这个时候我们再次点击&lt;code&gt;Device screenshot&lt;/code&gt;按钮，就可以像往常一样得到设备的界面了和控件信息了：&lt;/p&gt;

&lt;p&gt;&lt;img src="/photo/2015/3a37fd77c5af548bc238a419675b32e3.png" alt=""&gt;&lt;/p&gt;
&lt;h4&gt;开始调试&lt;/h4&gt;
&lt;p&gt;源码搭建完成，就可以进入主题了，开始研究源码了，在&lt;code&gt;ScreenshotAction&lt;/code&gt;类中的&lt;code&gt;run&lt;/code&gt;方法里打上断点,以&lt;code&gt;Debug As&lt;/code&gt;启动应用程序，然后点击&lt;code&gt;Device screentshot with Compressed&lt;/code&gt;进入&lt;code&gt;Debug&lt;/code&gt;界面。第一行代码自然是我们断点的地方，因为我们主要看&lt;code&gt;dump --compressed&lt;/code&gt;这个功能点，其他地方我就不多做介绍了，我加快速度了，直接进入正题,一路&lt;code&gt;debug&lt;/code&gt;到了&lt;code&gt;UiAutomatorHelper&lt;/code&gt;的静态方法&lt;code&gt;getUiHierarchyFile(IDevice device, File dst, IProgressMonitor monitor, boolean compressed)&lt;/code&gt;中，看重要代码(如果你&lt;code&gt;debug&lt;/code&gt;不过来，你直接把断点打在下面的代码块就行了)：&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;getUiHierarchyFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IDevice&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="n"&gt;dst&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;IProgressMonitor&lt;/span&gt; &lt;span class="n"&gt;monitor&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;compressed&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
         &lt;span class="o"&gt;......&lt;/span&gt;
       &lt;span class="n"&gt;monitor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;subTask&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Taking UI XML snapshot..."&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;compressed&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
            &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%s %s --compressed %s"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UIAUTOMATOR&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;UIAUTOMATOR_DUMP_COMMAND&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;UIDUMP_DEVICE_PATH&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%s %s %s"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UIAUTOMATOR&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;UIAUTOMATOR_DUMP_COMMAND&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;UIDUMP_DEVICE_PATH&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;CountDownLatch&lt;/span&gt; &lt;span class="n"&gt;commandCompleteLatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;CountDownLatch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;CountDownLatch&lt;/span&gt; &lt;span class="n"&gt;commandCompleteLatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;CountDownLatch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;executeShellCommand&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;CollectingOutputReceiver&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;commandCompleteLatch&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
            &lt;span class="n"&gt;commandCompleteLatch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;await&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TimeUnit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;SECONDS&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// ignore exceptions while deleting stale files&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;......&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;执行的命令我们得到&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;uiautomator&lt;/span&gt; &lt;span class="n"&gt;dump&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;compressed&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;uidump&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;xml&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;那第一个问题解决了，就是这是一个新命令&lt;code&gt;dump --compressed&lt;/code&gt;(之前没用过，不知道是不是最新的)。我们获得的简洁版的控件信息也不是在本地优化的，是直接在&lt;code&gt;server&lt;/code&gt;端传过来就是这样的，这样速度会提高不少。&lt;/p&gt;
&lt;h4&gt;adb命令实验&lt;/h4&gt;&lt;pre class="highlight plaintext"&gt;C:\Users\hui.qian&amp;gt;adb shell /system/bin/uiautomator dump --compressed /data/loca
l/tmp/uidump.xml
UI hierchary dumped to: /data/local/tmp/uidump.xml

C:\Users\hui.qian&amp;gt;adb pull /data/local/tmp/uidump.xml c:\
394 KB/s (6308 bytes in 0.015s)
C:\Users\hui.qian&amp;gt;adb shell /system/bin/uiautomator dump /data/local/tmp/uidump.
xml
UI hierchary dumped to: /data/local/tmp/uidump.xml

C:\Users\hui.qian&amp;gt;adb pull /data/local/tmp/uidump.xml c:\1.xml
1363 KB/s (21778 bytes in 0.015s)

&lt;/pre&gt;

&lt;p&gt;将上面2个文件进行比较就会发现简洁不少。&lt;/p&gt;</description>
      <author>doctorq</author>
      <pubDate>Thu, 15 Jan 2015 11:34:25 +0800</pubDate>
      <link>http://testerhome.com/topics/1871</link>
      <guid>http://testerhome.com/topics/1871</guid>
    </item>
    <item>
      <title>适合新手的 gradle 自学教程合集</title>
      <description>&lt;h4&gt;我错过了ant时代，我也错过了maven时代，但我不能错过gradle时代！&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://blog.csdn.net/itfootball/article/details/42153831" target="_blank"&gt;gradle学习(1)-helloworld &lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/42200245" target="_blank"&gt;gradle学习(2)-基础语法 &lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/42213127" target="_blank"&gt;gradle学习(3)-基础认识 &lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/42214333" target="_blank"&gt;gradle学习(4)-构建java项目 &lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/42401267" target="_blank"&gt;gradle学习(5)-创建eclipse项目 &lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/42467807" target="_blank"&gt;gradle学习(6)-依赖管理 &lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/42530959" target="_blank"&gt;gradle学习(7)-groovy &lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/42552187" target="_blank"&gt;gradle学习(8)-gradle的命令行 &lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/42558993" target="_blank"&gt;gradle学习(9)-获取build相关信息 &lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/42562827" target="_blank"&gt;gradle学习(10)-gui &lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/42563705" target="_blank"&gt;gradle学习(11)-编写构建脚本 &lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/42596917" target="_blank"&gt;gradle学习(12)-groovy一些基础语法 &lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/42611039" target="_blank"&gt;gradle学习(13)-有的没的 &lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/42617719" target="_blank"&gt;gradle学习(14)-任务 &lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/42638123" target="_blank"&gt;gradle学习(15)-任务 &lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/42642813" target="_blank"&gt;gradle学习(16)-操作文件 &lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/42651705" target="_blank"&gt;gradle学习(17)-被合并的ant &lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/42656405" target="_blank"&gt;gradle学习(18)-ant的属性 &lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/42659033" target="_blank"&gt;gradle学习(19)-log系统 &lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/42672271" target="_blank"&gt;gradle学习(20)-详解java插件 &lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/42710653" target="_blank"&gt;gradle学习(21)-在eclipse中构建java项目 &lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/42750749" target="_blank"&gt;gradle复习(1)-2种定义任务方式的区别&lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/42918445" target="_blank"&gt;gradle复习(2)-eclipse中依赖问题&lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/42919577" target="_blank"&gt;gradle复习(3)-使用TestNG&lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/42963987" target="_blank"&gt;gradle复习(4)-eclipse中Cannot find System Java Compiler 问题&lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/42967697" target="_blank"&gt;gradle复习(5)-Test remote debug&lt;/a&gt;&lt;/p&gt;</description>
      <author>doctorq</author>
      <pubDate>Wed, 14 Jan 2015 20:25:09 +0800</pubDate>
      <link>http://testerhome.com/topics/1867</link>
      <guid>http://testerhome.com/topics/1867</guid>
    </item>
    <item>
      <title>Appium Wrapper for Java</title>
      <description>&lt;p&gt;基于Appium的移动测试框架，Appium的Wrapper很关键。Talk is cheap, Java版本代码如下：&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ctrip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lanucher&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * A service wrapper for Appium Server
 * 
 * @author ltyao
 *
 */&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AppiumServer&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Logger&lt;/span&gt; &lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LoggerFactory&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getLogger&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AppiumServer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;START_TIMEOUT_MILLISECONDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30000&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;HttpClient&lt;/span&gt; &lt;span class="n"&gt;httpClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HttpClients&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createDefault&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;STATUS_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"/wd/hub/status"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"/wd/hub"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"localhost"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// private volatile boolean started = false;&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Process&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;appiumPort&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;bootstrapPort&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;selendroidPort&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;chromeDriverPort&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;robotPort&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;appiumLog&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;AndroidDevice&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;AppiumServer&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;AppiumServer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AndroidDevice&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;device&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;stopAppium&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;WinProcess&lt;/span&gt; &lt;span class="n"&gt;winp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;WinProcess&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;warn&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"try to kill process {} Recursively"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;winp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getPid&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
            &lt;span class="n"&gt;winp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;killRecursively&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;warn&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"stopAppium"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;


    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;startAppium&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;startAppium&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;START_TIMEOUT_MILLISECONDS&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;startAppium&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;buildCmds&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;ProcessBuilder&lt;/span&gt; &lt;span class="n"&gt;pb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ProcessBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;redirectErrorStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"start appium with {}"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;

        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Runnable&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nd"&gt;@Override&lt;/span&gt;
            &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

                    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;exitvalue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;waitFor&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

                    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;warn&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"appium server exitvalue {}"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exitvalue&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;warn&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"startAppium"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;

            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}).&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;currentTimeMillis&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;isRunning&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;currentTimeMillis&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stopAppium&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;AppiumTimeoutException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Appium can't be lanuched in "&lt;/span&gt;
                        &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;milliseconds&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;" seconds"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;isRunning&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;warn&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"started appium server {}"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;restartAppium&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stopAppium&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;startAppium&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;isRunning&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;URI&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;URIBuilder&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;setScheme&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"http"&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;setHost&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setPort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;appiumPort&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;setPath&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;STATUS_PATH&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

            &lt;span class="n"&gt;HttpGet&lt;/span&gt; &lt;span class="n"&gt;httpget&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;HttpResponse&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;httpget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;HttpGet&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;httpClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;execute&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;httpget&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;HttpEntity&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getEntity&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;rs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EntityUtils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;JsonElement&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JsonParser&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAsJsonObject&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"status"&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;getAsInt&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// logger.warn("isRunning", e);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt; &lt;span class="n"&gt;getURL&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;URI&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;URIBuilder&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;setScheme&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"http"&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;setHost&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setPort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;appiumPort&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;setPath&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toURL&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;URISyntaxException&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;MalformedURLException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;CapException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"getURL"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;}&lt;/span&gt;


    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;getPid&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;WinProcess&lt;/span&gt; &lt;span class="n"&gt;winp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;WinProcess&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;winp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getPid&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;warn&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * need to be checked
     * 
     * @return
     */&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;buildCmds&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

        &lt;span class="n"&gt;appiumPort&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AvailablePortFinder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getNextAvailable&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;chromeDriverPort&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AvailablePortFinder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getNextAvailable&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;bootstrapPort&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AvailablePortFinder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getNextAvailable&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;selendroidPort&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AvailablePortFinder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getNextAvailable&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;LinkedList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"appium.cmd"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"--port=%d"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;appiumPort&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"--chromedriver-port=%d"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chromeDriverPort&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"--selendroid-port=%d"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;selendroidPort&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"--bootstrap-port=%d"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bootstrapPort&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;appiumLog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Environment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;appiumLog&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSerialNumber&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;qappiumLog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StringUtils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;quoteArgument&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;appiumLog&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"--log=%s"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;qappiumLog&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"--log-timestamp"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// switch (config.getDriverType()) {&lt;/span&gt;
        &lt;span class="c1"&gt;// case Selendroid:&lt;/span&gt;
        &lt;span class="c1"&gt;// selendroidPort = AvailablePortFinder.getNextAvailable();&lt;/span&gt;
        &lt;span class="c1"&gt;// cmds.add(String.format("--selendroid-port=%d", selendroidPort));&lt;/span&gt;
        &lt;span class="c1"&gt;//&lt;/span&gt;
        &lt;span class="c1"&gt;// break;&lt;/span&gt;
        &lt;span class="c1"&gt;// case ChromeDriver:&lt;/span&gt;
        &lt;span class="c1"&gt;// chromeDriverPort = AvailablePortFinder.getNextAvailable();&lt;/span&gt;
        &lt;span class="c1"&gt;// cmds.add(String.format("--chromedriver-port=%d", chromeDriverPort));&lt;/span&gt;
        &lt;span class="c1"&gt;//&lt;/span&gt;
        &lt;span class="c1"&gt;// default:&lt;/span&gt;
        &lt;span class="c1"&gt;// break;&lt;/span&gt;
        &lt;span class="c1"&gt;// }&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;getAppiumPort&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;appiumPort&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;setAppiumPort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;appiumPort&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;appiumPort&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;appiumPort&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;getBootstrapPort&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;bootstrapPort&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;setBootstrapPort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;bootstrapPort&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bootstrapPort&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bootstrapPort&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;getSelendroidPort&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;selendroidPort&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;setSelendroidPort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;selendroidPort&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;selendroidPort&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;selendroidPort&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;getChromeDriverPort&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;chromeDriverPort&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;setChromeDriverPort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;chromeDriverPort&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;chromeDriverPort&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;chromeDriverPort&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;getRobotPort&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;robotPort&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;setRobotPort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;robotPort&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;robotPort&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;robotPort&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;getAppiumLog&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;appiumLog&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Device&lt;/span&gt; &lt;span class="n"&gt;getDevice&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;setDevice&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AndroidDevice&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;device&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"AppiumServer [pid="&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;getPid&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;",ip="&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;", appiumPort="&lt;/span&gt;
                &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;appiumPort&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;", bootstrapPort="&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;bootstrapPort&lt;/span&gt;
                &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;", selendroidPort="&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;selendroidPort&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;", chromeDriverPort="&lt;/span&gt;
                &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;chromeDriverPort&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;", appiumLog="&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;appiumLog&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"]"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;</description>
      <author>cosyman</author>
      <pubDate>Wed, 14 Jan 2015 12:07:59 +0800</pubDate>
      <link>http://testerhome.com/topics/1864</link>
      <guid>http://testerhome.com/topics/1864</guid>
    </item>
    <item>
      <title>CTS 设备管理之设备分类</title>
      <description>&lt;p&gt;&lt;a href="http://testerhome.com/topics/1858" target="_blank"&gt;上一篇文章&lt;/a&gt;已经讲了cts如何自动检测到设备，效果就是无需我们再去调用&lt;code&gt;ADB&lt;/code&gt;的&lt;code&gt;getIDevice()&lt;/code&gt;得到设备,利用的是ADB中提供的观察者模式做到了这一点，那么得到设备后我们如何对这些设备进行管理的呢？&lt;/p&gt;
&lt;h4&gt;设备分类&lt;/h4&gt;
&lt;p&gt;cts中将设备分为3种状态：处于验证中的设备，可用设备，执行任务的设备。这三种状态的设备分别用3个集合保存：&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;span class="c1"&gt;//处于验证中的设备集合&lt;/span&gt;
&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IDeviceStateMonitor&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mCheckDeviceMap&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//可用设备的集合&lt;/span&gt;
&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;ConditionPriorityBlockingQueue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IDevice&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mAvailableDeviceQueue&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//执行任务的设备集合&lt;/span&gt;
&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IManagedTestDevice&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mAllocatedDeviceMap&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;h4&gt;1.处于验证中的设备集合&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;mCheckDeviceMap&lt;/code&gt;是一个&lt;code&gt;Map&lt;/code&gt;，&lt;code&gt;key&lt;/code&gt;值表示设备的&lt;code&gt;SN&lt;/code&gt;号，&lt;code&gt;value&lt;/code&gt;值表示当前设备的状态监听器对象&lt;code&gt;IDeviceStateMonitor&lt;/code&gt;(以后会讲到)。当一个新设备被检测的时候会首先放到该Map中，然后会调用&lt;code&gt;IDeviceStateMonitor&lt;/code&gt;.&lt;code&gt;waitForDeviceShell(final long waitTime)&lt;/code&gt;来对设备进行一个扫描，扫描通过以后，就会将设备添加到可用设备集合&lt;code&gt;mAvailableDeviceQueue&lt;/code&gt;中。但是不管扫描成不成功，经过检测步骤后，都会从&lt;code&gt;mCheckDeviceMap&lt;/code&gt;设备集合中删除该设备。所以可以说该容器这是临时存放设备用的，为的是对设备进行验证是否可用，就像机场里过安检一样。&lt;/p&gt;
&lt;h4&gt;2.可用的设备集合&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;mAvailableDeviceQueue&lt;/code&gt;是一个&lt;a href="http://baike.baidu.com/view/1267829.htm" target="_blank"&gt;优先队列&lt;/a&gt;，且是线程安全的，这是&lt;code&gt;cts&lt;/code&gt;自定义的一个队列数据结构。你可以传入条件选择设备，比如按设备号选择，按平台号选择都可以。返回的是一个&lt;code&gt;IDevice&lt;/code&gt;对象，这是原生的&lt;code&gt;ADB&lt;/code&gt;中定义的接口类。该集合是一个中间集合，它从&lt;code&gt;mCheckDeviceMap&lt;/code&gt;中得到集合，然后等到用户使用设备后，就将集合中的某个元素"送给"了执行任务的设备集合&lt;code&gt;mAllocatedDeviceMap&lt;/code&gt;。&lt;/p&gt;
&lt;h4&gt;3.执行任务的设备集合&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;mAllocatedDeviceMap&lt;/code&gt;集合是一个Map，&lt;code&gt;key&lt;/code&gt;值表示设备的&lt;code&gt;SN&lt;/code&gt;号，&lt;code&gt;value&lt;/code&gt;值表示的是cts自己定义的设备对象的接口&lt;code&gt;IManagedTestDevice&lt;/code&gt;。当用户选择一个可用设备后，是从可用设备集合&lt;code&gt;mAvailableDeviceQueue&lt;/code&gt;中得到了一个&lt;code&gt;IDevice&lt;/code&gt;,然后&lt;code&gt;cts&lt;/code&gt;使用外观模式，将其封装到了继承自&lt;code&gt;IManagedTestDevice&lt;/code&gt;接口的对象&lt;code&gt;TestDevice&lt;/code&gt;(这个类很重要，以后会单独讲)中，里面有很多关于设备的方法可以被调用，那么用户实际能操作就是这个&lt;code&gt;TestDevice&lt;/code&gt;类。等待任务完成后，该设备将“送还”到可用设备集合中，这只是一个借用的过程，用完了就还给了它，这样的话这个设备还可以继续执行其他任务。&lt;/p&gt;
&lt;h4&gt;4.总结&lt;/h4&gt;
&lt;p&gt;通过上面的介绍，我们用一幅图来描述一下3个集合之间的关系。&lt;/p&gt;

&lt;p&gt;&lt;img src="/photo/2015/40f070b5d28e2a7fc7f89d3a43850be6.png" alt=""&gt;&lt;/p&gt;
&lt;h4&gt;检测设备后分类&lt;/h4&gt;
&lt;p&gt;终于到了揭晓庐山真面目的时候，以上的种种解释，包括第一篇文章的铺垫，都是为了下面的内容铺垫的，讲代码的东西就是这么的麻烦。先上代码：&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ManagedDeviceListener&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;IDeviceChangeListener&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

        &lt;span class="cm"&gt;/**
         * {@inheritDoc}
         */&lt;/span&gt;
        &lt;span class="nd"&gt;@Override&lt;/span&gt;
        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;deviceChanged&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IDevice&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;changeMask&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;IManagedTestDevice&lt;/span&gt; &lt;span class="n"&gt;testDevice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mAllocatedDeviceMap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSerialNumber&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;changeMask&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;IDevice&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;CHANGE_STATE&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testDevice&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;TestDeviceState&lt;/span&gt; &lt;span class="n"&gt;newState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TestDeviceState&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getStateByDdms&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getState&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
                    &lt;span class="n"&gt;testDevice&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setDeviceState&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newState&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mCheckDeviceMap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;containsKey&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSerialNumber&lt;/span&gt;&lt;span class="o"&gt;()))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;IDeviceStateMonitor&lt;/span&gt; &lt;span class="n"&gt;monitor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mCheckDeviceMap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSerialNumber&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
                    &lt;span class="n"&gt;monitor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setState&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestDeviceState&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getStateByDdms&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getState&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;mAvailableDeviceQueue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getState&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;IDevice&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;DeviceState&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ONLINE&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;checkAndAddAvailableDevice&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="cm"&gt;/**
         * {@inheritDoc}
         */&lt;/span&gt;
        &lt;span class="nd"&gt;@Override&lt;/span&gt;
        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;deviceConnected&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IDevice&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;CLog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Detected device connect %s, id %d"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSerialNumber&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hashCode&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
            &lt;span class="n"&gt;IManagedTestDevice&lt;/span&gt; &lt;span class="n"&gt;testDevice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mAllocatedDeviceMap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSerialNumber&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testDevice&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isValidDeviceSerial&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSerialNumber&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getState&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;IDevice&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;DeviceState&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ONLINE&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;checkAndAddAvailableDevice&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mCheckDeviceMap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;containsKey&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSerialNumber&lt;/span&gt;&lt;span class="o"&gt;()))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;IDeviceStateMonitor&lt;/span&gt; &lt;span class="n"&gt;monitor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mCheckDeviceMap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSerialNumber&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
                    &lt;span class="n"&gt;monitor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setState&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestDeviceState&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getStateByDdms&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getState&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// this device is known already. However DDMS will allocate a&lt;/span&gt;
                &lt;span class="c1"&gt;// new IDevice, so need&lt;/span&gt;
                &lt;span class="c1"&gt;// to update the TestDevice record with the new device&lt;/span&gt;
                &lt;span class="n"&gt;CLog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Updating IDevice for device %s"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSerialNumber&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
                &lt;span class="n"&gt;testDevice&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setIDevice&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;TestDeviceState&lt;/span&gt; &lt;span class="n"&gt;newState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TestDeviceState&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getStateByDdms&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getState&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
                &lt;span class="n"&gt;testDevice&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setDeviceState&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newState&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;isValidDeviceSerial&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;serial&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;serial&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;serial&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"?"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="cm"&gt;/**
         * {@inheritDoc}
         */&lt;/span&gt;
        &lt;span class="nd"&gt;@Override&lt;/span&gt;
        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;deviceDisconnected&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IDevice&lt;/span&gt; &lt;span class="n"&gt;disconnectedDevice&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mAvailableDeviceQueue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;remove&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;disconnectedDevice&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;CLog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Removed disconnected device %s from available queue"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;disconnectedDevice&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSerialNumber&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;IManagedTestDevice&lt;/span&gt; &lt;span class="n"&gt;testDevice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mAllocatedDeviceMap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;disconnectedDevice&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSerialNumber&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testDevice&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;testDevice&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setDeviceState&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestDeviceState&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;NOT_AVAILABLE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mCheckDeviceMap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;containsKey&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;disconnectedDevice&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSerialNumber&lt;/span&gt;&lt;span class="o"&gt;()))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;IDeviceStateMonitor&lt;/span&gt; &lt;span class="n"&gt;monitor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mCheckDeviceMap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;disconnectedDevice&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSerialNumber&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
                &lt;span class="n"&gt;monitor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setState&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestDeviceState&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;NOT_AVAILABLE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;updateDeviceMonitor&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

&lt;/pre&gt;

&lt;p&gt;上面的代码我在第一篇文章中有涉及，只是那个时候我把三个监听方法里的具体实现给隐藏了，现在终于把它展现出来了。&lt;/p&gt;
&lt;h4&gt;deviceChanged方法&lt;/h4&gt;
&lt;p&gt;该方法会在设备连接的时候调用，但是我们做了个判断，就是设备状态的改变，那就说明该设备连接前&lt;code&gt;ADB&lt;/code&gt;已经知道了该设备的存在，只是它与之前的状态发生了变化，所以在设备第一次连接的时候，该方法里的代码块是不会被调用的。那么再具体说说操作步骤：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;1&lt;/code&gt;.首先判断设备的改变是否是状态的改变，因为设备的变化很有多种，我们需要关心的设备于PC连接状态的改变，所以需要做判断。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;2&lt;/code&gt;.然后从&lt;code&gt;mAllocatedDeviceMap&lt;/code&gt;集合中尝试获得发生改变的设备，这一步是为了检查是否会影响到执行任务的设备。因为在任务执行过程中，不是每时每刻都能去检测状态，所以cts采用的是被动判断，如果状态发生改变，需要通知正在执行任务的设备监听器，由监听器去做相应的处理。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;3&lt;/code&gt;.如果确定状态发生改变的设备是正在执行任务的设备，就需要将其状态设置为新状态。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;4&lt;/code&gt;.如果不是正在执行任务的设备，那么再去验证是否属于另外2个集合中的设备。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;5&lt;/code&gt;.如果是检测集合&lt;code&gt;mCheckDeviceMap&lt;/code&gt;中的元素，那么也要重新设置设备状态，不过这个时候是从检测设备集合中得到设备再改变它的状态。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;6&lt;/code&gt;.如果改变的设备既不是执行任务的设备，也不是检测中的设备，这个时候我们要判断是否是新设备，这个时候可能有人会有疑问？为什么不判断是否存在于可分配设备中呢？这得从&lt;code&gt;deviceChanged&lt;/code&gt;的调用机制来说，&lt;code&gt;deviceChanged&lt;/code&gt;只在设备连接进来的时候会调用，设备掉线的时候该方法不会被调用，那么自然这个里面无需判断是否是可分配设备中。只需要判断传进来的&lt;code&gt;IDevice&lt;/code&gt;的状态是否在线且不在可分配设备列表中，这个时候就要按新设备来处理啦。另外判断是否在该集合中是需要在&lt;code&gt;deviceDisconnected&lt;/code&gt;中判断的。&lt;/p&gt;
&lt;h4&gt;deviceConnected方法&lt;/h4&gt;
&lt;p&gt;这个方法会在有设备连接的时候调用，不管是新设备还是旧设备。它的处理步骤如下：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;1&lt;/code&gt;.首先判断该设备是否正在执行任务，如果正在执行任务，&lt;code&gt;ok&lt;/code&gt;！我们需要更新该设备的状态。如果不是进入第二步:&lt;br&gt;
&lt;code&gt;2&lt;/code&gt;.如果在线且通过判断其&lt;code&gt;SN&lt;/code&gt;号是可用的，如果条件不通过，跳到第三步，如果通过的话，这个时候需要进行操作判断是否可以放到可用设备集合中。&lt;br&gt;
&lt;code&gt;3&lt;/code&gt;.是否存在于检测设备集合中，如果存在就将其设备更新下。&lt;/p&gt;
&lt;h4&gt;deviceDisconnected方法&lt;/h4&gt;
&lt;p&gt;这个方法会在设备离线的时候调用，&lt;br&gt;
&lt;code&gt;1&lt;/code&gt;.首先试着从可用集合中删除该设备，然后进入第二步。&lt;br&gt;
&lt;code&gt;2&lt;/code&gt;.剩下的处理方式和上面的&lt;code&gt;deviceConnected&lt;/code&gt;一样。&lt;/p&gt;
&lt;h4&gt;总结&lt;/h4&gt;
&lt;p&gt;设备管理的复杂性较之我所讲的，我所能说的也只是皮毛，希望对此有兴趣研究研究源码。提示一下，在研究源码之前先了解一下23种设计模式中常用模式，对你的理解会很有帮助。&lt;/p&gt;</description>
      <author>doctorq</author>
      <pubDate>Wed, 14 Jan 2015 12:06:56 +0800</pubDate>
      <link>http://testerhome.com/topics/1863</link>
      <guid>http://testerhome.com/topics/1863</guid>
    </item>
    <item>
      <title>CTS 设备管理之自动检测设备</title>
      <description>&lt;h4&gt;感慨&lt;/h4&gt;
&lt;p&gt;经过三个月的蹉跎，项目终于可以推出1.0版本。中间经历过很多坑，中途我们的主程离职走了，我硬着头皮接替了他的工作，从cts框架的启动开始，一点一点地研究源码，debug来debug去，一点一点的理解其中的思想，到现在已经能在cts的框架的基础上做二次开发，能简单的认识到cts处理方式。很有幸我一进入自动化领域首先认识的是cts这套框架，随着研究的深入越来越佩服开发这套框架的google工程师们。我想说的是，做自动化框架开发的人都应该好好研究这个框架，肯定会受益匪浅。其实在学习的时候，我就已经写过好几篇文章，我也将其整理成合集，放到了&lt;a href="http://testerhome.com/topics/1808" target="_blank"&gt;testerhome&lt;/a&gt;上。但那个时候毕竟还是懵懂时期，也没有跳出框架从全局来考虑，现在刚好有点时间，慢慢的把这几个月的研究成果总结一下。&lt;/p&gt;
&lt;h4&gt;设备管理的重要性&lt;/h4&gt;
&lt;p&gt;做Android自动化工具开发的都了解，你首先要解决的问题是设备管理问题，在支持 Mult Device的工具中尤其重要。新设备的加入、已有设备的断线离线，在执行case的过程中遇到设备离线了如何去恢复等等，都是在设备管理范畴之内的。那么cts是如何做到的？&lt;/p&gt;
&lt;h4&gt;1.包裹ADB&lt;/h4&gt;&lt;pre class="highlight java"&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;android&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tradefed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;device&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.android.ddmlib.AndroidDebugBridge&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.android.ddmlib.AndroidDebugBridge.IDeviceChangeListener&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.android.ddmlib.IDevice&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * A wrapper that directs {@link IAndroidDebugBridge} calls to the 'real'
 * {@link AndroidDebugBridge}.
 */&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AndroidDebugBridgeWrapper&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;IAndroidDebugBridge&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;AndroidDebugBridge&lt;/span&gt; &lt;span class="n"&gt;mAdbBridge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Creates a {@link AndroidDebugBridgeWrapper}.
     */&lt;/span&gt;
    &lt;span class="n"&gt;AndroidDebugBridgeWrapper&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * {@inheritDoc}
     */&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IDevice&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;getDevices&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mAdbBridge&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;IllegalStateException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"getDevices called before init"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mAdbBridge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getDevices&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * {@inheritDoc}
     */&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;addDeviceChangeListener&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IDeviceChangeListener&lt;/span&gt; &lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;AndroidDebugBridge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addDeviceChangeListener&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * {@inheritDoc}
     */&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;removeDeviceChangeListener&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IDeviceChangeListener&lt;/span&gt; &lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;AndroidDebugBridge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;removeDeviceChangeListener&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * {@inheritDoc}
     */&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;clientSupport&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;adbOsLocation&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;AndroidDebugBridge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;init&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clientSupport&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;mAdbBridge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AndroidDebugBridge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createBridge&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;adbOsLocation&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * {@inheritDoc}
     */&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;terminate&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;AndroidDebugBridge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;terminate&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * {@inheritDoc}
     */&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;disconnectBridge&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;AndroidDebugBridge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;disconnectBridge&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;这里实际上用到了代理模式。cts中自定义的类&lt;code&gt;AndroidDebugBridgeWrapper&lt;/code&gt;包裹了&lt;code&gt;AndroidDebugBridge&lt;/code&gt;，我们只需要和&lt;code&gt;AndroidDebugBridgeWrapper&lt;/code&gt;交互就行了。然后在&lt;code&gt;AndroidDebugBridge&lt;/code&gt;的基础上自定义了一些方法。继承的方法中重要的是&lt;code&gt;addDeviceChangeListener&lt;/code&gt;和&lt;code&gt;removeDeviceChangeListener&lt;/code&gt;这两个方法，待会我们就要用到。&lt;/p&gt;
&lt;h4&gt;2.启动ADB&lt;/h4&gt;&lt;pre class="highlight java"&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DeviceManager&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;IDeviceManager&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="o"&gt;......&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;IAndroidDebugBridge&lt;/span&gt; &lt;span class="n"&gt;mAdbBridge&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;ManagedDeviceListener&lt;/span&gt; &lt;span class="n"&gt;mManagedDeviceListener&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;......&lt;/span&gt;
    &lt;span class="cm"&gt;/**
     * The DeviceManager should be retrieved from the {@link GlobalConfiguration}
     */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;DeviceManager&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Initialize the device manager. This must be called once and only once before any other
     * methods are called.
     */&lt;/span&gt;
    &lt;span class="kd"&gt;synchronized&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IDeviceSelection&lt;/span&gt; &lt;span class="n"&gt;globalDeviceFilter&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IDeviceMonitor&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;globalDeviceMonitors&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IManagedTestDeviceFactory&lt;/span&gt; &lt;span class="n"&gt;deviceFactory&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;......&lt;/span&gt;
        &lt;span class="n"&gt;mAdbBridge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;createAdbBridge&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;mManagedDeviceListener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ManagedDeviceListener&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;......&lt;/span&gt;
        &lt;span class="n"&gt;mAdbBridge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addDeviceChangeListener&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mManagedDeviceListener&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
       &lt;span class="o"&gt;......&lt;/span&gt;
        &lt;span class="n"&gt;mAdbBridge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;init&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="cm"&gt;/* client support */&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"adb"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;......&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="cm"&gt;/**
     * Creates the {@link IAndroidDebugBridge} to use.
     * &amp;lt;p/&amp;gt;
     * Exposed so tests can mock this.
     * @returns the {@link IAndroidDebugBridge}
     */&lt;/span&gt;
    &lt;span class="kd"&gt;synchronized&lt;/span&gt; &lt;span class="n"&gt;IAndroidDebugBridge&lt;/span&gt; &lt;span class="n"&gt;createAdbBridge&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;AndroidDebugBridgeWrapper&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/pre&gt;

&lt;p&gt;在&lt;code&gt;DeviceManage&lt;/code&gt;类的&lt;code&gt;init&lt;/code&gt;方法中，首先通过&lt;code&gt;createAdbBridge()&lt;/code&gt;方法创建一个 &lt;code&gt;IAndroidDebugBridge&lt;/code&gt;对象，其实质是刚才定义的&lt;code&gt;AndroidDebugBridgeWrapper&lt;/code&gt;对象。这样的话我们就得到了该对象的一个实例，接着我们调用了该实例的&lt;code&gt;init&lt;/code&gt;方法(其实有2行代码我故意忽略了，后面会隆重登场)，这样&lt;code&gt;ADB&lt;/code&gt;的初始化工作就完成了。&lt;/p&gt;
&lt;h4&gt;3.状态监听器&lt;/h4&gt;&lt;pre class="highlight java"&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ManagedDeviceListener&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;IDeviceChangeListener&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

        &lt;span class="cm"&gt;/**
         * {@inheritDoc}
         */&lt;/span&gt;
        &lt;span class="nd"&gt;@Override&lt;/span&gt;
        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;deviceChanged&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IDevice&lt;/span&gt; &lt;span class="n"&gt;idevice&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;changeMask&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;   
        &lt;span class="o"&gt;......&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="cm"&gt;/**
         * {@inheritDoc}
         */&lt;/span&gt;
        &lt;span class="nd"&gt;@Override&lt;/span&gt;
        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;deviceConnected&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IDevice&lt;/span&gt; &lt;span class="n"&gt;idevice&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
        &lt;span class="o"&gt;......&lt;/span&gt;        
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="cm"&gt;/**
         * {@inheritDoc}
         */&lt;/span&gt;
        &lt;span class="nd"&gt;@Override&lt;/span&gt;
        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;deviceDisconnected&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IDevice&lt;/span&gt; &lt;span class="n"&gt;disconnectedDevice&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
         &lt;span class="o"&gt;......&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;在&lt;code&gt;DeviceManager&lt;/code&gt;类中定义了一个私有类&lt;code&gt;ManagedDeviceListener&lt;/code&gt;，该类实现了&lt;code&gt;ADB&lt;/code&gt;中的接口&lt;code&gt;IDeviceChangeListener&lt;/code&gt;。该接口实际上是观察者模式中的一个抽象观察者，我们定义的&lt;code&gt;ManagedDeviceListener&lt;/code&gt;类是一个具体观察者。当我们注册为设备状态的观察者后，设备状态发生变化后，我们会被通知到。这个时候我们隆重请出刚才我们忽略的2行代码：&lt;/p&gt;
&lt;pre class="highlight java"&gt;        &lt;span class="n"&gt;mManagedDeviceListener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ManagedDeviceListener&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;......&lt;/span&gt;
        &lt;span class="n"&gt;mAdbBridge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addDeviceChangeListener&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mManagedDeviceListener&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;这两行代码首先初始化了一个设备状态的具体观察者对象的实例，然后将其添加到通知列表中，这个时候&lt;code&gt;ADB&lt;/code&gt;设备发生改变后，就会通知我们的对象，其中相应的三个方法&lt;code&gt;deviceChanged&lt;/code&gt;,&lt;code&gt;deviceConnected&lt;/code&gt;,&lt;code&gt;deviceDisconnected&lt;/code&gt;会被调用，这个时候我们就可以通过一些处理得到新加入的设备，或者已有设备中离线的设备，然后将其删除。这样我们就能很好的监听着设备状态的改变。&lt;/p&gt;
&lt;h4&gt;4.得到设备&lt;/h4&gt;
&lt;p&gt;既然我们能准确的监听着设备状态的改变，我们就要用一个(或许是多个)容器去保存这些设备。具体的操作流程我觉得单独写一篇文章来讲比较好，这样才能对得起它良好的设计。&lt;/p&gt;</description>
      <author>doctorq</author>
      <pubDate>Tue, 13 Jan 2015 23:02:38 +0800</pubDate>
      <link>http://testerhome.com/topics/1858</link>
      <guid>http://testerhome.com/topics/1858</guid>
    </item>
    <item>
      <title>小而美的 ghost driver</title>
      <description>&lt;p&gt;做过selenium自动化项目的同学应该都遇到过这样的问题：测试用例太多，运行速度过慢导致团队成员怨声载道。&lt;/p&gt;

&lt;p&gt;于是便有了selenium grid和多线程运行selenium测试用例的方法。这些方法各有利弊这里就不一一列举了。但总的来说，如果浏览器运行的速度足够快，那么多线程并发时的用例执行速度应该是可以满足实际项目需求的。&lt;/p&gt;

&lt;p&gt;再想象一下这样的情景：如果你手头的机器是没有gui的(这是可能的，我以前的几台centos的server根本就没有ui)，如何在这样的headless的机器上运行selenium用例呢？&lt;/p&gt;

&lt;p&gt;答案是可以用selenium自带的&lt;a href="https://code.google.com/p/selenium/wiki/HtmlUnitDriver" target="_blank"&gt;HtmlUnitDriver&lt;/a&gt;。不过可惜的是HtmlUnitDriver对js的支持不是特别完美，所以该方案可行但是不完善，不是特别适合用于真实项目。&lt;/p&gt;

&lt;p&gt;好在现在有了&lt;a href="http://phantomjs.org/" target="_blank"&gt;phantomjs&lt;/a&gt;和ghostdriver，我们可以用ghostdriver来运行selenium测试用例。所有的用例都是在没有gui的浏览器里运行，运行速度可以得到极大的提升。再加上phantomjs是基于webkit的，所以ghostdriver完全可以模拟chrome和safari的行为。&lt;/p&gt;

&lt;p&gt;在我的macbookpro上，chromedriver的表现不是特别令人满意，而我又没有安装firefox和safari driver，所以对于一般的页面(js交互不是特别多的页面)，我都是用ghost driver在调试问题，快速而简便。最主要是没有真实的浏览器弹出来，不会像chromedriver那样经常意外退出造成内存泄漏，也不会像firefox那样运行缓慢。&lt;/p&gt;

&lt;p&gt;下面简单介绍一下ghost driver 与selenium合体的过程。&lt;/p&gt;
&lt;h4&gt;背景知识&lt;/h4&gt;
&lt;p&gt;下面的内容要求你已经成功的安装好python的selenim binding。如果你有pip，直接运行 &lt;code&gt;pip install selenium&lt;/code&gt;即可。如果被墙，请使用豆瓣源。&lt;/p&gt;

&lt;p&gt;或者成功的安装好ruby的watir-webdriver。如果你有gem，直接运行 &lt;code&gt;gem install watir-webdriver&lt;/code&gt;即可。如果被墙，请使用&lt;a href="http://ruby.taobao.org" target="_blank"&gt;淘宝源&lt;/a&gt;。&lt;/p&gt;
&lt;h4&gt;安装ghost driver&lt;/h4&gt;
&lt;p&gt;ghost driver现在已经跟phantomjs合体，所以安装好最新版本的phantomjs就等于安装好了ghostdriver。&lt;/p&gt;

&lt;p&gt;在&lt;a href="http://phantomjs.org/download.html" target="_blank"&gt;这里&lt;/a&gt;下载对应平台的phantomjs。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;首先解压下载好的zip文件或tar文件(linux only);&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;windows用户将解压过后的得到的phantomjs.exe文件加入系统的PATH中。简单点说如果你使用pyhon，就把phantomjs.exe放到python的安装目录下，ruby用户放到ruby/bin目录下；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;mac和linux用户可以把解压后得到的phantomjs建个软链到/usr/local/bin目录下。&lt;code&gt;ln -s /where/is/phantomjs /usr/local/bin/phantomjs&lt;/code&gt;；&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;快速开始&lt;/h4&gt;
&lt;p&gt;python用户新建itest.py文件然后敲入下面的内容&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;

&lt;span class="n"&gt;dr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PhantomJS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'phantomjs'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;dr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'http://baidu.info'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;dr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;dr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_url&lt;/span&gt;
&lt;span class="n"&gt;dr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;watir-webdriver用户新建文件itest.rb然后敲入下面的内容&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'watir-webdriver'&lt;/span&gt;

&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Watir&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="ss"&gt;:phantomjs&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;goto&lt;/span&gt; &lt;span class="s1"&gt;'www.baidu.com'&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;title&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;url&lt;/span&gt;

&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;close&lt;/span&gt;
&lt;/pre&gt;
&lt;h4&gt;讨论&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ghostdriver尽管对js的支持是不错的，但是如果你的页面上js交互过多的话，ghostdriver是会缴械投降的；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用ghostdriver+selenium的语法可以做一些不错的爬虫；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用java用户请使用maven下载java的ghostdriver binding；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当页面上有flash播放器时，phantom可能会萌萌哒的卡在那里一动不动；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ghostdriver基于&lt;a href="http://phantomjs.org/" target="_blank"&gt;phantomjs&lt;/a&gt;，phantomjs可以做爬虫，简单的性能测试，ui自动化测试和其他一些工作； &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;由于没有ui，当测试发生错误的时候调试的工作量就会变大；&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;看不到运行的过程，心中惶恐不安怎么办&lt;/h4&gt;
&lt;p&gt;答案是截图拯救测试人员，截图拯救世界。&lt;/p&gt;

&lt;p&gt;运行到关键的节点或步骤时截个图，即方便了调试又使你的测试拥有足够多的输出,一举两得何乐不为？&lt;/p&gt;

&lt;p&gt;python代码&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;

&lt;span class="n"&gt;dr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PhantomJS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'phantomjs'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;dr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'http://baidu.info'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;dr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;dr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_url&lt;/span&gt;

&lt;span class="n"&gt;dr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save_screenshot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'./baidu.png'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;dr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;/pre&gt;

&lt;p&gt;ruby代码&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'watir-webdriver'&lt;/span&gt;

&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Watir&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="ss"&gt;:phantomjs&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;goto&lt;/span&gt; &lt;span class="s1"&gt;'www.baidu.com'&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;title&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;url&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save_screenshot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'./baidu.jpg'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;close&lt;/span&gt;
&lt;/pre&gt;</description>
      <author>easonhan007</author>
      <pubDate>Mon, 12 Jan 2015 09:43:06 +0800</pubDate>
      <link>http://testerhome.com/topics/1838</link>
      <guid>http://testerhome.com/topics/1838</guid>
    </item>
    <item>
      <title>【分享】Genymotion 性能完爆安卓模拟器,可取而代之.</title>
      <description>&lt;p&gt;新年新气象，一定要有新分享.&lt;/p&gt;

&lt;p&gt;在安卓端大家对SDK自带的模拟器一定用的痛苦万分，之前看到一个帖子中提到一个叫Genymotion的模拟器据说性能飞起，于是在MAC下体验了下，果然可以与真机性能相媲美，但安卓在Windows上还是居多，这里给大家总结下Genymotion的在Windows的使用和配合Appium的方法，东西不是很深，但还是希望能对需要的人有点帮助。&lt;/p&gt;

&lt;p&gt;首先打开 Genymotion的官方网站并注册一个新的账号：&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.genymotion.net/" rel="nofollow" target="_blank"&gt;http://www.genymotion.net/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="/photo/2015/418b2de8382a9ee9e26e180aa2dfd48c.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;注册流程很简单用自己的任意邮箱即可，注册激活并登录 点击 Get Genymotion&lt;br&gt;
&lt;img src="/photo/2015/3588139cb519f1cce237e844f23cc0c4.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;来到下载页面&lt;br&gt;
&lt;img src="/photo/2015/13499b8396a382076a897fa3b8de0e72.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="/photo/2015/6b6f5d42b6c07c24967e31829767de7e.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;1，可以看到Genymotion 支持3种主流系统，这里以Windows 为例。&lt;br&gt;
2，有2种下载方式，由于Genymotion要基于VirtualBox 启动，如果你电脑上安装了VirtualBox 就下右边的一个，没有就下左边的。&lt;/p&gt;

&lt;p&gt;点击所需下载，等待下载完成并安装，安装过程没有什么好说的，只需要注意下，中间要安装一个Vbox&lt;br&gt;
&lt;img src="/photo/2015/7b0a9297cac3594b1925fd31b53a7b7b.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;Tips:由于Vbox安装它默认完成启动的，这里可以去掉启动勾选，或者直接关掉它。&lt;br&gt;
Genymotion安装完成点击Finish 启动即可。&lt;/p&gt;

&lt;p&gt;初次启动会提示你是否下一个模拟器，登录并下载一个新的模拟器&lt;br&gt;
&lt;img src="/photo/2015/71c1fb10c68d218416041b98a64966b8.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="/photo/2015/dc369f0cdb631425413b561a0814baef.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;等待包下载完成后点击Finish&lt;br&gt;
&lt;img src="/photo/2015/ec7d3719b77557d4d4dcfc14b59f29df.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;这里我们还可以配置虚拟机的属性，比如内存，处理器和屏幕分辨率，这点对我们做适配来说很重要。&lt;/p&gt;

&lt;p&gt;&lt;img src="/photo/2015/8ff27cea96e9d5ec924f439e303ddaea.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;模拟器启动成功，启动速度和机器流畅程度真心没话说。&lt;br&gt;
&lt;img src="/photo/2015/5392eb498bf8e06add0057d8780cfbdc.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;到这里大家肯定会问，这可以配合Appium做点事情么？其实这个答案是肯定的，我们需要简单的配置下即可。&lt;br&gt;
如果没有配置，会出现adb 的异常：&lt;br&gt;
&lt;img src="/photo/2015/7efc9e8e7a1271f59134c7c9885cc7e2.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;这个问题很好解决，关掉虚拟机，配置下Genymotion的SDK的路径即可。&lt;br&gt;
&lt;img src="/photo/2015/54301035978a22f8b0288fdb406549ef.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;再次启动虚拟机 并ping下 adb devices，搞定。&lt;br&gt;
&lt;img src="/photo/2015/b67a94cf1d9c9ba07afe9b771bb2432b.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;完美识别 :)&lt;br&gt;
&lt;img src="/photo/2015/007fdd2f1a80fa27e12a33d4d0cac00b.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;小结：&lt;br&gt;
Genymotion在性能上确实没话说，完全可以用其做很多的事情，比如屏幕适配，安卓上不同的系统（目前支持5.X）等等，至于糟糕的SDK模拟器体验实在太差，希望这个模拟器能够为大家做更多的事情。&lt;/p&gt;</description>
      <author>seasoncool2011</author>
      <pubDate>Sun, 11 Jan 2015 16:42:07 +0800</pubDate>
      <link>http://testerhome.com/topics/1832</link>
      <guid>http://testerhome.com/topics/1832</guid>
    </item>
    <item>
      <title> 史上最简单 Robotium 跨进程操作实践——基于 ADB 框架</title>
      <description>&lt;p&gt;最开始发在csdn的，为了更多小伙伴看到，特在这里再转一下。&lt;a href="http://blog.csdn.net/qingchunjun/article/details/42580937" rel="nofollow" target="_blank"&gt;http://blog.csdn.net/qingchunjun/article/details/42580937&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Robotium是Android平台下一款非常优秀的自动化测试框架，它做android平台自动化的优势想必看到这篇文章的人应该都很清楚。但优点归优点，缺点也比较多，最明显的缺点有两个，一是必须要和被测系统签名保持一致，二是不能做任何跨进程的操作。&lt;/p&gt;

&lt;p&gt;很多小伙伴知道怎么用robotium，也知道它有这些限制，但不知道其中的原因。这里简单地说一下，robotium的这些先天不足的主要原因是由于它本身是基于instrumentation机制的，这既有好处也有坏处。好处是通过instrumentation注入到被测进程，从而与被测进程运行在同一进程空间，使得它能够非常方便地识别被测应用中的被测对象，并对这些对象进行操作。坏处是既然robotium已经跟被测应用”合体”了，那么根据android的进程隔离机制，它自然也被系统隔离在其他进程之外，无法跨进程操作任何对象，如图（1）所示。&lt;/p&gt;

&lt;p&gt;&lt;img src="/photo/2015/65f123aa69884669c16e014a9421d378.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;图（1）Android进程沙箱示意图&lt;/p&gt;

&lt;p&gt;其实使用相同的签名对于单应用的测试来说并不是难事，网上有很多应用重签名的方法和工具供大家使用。但不能跨进程操作确实成为了robotium最大的软肋，很多第三方的应用测试或多或少都有一些跨进程操作的测试场景，所以不少人因为这个问题而放弃了robotium，甚是可惜啊。&lt;/p&gt;

&lt;p&gt;作为robotium的铁杆粉之一(我最开始接触android自动化测试就是用的robotium)，断断续续用了好几年，一直觉得是android平台最好用的自动化测试工具之一。对于robotium怎样突破进程的限制也做过一些研究，网上比较多的解决方案无外乎有以下几种：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;自己写服务做server，基于AIDL或编写socket与monkeyserver进行通讯，然后在robotium测试脚本里调用接口方法来间接地进行跨进程的操作，这种方式可以参考下这篇文章的例子：&lt;a href="http://www.robotium.cn/archives/584aidl%E6%8E%A5%E5%8F%A3%E6%9D%A5%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C%EF%BC%8C%E6%AF%94%E5%A6%82%E8%B0%83%E7%94%A8%E6%8B%8D%E7%85%A7%E6%93%8D%E4%BD%9C%EF%BC%8C%E6%89%80%E4%BB%A5%E5%85%B6%E5%AE%9E%E4%BE%8B%E5%AD%90%E5%B9%B6%E4%B8%8D%E6%98%AF%E5%BE%88%E5%A4%9A%EF%BC%8C%E6%8A%80%E6%9C%AF%E4%B8%8A%E7%9A%84%E5%B1%80%E9%99%90%E6%80%A7%E8%BE%83%E5%A4%A7%E3%80%82" rel="nofollow" target="_blank"&gt;http://www.robotium.cn/archives/584aidl接口来进行操作，比如调用拍照操作，所以其实例子并不是很多，技术上的局限性较大。&lt;/a&gt;。文章的作者只是给出了思路，我自己曾经按照这种方法去实现过，发现该方法的优势是比较稳定，缺点就是实现起来确实比较复杂，而且有些操作无法找到现成的系统&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;基于广播和service服务。这种方法的实现方式可以参考&lt;a href="http://www.ltesting.net/ceshi/open/kygncsgj/2013/0507/206229.htmlapi%EF%BC%8C%E9%9A%BE%E5%BA%A6%E4%B9%9F%E4%B8%8D%E7%AE%97%E5%B0%8F%EF%BC%8C%E6%89%80%E4%BB%A5%E4%B8%80%E8%88%AC%E4%B8%8D%E5%BB%BA%E8%AE%AE%E4%BD%BF%E7%94%A8%E8%BF%99%E7%A7%8D%E6%96%B9%E5%BC%8F%E3%80%82" rel="nofollow" target="_blank"&gt;http://www.ltesting.net/ceshi/open/kygncsgj/2013/0507/206229.htmlapi，难度也不算小，所以一般不建议使用这种方式。&lt;/a&gt;这篇文章的描述。这种方法我没有亲自去试过，但不难发现这种方法原理稍微简单些，但该方法貌似需要系统签名，而且自己写广播和服务来调用系统&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;综合上面的这些跨进程的解决方案，其实都感觉不太理想，对于很多初学者来说不是太难实现就是局限性比较大，一直没有找到一个比较理想的解决方案。直到后来在testerhome上看到一个技术很牛的兄弟把常用的adb命令做了一个很完备的封装(PS：真的是很全了，至少常用的adb命令都在，我甚至之前都没有想过adb命令还能做这么多事情)，做成了一个独立的测试辅助工具。我就突然联想到为何不能使用adb命令来辅助robotium进行跨进程操作呢？既然该框架已经封装了基于adb的所有操作，而且adb又是不受系统限制的，那么基于这个框架理论上进行跨进程操作是没有任何问题的。后来经过试验，确实效果不错，轻量级、操作简单、使用方便，并且轻松跨进程，真是居家测试、屌丝逆袭的必备神器啊。好了，闲话不多说了，接下来我们就来详细地看看究竟是怎么用的。&lt;/p&gt;

&lt;p&gt;先来简单地介绍下这个adb命令框架的常用接口。这个框架里有三个主要的包，分别介绍如下：&lt;/p&gt;

&lt;p&gt;xuxu.autotest这个包里面主要有两个类，一个是AdbDevice，封装了功能测试中常用的一些操作，如获取当前activity的名称和包名、获取设备分辨率、关闭应用、点击对象等常用功能，非常实用。另一个类是XuImage，顾名思义，即封装了一些常见的图片操作，如得到指定边界的图片截图、对比图片是否一致、截取图片等。&lt;/p&gt;

&lt;p&gt;xuxu.autotest.element这个包主要用于获取被测对象，主要是封装了一个Position对象，用于通过Class Name、Id、Contentdesc等属性来获取一个被测对象，其底层是通过uiautomator来dump 当前ui的xml文件的，可以获取到所有对象节点的xml文件。&lt;/p&gt;

&lt;p&gt;xuxu.autotest.utils这个包里面主要提供了对Date日期时间的操作，ImageUtil对图片的操作及正则表达式和shell语句的操作的封装，方便大家的使用。总的来说整个框架的接口设计还是非常齐全的，可以实现很多常用功能，具体功能大家可以自己看源码和帮助文档来摸索。&lt;/p&gt;

&lt;p&gt;接下来就进入我们本次的主题——跨进程。为了方便大家理解，我会在本文中选择两个非常常见的跨进程操作场景来说明如何跨进程，也就是大家喜闻乐见的相机拍照和打电话来进行演示。&lt;/p&gt;

&lt;p&gt;例子1、跨进程操作之相机拍照。&lt;/p&gt;

&lt;p&gt;被测程序非常简单，程序界面截图如下图（2）所示：&lt;br&gt;
&lt;img src="/photo/2015/37c762fa3e7e7e6673669795a6c83ac2.jpg" alt=""&gt;&lt;br&gt;
图（2）&lt;/p&gt;

&lt;p&gt;点击第一个界面的“拍照片”按钮后，进入界面2，点击其中的“拍张照片”后启动系统的相机，当用户按下拍照功能键后，系统可以将用户拍下的照片显示在应用中，以备后续浏览或者是上传。由于相机应用和我们所写的被测应用是两个不同的应用，所以这就属于典型的跨进程操作，Robotium框架本身是无法对这个相机界面进行操作的。&lt;/p&gt;

&lt;p&gt;接下来看看关键的测试工程怎么创建的。测试工程的创建方法非常简单，操作步骤如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;首先按照常规的android测试工程的建法，创建一个常规测试工程。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在工程中引入robotium和adbForAndroid的jar包。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这样，我们的测试工程就准备好了。&lt;/p&gt;

&lt;p&gt;接下来的步骤就是写测试脚本。由于AdbForAndroid框架是按照元素的相关属性来查找并定位被测对象的，所以首先要弄清楚我们要操作的跨进程的界面上的对象的信息，这些信息我们可以通过很多现成工具来看，我这里选择android自带的uiautomatorviewer。先在模拟器上手工打开被测程序，进入拍照的相机界面，并用uiautomatorviewer查看界面元素信息如下图(3)所示：&lt;/p&gt;

&lt;p&gt;&lt;img src="/photo/2015/e6785e3a9f10a1b225dc29753dbacbef.jpg" alt=""&gt;&lt;br&gt;
图（3）&lt;/p&gt;

&lt;p&gt;我们可以看到，我们要点击的拍照按钮的属性在图（3）的右下角的列表中已全部展现出来。那么我们该选哪个呢？这个问题取决于adbForAndroid框架支持由哪些属性来获取元素。通过查询其帮助文档，我们知道目前这个框架中常用的查找元素的方法如下：&lt;br&gt;
findElementByContentdesc&lt;br&gt;
findElementByClass&lt;br&gt;
findElementByText&lt;br&gt;
findElementById&lt;/p&gt;

&lt;p&gt;由于我现在使用的模拟器版本为4.2.2，所以uiautomatorviewer无法显示id属性，如果大家用的是4.3版本以上，就可以看到元素的id属性了。&lt;br&gt;
那么现在这种情况来看，我们最好就选择Contentdesc属性来定位对象了。代码很简单，如下：&lt;br&gt;
Element element =position.findElementByContentdesc("Shutter button");&lt;br&gt;&lt;br&gt;
adbDevice.tap(element);  //点击拍照按钮&lt;br&gt;&lt;br&gt;
好，接下来点击了拍照按钮之后，拍照功能还会让你选择是确定还是取消操作，如下图（4）所示：&lt;br&gt;
&lt;img src="/photo/2015/6f573a1669c286f262736b78507f69a8.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;图（4）&lt;/p&gt;

&lt;p&gt;那么如法炮制，我们通过查询获知，这个用于确定的“√”按钮，它的属性能用于定位的其实只有class属性。不过这里要注意的是，此时由于我们用的是class属性，大家可以看到界面上class属性跟我们要点击的“√”这个按钮相同的对象很多，所以我们必须用findElementsByClass方法了。这个方法返回的是一个ArrayList&amp;lt;Element&amp;gt;，所以我们可以写如下的代码来获取所有class属性为”android.widget.ImageView”的元素列表。&lt;/p&gt;

&lt;p&gt;ArrayList&amp;lt;Element&amp;gt; imageViews =position.findElementsByClass("android.widget.ImageView");  &lt;/p&gt;

&lt;p&gt;好，写完之后，现在问题来了，究竟这个数组里面哪个index才是对应的我们要点击的“√”按钮呢？经过试验，我发现界面上多个相同元素返回到数组中时，对应元素位置是按照界面上的位置从上到下、从左到右来的，所以我们要点击的这个按钮的index应该是4。所以点击它的代码如下：&lt;/p&gt;

&lt;p&gt;adbDevice.tap(imageViews.get(4));    //2是x，3是重拍，4是√  &lt;/p&gt;

&lt;p&gt;上面的代码运行完后，界面就会回到我们的被测程序，后面的操作就不用我再多说了，大家看看是不是非常简单？大笑&lt;/p&gt;

&lt;p&gt;例子2、跨进程操作之打电话&lt;/p&gt;

&lt;p&gt;有了第一个例子的基础，其实第二个例子就很好实现了。被测程序非常简单，如下图（5）所示：&lt;br&gt;
&lt;img src="/photo/2015/0835e84fe4ea660d77f082757bae0f7f.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;图（5）&lt;/p&gt;

&lt;p&gt;点击“拨打该号码”后，系统自动进入拨号界面，所以也是典型的跨进程测试场景。&lt;/p&gt;

&lt;p&gt;实现方法还是跟例1中一样，先还是用uiautomatorviewer查看界面中的对象信息，再使用对应的方法来操作对象即可。而且在这个例子中，我还给大家演示了另外一种情况，即有些跨进程操作不但要进行操作，还要取得一些对象属性来进行验证，这也是基本可以的。这里我直接给出我的测试代码(稍微封装了一下)：&lt;/p&gt;

&lt;p&gt;public boolean CallUtil(String callNumber){&lt;br&gt;&lt;br&gt;
            Element  element;&lt;br&gt;&lt;br&gt;
            boolean  result;&lt;br&gt;&lt;br&gt;
            //验证是否拨打了正确的号码&lt;br&gt;&lt;br&gt;
            if(callNumber.length() == 11){//正常号码需要转变为 x xxx-xxx-xxxx的格式&lt;br&gt;&lt;br&gt;
                    StringformatCallNumber = callNumber.substring(0, 1) + " " +callNumber.substring(1, 4) + "-" + callNumber.substring(4,7) +"-" + callNumber.substring(7, callNumber.length());&lt;br&gt;&lt;br&gt;
                    element= position.findElementByText(formatCallNumber);&lt;br&gt;&lt;br&gt;
                    try{&lt;br&gt;&lt;br&gt;
                            Thread.sleep(2000);  //线程休眠2秒&lt;br&gt;&lt;br&gt;
                    }catch (InterruptedException e) {&lt;br&gt;&lt;br&gt;
                            e.printStackTrace();&lt;br&gt;&lt;br&gt;
                    }&lt;br&gt;&lt;br&gt;
            }else{&lt;br&gt;&lt;br&gt;
                    element= position.findElementByText(callNumber);//除正常号码外，其他格式的号码不进行格式转换&lt;br&gt;&lt;br&gt;
            }&lt;br&gt;&lt;br&gt;
            if(element != null){&lt;br&gt;&lt;br&gt;
                    result= true;&lt;br&gt;&lt;br&gt;
            }else{&lt;br&gt;&lt;br&gt;
                    result= false;&lt;br&gt;&lt;br&gt;
            }&lt;br&gt;&lt;br&gt;
            element= position.findElementByContentdesc("End");   //挂断电话&lt;br&gt;&lt;br&gt;
            if(element != null) adbDevice.tap(element);&lt;br&gt;&lt;br&gt;
            return  result;&lt;br&gt;&lt;br&gt;
    }  &lt;/p&gt;

&lt;p&gt;好了，整个过程非常简单。我相信能用robotium的童鞋用起来应该都没有任何问题，所有代码都是非常易用易懂的。&lt;/p&gt;

&lt;p&gt;相信通过前面的实例，大家可以发现说这是“史上最简单”的Robotium跨进程操作解决方案我估计没人会反对，这并不是夸大事实、博人眼球，确实很简单，功能也很强大。其他也不用我多说了，最后我再来对该框架总结一下下吧：&lt;/p&gt;

&lt;p&gt;优点：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;确实非常全，基本封装了adb的所有常用命令，它本身就是一个adb命令使用大全了。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;框架接口设计清晰易懂，简单明了，封装成jar包，用起来也很方便。另外希望大家都能看看它的源码并了解它的实现细节，作者封装得还是很不错的，很值得我们学习，而不仅仅是简单地使用它。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不需要root权限。其实这点还是很重要的，有些公司的测试机是没有root权限，用adb就很方便。对于不想放弃robotium，又确实有跨进程操作需求的童鞋来说，真的是非常实用的一个框架。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;目前已知的不足：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;手机的版本必须是4.1以上，即至少必须支持uiautomator的手机才行，因为该框架本身底层是依赖于uiautomator来dump出对象布局xml文件，最终获取对象的坐标进行操作的，所以你的手机版本本身并不支持uiautomator的话，就没法实现dump操作。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有些对象是uiautomator也无法识别和操作的，那当然这个框架也无能为力了。比如屏幕最上方的通知消息栏的对象，所有工具都没法显示和识别，这个肯定没办法了，另外还比如输入文字时的弹出键盘上的按钮对象等，也无法识别，大家可以试试。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以后想要尝试的改进：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;对于手机版本的支持问题，个人觉得有个曲线救国的方法可以解决。即我们可以稍微修改下源码，加入判断手机版本的代码，判断当前手机版本如果高于4.1，就直接通过uiautomator来dump，如果低于4.1，则读取PC上事先导出到指定位置的xml文件。这样的话，如果你使用的手机不是4.1以上的版本，只需要事先把被测应用用4.1以上版本的手机通过uiautomator先dump到PC的一个指定路径上就行了，这样效果应该是一样的，只要最终能得到对象坐标就OK。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;再加一些比较实用的功能。比如现在可以根据text来查找对象，但实际上很多时候我们可能是得到对象了，但想通过这个对象去获取对象的其他属性，所以建议增加类似getXXXXByElement(Element e)这样的方法，有空试一下，呵呵。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上只是我的一些个人想法，如果大家还有一些什么别的建议，也欢迎大家都提出来，一起来完善这个很实用的框架。&lt;/p&gt;

&lt;p&gt;最后，再次感谢AdbForAndroid框架的作者: xuxu。&lt;/p&gt;

&lt;p&gt;框架源码github地址：&lt;a href="https://github.com/gb112211/Adb-For-Test" rel="nofollow" target="_blank"&gt;https://github.com/gb112211/Adb-For-Test&lt;/a&gt;&lt;br&gt;
本文中相关样例工程源码(含被测程序和测试程序)下载 &lt;/p&gt;</description>
      <author>qinggchu</author>
      <pubDate>Sat, 10 Jan 2015 15:42:52 +0800</pubDate>
      <link>http://testerhome.com/topics/1826</link>
      <guid>http://testerhome.com/topics/1826</guid>
    </item>
    <item>
      <title>还没被玩坏的 robobrowser(4)——从页面上抓取感兴趣的内容</title>
      <description>&lt;h4&gt;背景&lt;/h4&gt;
&lt;p&gt;本节的知识实际上是属于Beautiful Soup的内容。&lt;/p&gt;

&lt;p&gt;robobrowser支持Beautiful Soup，一般来说通过下面3个方法获取页面上感兴趣的内容&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;find&lt;/li&gt;
&lt;li&gt;find_all&lt;/li&gt;
&lt;li&gt;select&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这一节主要通过一些例子来讲解这几个方法&lt;/p&gt;
&lt;h4&gt;预备知识&lt;/h4&gt;
&lt;p&gt;一般来说学习Beautiful Soup是需要了解过滤器这个概念的。不过为了让大家能够容易理解，这里暂时屏蔽过滤器的知识，感兴趣的同学可以去官网学习一下。&lt;/p&gt;
&lt;h4&gt;通过例子学习&lt;/h4&gt;
&lt;p&gt;这一节里我们的例子还是&lt;a href="http://itest.info/courses/2python" rel="nofollow" target="_blank"&gt;http://itest.info/courses/2python&lt;/a&gt;， selenium自动化测试班这个页面。&lt;/p&gt;
&lt;h4&gt;find方法&lt;/h4&gt;
&lt;p&gt;find方法是返回页面上符合条件的第1个元素。&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;span class="c"&gt;#coding: utf-8&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;robobrowser&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RoboBrowser&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'http://itest.info/courses/2'&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RoboBrowser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# 通过tag name抓取&lt;/span&gt;

&lt;span class="c"&gt;#&amp;lt;title&amp;gt;重定向科技&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
  &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;

&lt;span class="c"&gt;# 通过属性(attribute)抓取&lt;/span&gt;

&lt;span class="c"&gt;# &amp;lt;img id="logo-header" src="/assets/logo-0648b8fb283a9802457da74f0c157b12.png" /&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'logo-header'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'src'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# &amp;lt;a href="/courses/4"&amp;gt;android测试工具自制班&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'/courses/4'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;

&lt;span class="c"&gt;# &amp;lt;li class="active"&amp;gt;python selenium自动化测试班&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'active'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'python'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;


&lt;/pre&gt;
&lt;h4&gt;find_all方法&lt;/h4&gt;
&lt;p&gt;find_all方法的用法跟find基本相同，但是find_all会返回所有符合条件的tag的集合(ResultSet)。&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;span class="c"&gt;#coding: utf-8&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;robobrowser&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RoboBrowser&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'http://itest.info/courses/2'&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RoboBrowser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;#页面上所有的a&lt;/span&gt;
  &lt;span class="n"&gt;all_links&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;all_links&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;

&lt;span class="c"&gt;# 页面上所有class是container的div&lt;/span&gt;
    &lt;span class="n"&gt;divs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'container'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;divs&lt;/span&gt;

&lt;span class="c"&gt;# limit 参数控制返回的元素个数&lt;/span&gt;

&lt;span class="c"&gt;# 页面上前2个p&lt;/span&gt;
    &lt;span class="n"&gt;first_two_p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'p'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;first_two_p&lt;/span&gt;

&lt;span class="c"&gt;# 如果第1个参数是列表则返回相匹配的集合&lt;/span&gt;

&lt;span class="c"&gt;# 页面上所有的meta和title&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;'meta'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'img'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;


&lt;/pre&gt;
&lt;h4&gt;select方法&lt;/h4&gt;
&lt;p&gt;select方法是我最喜欢的方法，该方法支持css选择器(可惜不是全部)，返回的是list。&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;span class="c"&gt;#coding: utf-8&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;robobrowser&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RoboBrowser&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'http://itest.info/courses/2'&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RoboBrowser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;#页面上所有的a&lt;/span&gt;
  &lt;span class="n"&gt;all_links&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;all_links&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;

&lt;span class="c"&gt;# 页面上所有class是container的div&lt;/span&gt;
    &lt;span class="n"&gt;divs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'.container'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;divs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/pre&gt;
&lt;h4&gt;其他技巧&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;找到页面上所有具有id属性的元素&lt;code&gt;b.find_all(id=True)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;不递归查找元素。也就是说只在&amp;lt;html&amp;gt;&amp;lt;/html&amp;gt;的直接子后代中查找&lt;code&gt;b.find('p', recursive=False)&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;文本版权归乙醇所有，欢迎转载，但请标明出处。&lt;/p&gt;

&lt;p&gt;下一节：Beautiful Soup的过滤器&lt;/p&gt;</description>
      <author>easonhan007</author>
      <pubDate>Sat, 10 Jan 2015 09:52:02 +0800</pubDate>
      <link>http://testerhome.com/topics/1819</link>
      <guid>http://testerhome.com/topics/1819</guid>
    </item>
    <item>
      <title>appium 的 android 平台源码分析</title>
      <description>&lt;p&gt;6个月前我刚进入testerhome的时候，我认识了appium，然后我学习并写了一些关于appium源码的文章。现在整理到testerhome。&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/37910683" target="_blank"&gt;appium框架之bootstrap&lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/37921869" target="_blank"&gt;bootstrap之Click事件 &lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/37923391" target="_blank"&gt;bootstrap之WaitForIdle&amp;amp;&amp;amp;Clear &lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/37924411" target="_blank"&gt;bootstrap之Orientation &lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/37929673" target="_blank"&gt;bootstrap之Swipe &lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/37931445" target="_blank"&gt;bootstrap之Flick &lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/37932801" target="_blank"&gt;bootstrap之Drag &lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/37936679" target="_blank"&gt;bootstrap之Pinch &lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/37961373" target="_blank"&gt;bootstrap之鼠标操作 &lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/37962367" target="_blank"&gt;bootstrap之文本框的操作 &lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/37963151" target="_blank"&gt;bootstrap之GetName&amp;amp;&amp;amp;GetAttribute&amp;amp;&amp;amp;GetDeviceSize&amp;amp;&amp;amp;GetSize&amp;amp;&amp;amp;GetLocation&amp;amp;&amp;amp;GetDataDir &lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/37963999" target="_blank"&gt;bootstrap之ScrollTo &lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/37964513" target="_blank"&gt;bootstrap之Wake&amp;amp;&amp;amp;PressBack&amp;amp;&amp;amp;TakeScreenshot&amp;amp;&amp;amp;OpenNotification &lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/37964681" target="_blank"&gt;bootstrap之PressKeyCode&amp;amp;&amp;amp;LongPressKeyCode &lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/37964933" target="_blank"&gt;bootstrap之DumpWindowHierarchy &lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/37989561" target="_blank"&gt;bootstrap之UpdateStrings &lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/37991773" target="_blank"&gt;bootstrap之MultiPointerGesture &lt;/a&gt;&lt;/p&gt;</description>
      <author>doctorq</author>
      <pubDate>Thu, 08 Jan 2015 22:34:58 +0800</pubDate>
      <link>http://testerhome.com/topics/1810</link>
      <guid>http://testerhome.com/topics/1810</guid>
    </item>
    <item>
      <title>整点 appium 中部分 api 的使用方法</title>
      <description>&lt;p&gt;使用的语言是java，appium的版本是1.3.4，java-client的版本是java-client-2.1.0，建议多参考java-client-2.1.0-javadoc。&lt;/p&gt;

&lt;p&gt;1.使用AndroidDriver，其已经继承了AppiumDriver&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;AndroidDriver&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;@Before&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;setUp&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;DesiredCapabilities&lt;/span&gt; &lt;span class="n"&gt;capabilities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;DesiredCapabilities&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;capabilities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setCapability&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"deviceName"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Android Emulator"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;capabilities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setCapability&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"platformVersion"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"4.4"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;capabilities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setCapability&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"platformName"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Android"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;capabilities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setCapability&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"appPackage"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"com.android.settings"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;capabilities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setCapability&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"appActivity"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;".Settings"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;AndroidDriver&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"http://127.0.0.1:4723/wd/hub"&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
                &lt;span class="n"&gt;capabilities&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@After&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;tearDown&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;quit&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;2.截屏并保存至本地&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getScreenshotAs&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OutputType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FILE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="n"&gt;screenFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"d:\\screen.png"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;FileUtils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;copyFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;screen&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;screenFile&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//commons-io-2.0.1.jar中的api&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; 
&lt;/pre&gt;

&lt;p&gt;3.push文件、pull文件&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"d:\\test.txt"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//test.txt内容为"testerHome"&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FileUtils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readFileToString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;encodeBase64&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getBytes&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pushFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sdcard/test.txt"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;resultDate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pullFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sdcard/test.txt"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;decodeBase64&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resultDate&lt;/span&gt;&lt;span class="o"&gt;)));&lt;/span&gt; &lt;span class="c1"&gt;//打印结果为"testerHome"&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;4.&lt;/p&gt;
&lt;pre class="highlight java"&gt;        &lt;span class="c1"&gt;//获取当前界面的activity,可用于断言是否跳转到预期的activity&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;currentActivity&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;5.&lt;/p&gt;
&lt;pre class="highlight java"&gt;        &lt;span class="c1"&gt;//打开通知栏界面&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;openNotifications&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;6.&lt;/p&gt;
&lt;pre class="highlight java"&gt;        &lt;span class="c1"&gt;//获取网络状态&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getNetworkConnection&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;//设置网络状态&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setNetworkConnection&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;NetworkConnectionSetting&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="c1"&gt;//或者&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setNetworkConnection&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;NetworkConnectionSetting&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;7.&lt;/p&gt;
&lt;pre class="highlight java"&gt;        &lt;span class="c1"&gt;//启动其他应用，跨APP&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;startActivity&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"com.android.camera"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;".CameraLauncher"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;8.&lt;/p&gt;
&lt;pre class="highlight java"&gt;        &lt;span class="c1"&gt;//自动滑动列表&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;scrollTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;//或者&lt;/span&gt;
        &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;scrollToExact&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; 
&lt;/pre&gt;

&lt;p&gt;9.拖动元素&lt;/p&gt;
&lt;pre class="highlight java"&gt;        &lt;span class="c1"&gt;//拖动相机图标至日历图标位置&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;TouchAction&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;longPress&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;findElementByName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"相机"&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;moveTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;findElementByName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"日历"&lt;/span&gt;&lt;span class="o"&gt;)).&lt;/span&gt;&lt;span class="na"&gt;release&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;perform&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;10.图案解锁，解锁该图案：&lt;br&gt;
&lt;img src="/photo/2015/291cc8be1612af3541e5f782e8f57656.png" alt=""&gt;&lt;/p&gt;
&lt;pre class="highlight java"&gt;        &lt;span class="n"&gt;TouchAction&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;TouchAction&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;press&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;215&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;870&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;moveTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;540&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;870&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;moveTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;862&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;870&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;moveTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;540&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1195&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;moveTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;215&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1195&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;moveTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;215&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1518&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;moveTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;540&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1518&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;moveTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;862&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1518&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;moveTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;862&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1195&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;release&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;perform&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/pre&gt;</description>
      <author>xuxu</author>
      <pubDate>Thu, 08 Jan 2015 18:24:20 +0800</pubDate>
      <link>http://testerhome.com/topics/1809</link>
      <guid>http://testerhome.com/topics/1809</guid>
    </item>
    <item>
      <title>CTS 框架解析</title>
      <description>&lt;p&gt;之前在csdn上写过几篇Cts的文章。现在将其整理一下放在testerhome上，后续的文章会写在本论坛上，希望做一个合集，详细介绍一下cts，希望对做android自动化框架开发的人有点帮助。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://blog.csdn.net/itfootball/article/details/40044953" target="_blank"&gt;&lt;strong&gt;&lt;em&gt;Cts框架解析(1)-windows下cts配置&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/40184833" target="_blank"&gt;&lt;strong&gt;&lt;em&gt;Cts框架解析(2)-cts调试环境的搭建&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/40189401" target="_blank"&gt;&lt;strong&gt;&lt;em&gt;Cts框架解析(3)-基础库tradefederation配置&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/40210811" target="_blank"&gt;&lt;strong&gt;&lt;em&gt;Cts框架解析(4)-任务的添加&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/40299359" target="_blank"&gt;&lt;strong&gt;&lt;em&gt;Cts框架解析(5)-9大组件配置&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/40339799" target="_blank"&gt;&lt;strong&gt;&lt;em&gt;Cts框架解析(6)-任务的执行&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/40346695" target="_blank"&gt;&lt;strong&gt;&lt;em&gt;Cts框架解析(7)-任务执行的调度室&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/40371161" target="_blank"&gt;&lt;strong&gt;&lt;em&gt;Cts框架解析(8)-IBuildProvider&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/40372615" target="_blank"&gt;&lt;strong&gt;&lt;em&gt;Cts框架解析(9)-IDeviceRecovery&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/40373091" target="_blank"&gt;&lt;strong&gt;&lt;em&gt;Cts框架解析(10)-TestDeviceOptions&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/40373283" target="_blank"&gt;&lt;strong&gt;&lt;em&gt;Cts框架解析(11)-ICommandOptions&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/40376047" target="_blank"&gt;&lt;strong&gt;&lt;em&gt;Cts框架解析(12)-ITargetPreparer&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/40377263" target="_blank"&gt;&lt;strong&gt;&lt;em&gt;Cts框架解析(13)-任务执行过程&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/40379247" target="_blank"&gt;&lt;strong&gt;&lt;em&gt;Cts框架解析(14)-任务执行过程&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/40395947" target="_blank"&gt;&lt;strong&gt;&lt;em&gt;Cts框架解析(15)-任务执行完&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="http://testerhome.com/topics/1881" target="_blank"&gt;&lt;strong&gt;&lt;em&gt;Cts框架解析(16)-case的组织&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="http://testerhome.com/topics/1890" target="_blank"&gt;&lt;strong&gt;&lt;em&gt;Cts框架解析(17)-case执行结果收集系统&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/41826983" target="_blank"&gt;&lt;strong&gt;&lt;em&gt;cts中设备管理分析(1)-logcat信息收集系统&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/41845253" target="_blank"&gt;&lt;strong&gt;&lt;em&gt;cts中设备管理分析(2)-fastboot状态监听器&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/41846261" target="_blank"&gt;&lt;strong&gt;&lt;em&gt;cts中设备管理分析(3)-设备恢复&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.csdn.net/itfootball/article/details/41849399" target="_blank"&gt;&lt;strong&gt;&lt;em&gt;cts中设备管理分析(4)-设备状态的分类以及恢复模式的分类&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="http://testerhome.com/topics/1858" target="_blank"&gt;&lt;strong&gt;&lt;em&gt;cts中设备管理分析(5)-自动检测设备&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="http://testerhome.com/topics/1863" target="_blank"&gt;&lt;strong&gt;&lt;em&gt;cts中设备管理分析(6)-设备的分类&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;</description>
      <author>doctorq</author>
      <pubDate>Thu, 08 Jan 2015 17:38:06 +0800</pubDate>
      <link>http://testerhome.com/topics/1808</link>
      <guid>http://testerhome.com/topics/1808</guid>
    </item>
    <item>
      <title>还没被玩坏的 robobrowser(2)——安装及快速开始</title>
      <description>&lt;h4&gt;安装robobrowser&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;注意:这里假设你知道如何使用pip安装python的库的知识，如果你不了解这一块的话，点&lt;a href="http://www.easonhan.info/python/2013/12/07/active-python-install-selenium/" target="_blank"&gt;这里&lt;/a&gt;获取帮助。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;强烈推荐使用pip安装。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;pip install robobrowser -i http://pypi.douban.com/simple/

&lt;/pre&gt;

&lt;p&gt;这里用上了豆瓣源，原因你懂得。&lt;/p&gt;
&lt;h4&gt;快速开始&lt;/h4&gt;
&lt;p&gt;新建1个start.py文本文件，然后敲入下面的代码&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;robobrowser&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RoboBrowser&lt;/span&gt;

&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RoboBrowser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'http://itest.info/courses/2'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'.headline h2'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;

&lt;span class="n"&gt;infos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'h4'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;infos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;

&lt;/pre&gt;

&lt;p&gt;在命令行里运行&lt;code&gt;python start.py&lt;/code&gt;，然后看一下结果,如果报错请自行耐心分析原因。&lt;/p&gt;
&lt;h4&gt;查看文档&lt;/h4&gt;
&lt;p&gt;robobrowser自带一点点文档，聊胜于无，凑合看吧。&lt;/p&gt;

&lt;p&gt;在命令行里运行&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;python -m pydoc -p 1234
&lt;/pre&gt;

&lt;p&gt;如果运行成功的话，就从浏览器中访问&lt;a href="http://localhost:1234/robobrowser.htmlbrowser%E8%BF%99%E4%B8%AA%E7%B1%BB%E5%B0%B1%E5%A5%BD%E4%BA%86%E3%80%82" rel="nofollow" target="_blank"&gt;http://localhost:1234/robobrowser.htmlbrowser这个类就好了。&lt;/a&gt;。主要看一下&lt;/p&gt;
&lt;h4&gt;相关知识&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html" target="_blank"&gt;Beautiful Soup&lt;/a&gt;将让你受益匪浅，强烈建议阅读。&lt;/p&gt;

&lt;p&gt;文本版权归乙醇所有，欢迎转载，但请标明出处。&lt;/p&gt;

&lt;p&gt;下一节：基于robobrowser的简单的爬虫&lt;/p&gt;</description>
      <author>easonhan007</author>
      <pubDate>Thu, 08 Jan 2015 14:02:22 +0800</pubDate>
      <link>http://testerhome.com/topics/1801</link>
      <guid>http://testerhome.com/topics/1801</guid>
    </item>
  </channel>
</rss>
