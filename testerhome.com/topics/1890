<!--
  App Environments:
  --------------------------------------------------------
  Ruby:  2.1.2-p95
  Rails: 4.1.1
  Thanks to RubyChina
-->
<!DOCTYPE html>
<html>
<head>
  <title>TesterHome | CTS 框架解析之 case 执行结果处理模块 &raquo; 社区</title>
  <meta charset='utf-8' />
  <meta name="keywords" content="" />
  <meta name="description" content="" />
  <link data-turbolinks-track="true" href="../assets/front-7f214c07ef8cbdd59ba99f0ea4b052b9.css" media="screen" rel="stylesheet" />
    <link href="../assets/mobile-4fb33e42cee242735db607f08badd48a.css" media="screen and (max-width: 798px)" rel="stylesheet" />
  <link rel="shortcut icon" href="../assets/big_logo-e45f9cf8961e479b209d942f449d3b7b.png" />
  <link href="feed" rel="alternate" title="订阅最新帖" type="application/rss+xml" />
  <script data-turbolinks-track="true" src="../assets/app-d8b8d53b12135c77eba5ce7899b456b3.js"></script>
  <meta content="authenticity_token" name="csrf-param" />
<meta content="n6IluQs+rvFYzOtLM2JildRgsvcNIwvZOjb84Ctm9Jg=" name="csrf-token" />
  
  
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "//hm.baidu.com/hm.js?bfca03d31121ff43bab8f1bf58dcb58b";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>

</head>
<body data-offset="50" data-controller-name="topics">
  <div class="navbar navbar-fixed-top">
    <div class="navbar-inner">
      <div class="container">
        <h3>
          <a href="../index.html" class="site-logo"></a>
        </h3>
        <ul class="nav"><li class="first"><a href="../index.html">首页</a></li><li class="active"><a href="../notes/2">社区</a></li><li><a href="../wiki">Wiki</a></li><li><a href="../jobs">招聘</a></li><li class="last"><a href="../sites">酷站</a></li></ul>
        <span class="pull-right">
          <form action="http://testerhome.com/search" class="navbar-search" method="get">
            <input type="text" name="q" class="search-query" value="" placeholder="搜索" />
          </form>

            <ul class="nav pull-right" id="userbar"><li class="first"><a href="../account/sign_up">注册</a></li><li class="last"><a href="../account/password/edit">登录</a></li></ul>

        </span>
      </div>
    </div>
  </div>

  <div class="container">
    
    
    <div id="main" class="container-fluid">
      
<div class="content">
  <div id="topic_show" class="topics box hfeed">
    <div class="topic hentry">
      <div class="infos">
  <div class="pull-right avatar_large">
    <a href="../doctorq"><img alt="1011" class="uface" src="../user/large_avatar/1011.jpg" style="width:48px;height:48px;" /></a>
  </div>
  <h1 class="entry-title">CTS 框架解析之 case 执行结果处理模块</h1>
  <div class="info leader">
    <a class="node" href="node42">Android CTS</a>
     · 
    <a data-author="true" data-name="doctorq" href="../doctorq">doctorq</a>
     · 
    于<abbr class="timeago" title="2015-01-17T23:30:12+08:00"></abbr>发布
     · 
    95次阅读
  </div>
</div>

      
      <div class="body entry-content">
        <h4>UML</h4>
<p><img src="../photo/2015/c42f8a2d1dc72efc81520aae0055621f.png" alt=""></p>
<h4>解释</h4>
<p>cts框架中将case的执行和case结果的收集分成了独立的2个部分，我们称case的结果收集叫测试结果收集模块。设计的思路来源为ddmlib中的ITestRunListener接口，该接口是一个抽象的观察者组件，cts创建有很多具体的组件。但是这些组件不是一个一个去注册成为监听者的，而是通过run方法传递给ddmlib中RemoteAndroidTestRunner类的。所以只要我们继承了该接口，在run的时候把该接口的实例对象传过去，我们就能在对象实例的相应方法中接受信息。但是我们想要在多个地方都能接受到测试结果呢？没关系，cts为我们准备了ResultForwarder类。看具体实现细节：</p>
<h4>ResultForwarder</h4><pre class="highlight java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResultForwarder</span> <span class="kd">implements</span> <span class="n">ITestInvocationListener</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">ITestInvocationListener</span><span class="o">&gt;</span> <span class="n">mListeners</span><span class="o">;</span>

    <span class="cm">/**
     * Create a {@link ResultForwarder} with deferred listener setting. Intended
     * only for use by subclasses.
     */</span>
    <span class="kd">protected</span> <span class="n">ResultForwarder</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">mListeners</span> <span class="o">=</span> <span class="n">Collections</span><span class="o">.</span><span class="na">emptyList</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="cm">/**
     * Create a {@link ResultForwarder}.
     * 
     * @param listeners
     *            the real {@link ITestInvocationListener}s to forward results
     *            to
     */</span>
    <span class="kd">public</span> <span class="n">ResultForwarder</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">ITestInvocationListener</span><span class="o">&gt;</span> <span class="n">listeners</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">mListeners</span> <span class="o">=</span> <span class="n">listeners</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
     * Alternate variable arg constructor for {@link ResultForwarder}.
     * 
     * @param listeners
     *            the real {@link ITestInvocationListener}s to forward results
     *            to
     */</span>
    <span class="kd">public</span> <span class="n">ResultForwarder</span><span class="o">(</span><span class="n">ITestInvocationListener</span><span class="o">...</span> <span class="n">listeners</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">mListeners</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">listeners</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="cm">/**
     * Set the listeners after construction. Intended only for use by
     * subclasses.
     * 
     * @param listeners
     *            the real {@link ITestInvocationListener}s to forward results
     *            to
     */</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="n">setListeners</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">ITestInvocationListener</span><span class="o">&gt;</span> <span class="n">listeners</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">mListeners</span> <span class="o">=</span> <span class="n">listeners</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
     * Set the listeners after construction. Intended only for use by
     * subclasses.
     * 
     * @param listeners
     *            the real {@link ITestInvocationListener}s to forward results
     *            to
     */</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="n">setListeners</span><span class="o">(</span><span class="n">ITestInvocationListener</span><span class="o">...</span> <span class="n">listeners</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">mListeners</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">listeners</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="cm">/**
     * {@inheritDoc}
     */</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">invocationStarted</span><span class="o">(</span><span class="n">IBuildInfo</span> <span class="n">buildInfo</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">ITestInvocationListener</span> <span class="n">listener</span> <span class="o">:</span> <span class="n">mListeners</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">listener</span><span class="o">.</span><span class="na">invocationStarted</span><span class="o">(</span><span class="n">buildInfo</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="cm">/**
     * {@inheritDoc}
     */</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">invocationFailed</span><span class="o">(</span><span class="n">Throwable</span> <span class="n">cause</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">ITestInvocationListener</span> <span class="n">listener</span> <span class="o">:</span> <span class="n">mListeners</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">listener</span><span class="o">.</span><span class="na">invocationFailed</span><span class="o">(</span><span class="n">cause</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="cm">/**
     * {@inheritDoc}
     */</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">invocationEnded</span><span class="o">(</span><span class="kt">long</span> <span class="n">elapsedTime</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">InvocationSummaryHelper</span><span class="o">.</span><span class="na">reportInvocationEnded</span><span class="o">(</span><span class="n">mListeners</span><span class="o">,</span> <span class="n">elapsedTime</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="cm">/**
     * {@inheritDoc}
     */</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">TestSummary</span> <span class="n">getSummary</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// should never be called</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
     * {@inheritDoc}
     */</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">testLog</span><span class="o">(</span><span class="n">String</span> <span class="n">dataName</span><span class="o">,</span> <span class="n">LogDataType</span> <span class="n">dataType</span><span class="o">,</span>
            <span class="n">InputStreamSource</span> <span class="n">dataStream</span><span class="o">)</span> <span class="o">{</span>
<span class="c1">//      CLog.logAndDisplay(LogLevel.INFO,</span>
<span class="c1">//              String.format("[testLog] dataName: %s", dataName));</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">ITestInvocationListener</span> <span class="n">listener</span> <span class="o">:</span> <span class="n">mListeners</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">listener</span><span class="o">.</span><span class="na">testLog</span><span class="o">(</span><span class="n">dataName</span><span class="o">,</span> <span class="n">dataType</span><span class="o">,</span> <span class="n">dataStream</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="cm">/**
     * {@inheritDoc}case开始时显式的调用
     */</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">testRunStarted</span><span class="o">(</span><span class="n">String</span> <span class="n">runName</span><span class="o">,</span> <span class="kt">int</span> <span class="n">testCount</span><span class="o">)</span> <span class="o">{</span>
<span class="c1">//      CLog.logAndDisplay(LogLevel.INFO, String</span>
<span class="c1">//              .format("[testRunStarted] runName: %s testCount:%d", runName,</span>
<span class="c1">//                      testCount));</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">ITestInvocationListener</span> <span class="n">listener</span> <span class="o">:</span> <span class="n">mListeners</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">listener</span><span class="o">.</span><span class="na">testRunStarted</span><span class="o">(</span><span class="n">runName</span><span class="o">,</span> <span class="n">testCount</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="cm">/**
     * {@inheritDoc}
     */</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">testRunFailed</span><span class="o">(</span><span class="n">String</span> <span class="n">errorMessage</span><span class="o">)</span> <span class="o">{</span>
<span class="c1">//      CLog.logAndDisplay(LogLevel.INFO,</span>
<span class="c1">//              String.format("[testRunFailed] errorMessage: %s", errorMessage));</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">ITestInvocationListener</span> <span class="n">listener</span> <span class="o">:</span> <span class="n">mListeners</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">listener</span><span class="o">.</span><span class="na">testRunFailed</span><span class="o">(</span><span class="n">errorMessage</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="cm">/**
     * {@inheritDoc}
     */</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">testRunStopped</span><span class="o">(</span><span class="kt">long</span> <span class="n">elapsedTime</span><span class="o">)</span> <span class="o">{</span>
<span class="c1">//      CLog.logAndDisplay(LogLevel.INFO,</span>
<span class="c1">//              String.format("[testRunStopped] elapsedTime: %d", elapsedTime));</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">ITestInvocationListener</span> <span class="n">listener</span> <span class="o">:</span> <span class="n">mListeners</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">listener</span><span class="o">.</span><span class="na">testRunStopped</span><span class="o">(</span><span class="n">elapsedTime</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="cm">/**
     * {@inheritDoc}
     */</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">testRunEnded</span><span class="o">(</span><span class="kt">long</span> <span class="n">elapsedTime</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">runMetrics</span><span class="o">)</span> <span class="o">{</span>
<span class="c1">//      CLog.logAndDisplay(LogLevel.INFO,</span>
<span class="c1">//              String.format("[testRunEnded] elapsedTime: %d", elapsedTime));</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">ITestInvocationListener</span> <span class="n">listener</span> <span class="o">:</span> <span class="n">mListeners</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">listener</span><span class="o">.</span><span class="na">testRunEnded</span><span class="o">(</span><span class="n">elapsedTime</span><span class="o">,</span> <span class="n">runMetrics</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="cm">/**
     * {@inheritDoc}
     */</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">testStarted</span><span class="o">(</span><span class="n">TestIdentifier</span> <span class="n">test</span><span class="o">)</span> <span class="o">{</span>
<span class="c1">//      CLog.logAndDisplay(LogLevel.INFO,</span>
<span class="c1">//              String.format("[testStarted] %s", test.toString()));</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">ITestInvocationListener</span> <span class="n">listener</span> <span class="o">:</span> <span class="n">mListeners</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">listener</span><span class="o">.</span><span class="na">testStarted</span><span class="o">(</span><span class="n">test</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="cm">/**
     * {@inheritDoc}
     */</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">testFailed</span><span class="o">(</span><span class="n">TestFailure</span> <span class="n">status</span><span class="o">,</span> <span class="n">TestIdentifier</span> <span class="n">test</span><span class="o">,</span> <span class="n">String</span> <span class="n">trace</span><span class="o">)</span> <span class="o">{</span>
<span class="c1">//      CLog.logAndDisplay(LogLevel.INFO,</span>
<span class="c1">//              String.format("[testFailed] %s", test.toString()));</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">ITestInvocationListener</span> <span class="n">listener</span> <span class="o">:</span> <span class="n">mListeners</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">listener</span><span class="o">.</span><span class="na">testFailed</span><span class="o">(</span><span class="n">status</span><span class="o">,</span> <span class="n">test</span><span class="o">,</span> <span class="n">trace</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="cm">/**
     * {@inheritDoc}
     */</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">testEnded</span><span class="o">(</span><span class="n">TestIdentifier</span> <span class="n">test</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">testMetrics</span><span class="o">)</span> <span class="o">{</span>
<span class="c1">//      CLog.logAndDisplay(LogLevel.INFO,</span>
<span class="c1">//              String.format("[testEnded] %s", test.toString()));</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">ITestInvocationListener</span> <span class="n">listener</span> <span class="o">:</span> <span class="n">mListeners</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">listener</span><span class="o">.</span><span class="na">testEnded</span><span class="o">(</span><span class="n">test</span><span class="o">,</span> <span class="n">testMetrics</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

</pre>

<p>该类中继承于<code>ITestInvocationListener</code>接口，<code>ITestInvocationListener</code>也继承与<code>ITestRunListener</code>接口，然后在<code>ITestRunListener</code>接口接触上添加了一些cts自定义的方法。</p>

<p>而我们具体看看<code>ResultForwarder</code>构造方法你会发现，传递的参数是多个<code>ITestInvocationListener</code>对象，传递到<code>ResultForwarder</code>后保存到<code>List&lt;ITestInvocationListener&gt;</code>集合中。这样当我们<code>ResultForwarder</code>传递到<code>ddmlib</code>内部的时候，<code>ResultForwarder</code>相应方法被调用后，集合里的每一个<code>ITestInvocationListener</code>对象都会收到结果。良好的设计啊！</p>
<h4>ResultForwarder子类</h4>
<p>当case执行失败的时候，cts为我们准备了3个处理类，这三个类都是继承与<code>ResultForwarder</code>，因此它们都是case执行结果的监听器，case失败的时候会自动的进行相关的动作。</p>
<pre class="highlight java"><span class="cm">/**
     * 保存bugreport日志 A {@link ResultForwarder} that will forward a bugreport on
     * each failed test.
     */</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">FailedTestBugreportGenerator</span> <span class="kd">extends</span> <span class="n">ResultForwarder</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="n">ITestDevice</span> <span class="n">mDevice</span><span class="o">;</span>

        <span class="kd">public</span> <span class="n">FailedTestBugreportGenerator</span><span class="o">(</span><span class="n">ITestInvocationListener</span> <span class="n">listener</span><span class="o">,</span> <span class="n">ITestDevice</span> <span class="n">device</span><span class="o">)</span> <span class="o">{</span>
            <span class="kd">super</span><span class="o">(</span><span class="n">listener</span><span class="o">);</span>
            <span class="n">mDevice</span> <span class="o">=</span> <span class="n">device</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// 当ddmlib中ITestRunListener监听器触发testFailed方法时,该方法被调用.ITestRunListener的方法是由ddmlib内部调用的</span>
        <span class="c1">// 该方法将在android-cts\repository\logs生成bugreport信息的文本文件并打包</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="n">testFailed</span><span class="o">(</span><span class="n">TestFailure</span> <span class="n">status</span><span class="o">,</span> <span class="n">TestIdentifier</span> <span class="n">test</span><span class="o">,</span> <span class="n">String</span> <span class="n">trace</span><span class="o">)</span> <span class="o">{</span>
            <span class="kd">super</span><span class="o">.</span><span class="na">testFailed</span><span class="o">(</span><span class="n">status</span><span class="o">,</span> <span class="n">test</span><span class="o">,</span> <span class="n">trace</span><span class="o">);</span>
            <span class="n">InputStreamSource</span> <span class="n">bugSource</span> <span class="o">=</span> <span class="n">mDevice</span><span class="o">.</span><span class="na">getBugreport</span><span class="o">();</span>
            <span class="c1">// System.out.println("CtsTest.FailedTestBugreportGenerator.testFailed: 执行case失败,需要保存当前bugreport的信息");</span>
            <span class="c1">// CLog.logAndDisplay(LogLevel.INFO,</span>
            <span class="c1">// String.format("[testFailed] %s", test.toString()));</span>
            <span class="kd">super</span><span class="o">.</span><span class="na">testLog</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"bug-%s_%s"</span><span class="o">,</span> <span class="n">test</span><span class="o">.</span><span class="na">getClassName</span><span class="o">(),</span> <span class="n">test</span><span class="o">.</span><span class="na">getTestName</span><span class="o">()),</span> <span class="n">LogDataType</span><span class="o">.</span><span class="na">TEXT</span><span class="o">,</span> <span class="n">bugSource</span><span class="o">);</span>
            <span class="n">bugSource</span><span class="o">.</span><span class="na">cancel</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 保存system缓冲区的日志 A {@link ResultForwarder} that will forward a logcat
     * snapshot on each failed test.
     */</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">FailedTestLogcatGenerator</span> <span class="kd">extends</span> <span class="n">ResultForwarder</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="n">ITestDevice</span> <span class="n">mDevice</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kt">int</span> <span class="n">mNumLogcatBytes</span><span class="o">;</span>

        <span class="kd">public</span> <span class="n">FailedTestLogcatGenerator</span><span class="o">(</span><span class="n">ITestInvocationListener</span> <span class="n">listener</span><span class="o">,</span> <span class="n">ITestDevice</span> <span class="n">device</span><span class="o">,</span> <span class="kt">int</span> <span class="n">maxLogcatBytes</span><span class="o">)</span> <span class="o">{</span>
            <span class="kd">super</span><span class="o">(</span><span class="n">listener</span><span class="o">);</span>
            <span class="n">mDevice</span> <span class="o">=</span> <span class="n">device</span><span class="o">;</span>
            <span class="n">mNumLogcatBytes</span> <span class="o">=</span> <span class="n">maxLogcatBytes</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="n">testFailed</span><span class="o">(</span><span class="n">TestFailure</span> <span class="n">status</span><span class="o">,</span> <span class="n">TestIdentifier</span> <span class="n">test</span><span class="o">,</span> <span class="n">String</span> <span class="n">trace</span><span class="o">)</span> <span class="o">{</span>
            <span class="kd">super</span><span class="o">.</span><span class="na">testFailed</span><span class="o">(</span><span class="n">status</span><span class="o">,</span> <span class="n">test</span><span class="o">,</span> <span class="n">trace</span><span class="o">);</span>
            <span class="c1">// sleep a small amount of time to ensure test failure stack trace</span>
            <span class="c1">// makes it into logcat</span>
            <span class="c1">// capture</span>
            <span class="n">RunUtil</span><span class="o">.</span><span class="na">getDefault</span><span class="o">().</span><span class="na">sleep</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
            <span class="n">InputStreamSource</span> <span class="n">logSource</span> <span class="o">=</span> <span class="n">mDevice</span><span class="o">.</span><span class="na">getLogcat</span><span class="o">(</span><span class="n">mNumLogcatBytes</span><span class="o">);</span>
            <span class="kd">super</span><span class="o">.</span><span class="na">testLog</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"logcat-%s_%s"</span><span class="o">,</span> <span class="n">test</span><span class="o">.</span><span class="na">getClassName</span><span class="o">(),</span> <span class="n">test</span><span class="o">.</span><span class="na">getTestName</span><span class="o">()),</span> <span class="n">LogDataType</span><span class="o">.</span><span class="na">TEXT</span><span class="o">,</span> <span class="n">logSource</span><span class="o">);</span>
            <span class="n">logSource</span><span class="o">.</span><span class="na">cancel</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 保存截图 A {@link ResultForwarder} that will forward a screenshot on test
     * failures.
     */</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">FailedTestScreenshotGenerator</span> <span class="kd">extends</span> <span class="n">ResultForwarder</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="n">ITestDevice</span> <span class="n">mDevice</span><span class="o">;</span>

        <span class="kd">public</span> <span class="n">FailedTestScreenshotGenerator</span><span class="o">(</span><span class="n">ITestInvocationListener</span> <span class="n">listener</span><span class="o">,</span> <span class="n">ITestDevice</span> <span class="n">device</span><span class="o">)</span> <span class="o">{</span>
            <span class="kd">super</span><span class="o">(</span><span class="n">listener</span><span class="o">);</span>
            <span class="n">mDevice</span> <span class="o">=</span> <span class="n">device</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="n">testFailed</span><span class="o">(</span><span class="n">TestFailure</span> <span class="n">status</span><span class="o">,</span> <span class="n">TestIdentifier</span> <span class="n">test</span><span class="o">,</span> <span class="n">String</span> <span class="n">trace</span><span class="o">)</span> <span class="o">{</span>
            <span class="kd">super</span><span class="o">.</span><span class="na">testFailed</span><span class="o">(</span><span class="n">status</span><span class="o">,</span> <span class="n">test</span><span class="o">,</span> <span class="n">trace</span><span class="o">);</span>

            <span class="k">try</span> <span class="o">{</span>
                <span class="n">InputStreamSource</span> <span class="n">screenSource</span> <span class="o">=</span> <span class="n">mDevice</span><span class="o">.</span><span class="na">getScreenshot</span><span class="o">();</span>
                <span class="kd">super</span><span class="o">.</span><span class="na">testLog</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"screenshot-%s_%s"</span><span class="o">,</span> <span class="n">test</span><span class="o">.</span><span class="na">getClassName</span><span class="o">(),</span> <span class="n">test</span><span class="o">.</span><span class="na">getTestName</span><span class="o">()),</span> <span class="n">LogDataType</span><span class="o">.</span><span class="na">PNG</span><span class="o">,</span> <span class="n">screenSource</span><span class="o">);</span>
                <span class="n">screenSource</span><span class="o">.</span><span class="na">cancel</span><span class="o">();</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">DeviceNotAvailableException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// TODO: rethrow this somehow</span>
                <span class="n">CLog</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">"Device %s became unavailable while capturing screenshot, %s"</span><span class="o">,</span> <span class="n">mDevice</span><span class="o">.</span><span class="na">getSerialNumber</span><span class="o">(),</span> <span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>

</pre>

<p><code>1</code>.老大FailedTestBugreportGenerator：保存bugreport信息。<br>
<code>2</code>.老二FailedTestLogcatGenerator：logcat信息，system缓冲区里的日志信息保存到本地。<br>
<code>3</code>.老三FailedTestScreenshotGenerator：截图，case失败时保存第一现场的截图。</p>
      </div>

      <div class="excellent">
        <i class="icon small_cert_on"></i> 本帖已被设为精华帖！
      </div>

      

      <div class="tools pull-right">
  
  <a class="likeable" href="../account/password/edit"><i class="icon small_like"></i> <span>喜欢</span></a>
  
  <a href="http://cli.im/api/qrcode"><i class="icon icon-qrcode"></i>二维码</a>
</div>
<div class='social-share-button' data-title='CTS 框架解析之 case 执行结果处理模块 via: @testerhome ' data-img='' data-url=''>
<a class="social-share-button-twitter" data-site="twitter" href="1890#" onclick="return SocialShareButton.share(this);" rel="nofollow " title="分享到Twitter"></a>
<a class="social-share-button-facebook" data-site="facebook" href="1890#" onclick="return SocialShareButton.share(this);" rel="nofollow " title="分享到Facebook"></a>
<a class="social-share-button-google_plus" data-site="google_plus" href="1890#" onclick="return SocialShareButton.share(this);" rel="nofollow " title="分享到Google+"></a>
<a class="social-share-button-weibo" data-site="weibo" href="1890#" onclick="return SocialShareButton.share(this);" rel="nofollow " title="分享到新浪微博"></a>
<a class="social-share-button-douban" data-site="douban" href="1890#" onclick="return SocialShareButton.share(this);" rel="nofollow " title="分享到豆瓣"></a>
</div>

    </div>
  </div>

    <div class="no_result">
      暂无回复。
    </div>

      <div id="reply" class="form box">
    <div style="padding:20px;">
    需要 <a class="btn btn-primary" href="../account/password/edit">登录</a> 后回复方可回复, 如果你还没有账号你可以 <a class="btn btn-danger" href="../account/sign_up">注册</a> 一个帐号。
    </div>
</div>
</div>

  <div class="sidebar">
    
    <div class="box">
  <h2 class="title">小帖士</h2>
  <div class="content">
    @shixue33 我想~~~在深圳找个好工作~~~找个男朋友！
  </div>
</div>
    <div class="box clearfix">
  <h2 class="title">节点下其他话题</h2>
  <ul>
    <li><a href="1914" title="求留下 testerhome">求留下 testerhome</a></li>
  </ul>
</div>

  </div>

    </div>
  </div>

  <a class="go_top" href="1890#"><i class="icon icons_go_top"></i></a>
  <footer class="footer">
    <div class="container">
      <div class="container">
      <div class="pull-right" style="width:200px; text-align:right;">
<a href="http://www.ucloud.cn/?ref=testerhome.com" target="_blank" rel="twipsy" style="display:inline-block;margin-right:5px;" data-original-title="本站服务器由 Ucloud 赞助"><img src="../photo/2014/ace04e205ff40be04f47de439d253b59.png" style="height:28px"></a>
</div>

<div>
<div class="pull-left" style="margin-right:10px;">
<img src="../photo/2015/7b5b57bb91762429809a9f95255392ad.png" style="width:48px;">
</div>
<p class="links">

<a href="143">关于</a> | 
<a href="http://weibo.com/u/3871514412">微博</a> | 
<a href="../users.1">活跃用户</a> | 
<a href="node13">反馈</a> | 
<a href="https://github.com/testerhome">Github</a> |
<a href="../wiki/spreadtesterhome">帮助推广</a> |  
<a href="http://www.miibeian.gov.cn/">京ICP备13049862号</a>


</p>
<p class="copyright">
TesterHome 移动测试社区，由众多移动测试工作者维护，致力于推进国内测试技术。
</p>
<p class="copyright">
友情链接

<a href="http://ruby-china.org/"  rel="twipsy" style="display:inline-block;margin-right:5px;" data-original-title="感谢RubyChina提供建站代码">Ruby-China</a> | 
<a href="http://www.diggerplus.org/">DiggerPlus</a> | 
<a href="http://www.testwo.com/">测试窝</a> | 
<a href="http://www.kootest.com/">酷测</a> | 
<a href="http://itest.info/">重定向科技</a> |
<a href="http://www.robotium.cn/">Robotium 中国</a> |
<a href="http://cafe.testin.cn/">Testin开发者社区</a>
<script src="http://s4.cnzz.com/z_stat.php?id=1000474281&web_id=1000474281" language="JavaScript"></script>

</p>

</div>
    </div>






    </div>
  </footer>
  <script type="text/javascript" data-turbolinks-eval=false>
    App.root_url = "http://testerhome.com/";
    App.asset_url = "http://testerhome.com";
    App.faye_client_url = "http://testerhome.com:8080/faye";
    if (App.faye_client_url) {
      App.initNotificationSubscribe();
    }
  </script>
    <script type="text/javascript">
    Topics.replies_per_page = 50;
    $(document).ready(function(){
    })
  </script>

  <script type="text/javascript">
      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-45014075-1']);
      _gaq.push(['_setSiteSpeedSampleRate', 100]);
      _gaq.push(['_trackPageview']);
      u=document.getElementById("user_menu");
      ur="";
      if(u) ur=document.getElementById("user_menu").innerText.split(" ")[0]
      _gaq.push(['_setCustomVar', 1,'user',ur,1]);

      (function() {
          var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
          ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
          var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
      })();
  </script>

  <div class="zoom-overlay"></div>
</body>
</html>
