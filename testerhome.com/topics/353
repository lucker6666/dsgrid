<!--
  App Environments:
  --------------------------------------------------------
  Ruby:  2.1.2-p95
  Rails: 4.1.1
  Thanks to RubyChina
-->
<!DOCTYPE html>
<html>
<head>
  <title>TesterHome | [转载]Android 事件传递机制 &raquo; 社区</title>
  <meta charset='utf-8' />
  <meta name="keywords" content="" />
  <meta name="description" content="" />
  <link data-turbolinks-track="true" href="../assets/front-7f214c07ef8cbdd59ba99f0ea4b052b9.css" media="screen" rel="stylesheet" />
    <link href="../assets/mobile-4fb33e42cee242735db607f08badd48a.css" media="screen and (max-width: 798px)" rel="stylesheet" />
  <link rel="shortcut icon" href="../assets/big_logo-e45f9cf8961e479b209d942f449d3b7b.png" />
  <link href="feed" rel="alternate" title="订阅最新帖" type="application/rss+xml" />
  <script data-turbolinks-track="true" src="../assets/app-d8b8d53b12135c77eba5ce7899b456b3.js"></script>
  <meta content="authenticity_token" name="csrf-param" />
<meta content="n6IluQs+rvFYzOtLM2JildRgsvcNIwvZOjb84Ctm9Jg=" name="csrf-token" />
  
  
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "//hm.baidu.com/hm.js?bfca03d31121ff43bab8f1bf58dcb58b";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>

</head>
<body data-offset="50" data-controller-name="topics">
  <div class="navbar navbar-fixed-top">
    <div class="navbar-inner">
      <div class="container">
        <h3>
          <a href="../index.html" class="site-logo"></a>
        </h3>
        <ul class="nav"><li class="first"><a href="../index.html">首页</a></li><li class="active"><a href="../notes/2">社区</a></li><li><a href="../wiki">Wiki</a></li><li><a href="../jobs">招聘</a></li><li class="last"><a href="../sites">酷站</a></li></ul>
        <span class="pull-right">
          <form action="http://testerhome.com/search" class="navbar-search" method="get">
            <input type="text" name="q" class="search-query" value="" placeholder="搜索" />
          </form>

            <ul class="nav pull-right" id="userbar"><li class="first"><a href="../account/sign_up">注册</a></li><li class="last"><a href="../account/password/edit">登录</a></li></ul>

        </span>
      </div>
    </div>
  </div>

  <div class="container">
    
    
    <div id="main" class="container-fluid">
      
<div class="content">
  <div id="topic_show" class="topics box hfeed">
    <div class="topic hentry">
      <div class="infos">
  <div class="pull-right avatar_large">
    <a href="../seveniruby"><img alt="104" class="uface" src="../user/large_avatar/104.jpg" style="width:48px;height:48px;" /></a>
  </div>
  <h1 class="entry-title">[转载]Android 事件传递机制</h1>
  <div class="info leader">
    <a class="node" href="node33">移动测试基础</a>
     · 
    <a data-author="true" data-name="思寒" href="../seveniruby">seveniruby</a>
     · 
    于<abbr class="timeago" title="2014-01-02T22:10:18+08:00"></abbr>发布
     · 
    326次阅读
  </div>
</div>

      
      <div class="body entry-content">
        <p>写的很好, 建议大家试验下. 也理解下android这个机制. 有助于以后移动测试框架的设计.<br>
原文地址 <a href="http://www.infoq.com/cn/articles/android-event-delivery-mechanism" rel="nofollow" target="_blank">http://www.infoq.com/cn/articles/android-event-delivery-mechanism</a></p>

<p>实验环境</p>

<p>OS X 10.9<br>
Eclipse(ADT)<br>
Android源码版本：API Level 19（Android 4.4）<br>
Android事件构成</p>

<p>在Android中，事件主要包括点按、长按、拖拽、滑动等，点按又包括单击和双击，另外还包括单指操作和多指操作。所有这些都构成了Android中的事件响应。总的来说，所有的事件都由如下三个部分作为基础：</p>

<p>按下（ACTION_DOWN）<br>
移动（ACTION_MOVE）<br>
抬起（ACTION_UP）<br>
所有的操作事件首先必须执行的是按下操作（ACTIONDOWN），之后所有的操作都是以按下操作作为前提，当按下操作完成后，接下来可能是一段移动（ACTIONMOVE）然后抬起（ACTION_UP），或者是按下操作执行完成后没有移动就直接抬起。这一系列的动作在Android中都可以进行控制。</p>

<p>我们知道，所有的事件操作都发生在触摸屏上，而在屏幕上与我们交互的就是各种各样的视图组件（View），在Android中，所有的视图都继承于View，另外通过各种布局组件（ViewGroup）来对View进行布局，ViewGroup也继承于View。所有的UI控件例如Button、TextView都是继承于View，而所有的布局控件例如RelativeLayout、容器控件例如ListView都是继承于ViewGroup。所以，我们的事件操作主要就是发生在View和ViewGroup之间，那么View和ViewGroup中主要有哪些方法来对这些事件进行响应呢？记住如下3个方法，我们通过查看View和ViewGroup的源码可以看到：</p>

<p>View.java</p>

<p>public boolean dispatchTouchEvent(MotionEvent event)<br>
public boolean onTouchEvent(MotionEvent event) <br>
ViewGroup.java</p>

<p>相关厂商内容</p>

<p>文章：房芳解析LBS应用的需求和创新空间 iOS地图SDK支持大地曲线、虚线，全面升级地图覆盖物！ Android地图SDK开放openGL接口，定位图标360度旋转 Windows 8地图SDK可支持地图显示与操作 Windows Phone 8地图SDK(V2)全新上线<br>
相关赞助商</p>

<p>高德地图lbs专区，惊爆内容精彩呈现！</p>

<p>public boolean dispatchTouchEvent(MotionEvent event)<br>
public boolean onTouchEvent(MotionEvent event) <br>
public boolean onInterceptTouchEvent(MotionEvent event)<br>
在View和ViewGroup中都存在dispatchTouchEvent和onTouchEvent方法，但是在ViewGroup中还有一个onInterceptTouchEvent方法，那这些方法都是干嘛的呢？别急，我们先看看他们的返回值。这些方法的返回值全部都是boolean型，为什么是boolean型呢，看看本文的标题，“事件传递”，传递的过程就是一个接一个，那到了某一个点后是否要继续往下传递呢？你发现了吗，“是否”二字就决定了这些方法应该用boolean来作为返回值。没错，这些方法都返回true或者是false。在Android中，所有的事件都是从开始经过传递到完成事件的消费，这些方法的返回值就决定了某一事件是否是继续往下传，还是被拦截了，或是被消费了。</p>

<p>接下来就是这些方法的参数，都接受了一个MotionEvent类型的参数，MotionEvent继承于InputEvent，用于标记各种动作事件。之前提到的ACTIONDOWN、ACTIONMOVE、ACTION_UP都是MotinEvent中定义的常量。我们通过MotionEvent传进来的事件类型来判断接收的是哪一种类型的事件。到现在，这三个方法的返回值和参数你应该都明白了，接下来就解释一下这三个方法分别在什么时候处理事件。</p>

<p>dispatchTouchEvent方法用于事件的分发，Android中所有的事件都必须经过这个方法的分发，然后决定是自身消费当前事件还是继续往下分发给子控件处理。返回true表示不继续分发，事件没有被消费。返回false则继续往下分发，如果是ViewGroup则分发给onInterceptTouchEvent进行判断是否拦截该事件。<br>
onTouchEvent方法用于事件的处理，返回true表示消费处理当前事件，返回false则不处理，交给子控件进行继续分发。<br>
onInterceptTouchEvent是ViewGroup中才有的方法，View中没有，它的作用是负责事件的拦截，返回true的时候表示拦截当前事件，不继续往下分发，交给自身的onTouchEvent进行处理。返回false则不拦截，继续往下传。这是ViewGroup特有的方法，因为ViewGroup中可能还有子View，而在Android中View中是不能再包含子View的（iOS可以）。<br>
到目前为止，Android中事件的构成以及事件处理方法的作用你应该比较清楚了，接下来我们就通过一个Demo来实际体验实验一下。</p>

<p>Android事件处理</p>

<p>首先在Eclipse新建一个工程，并新建一个类RTButton继承Button，用来实现我们对按钮事件的跟踪。</p>

<p>RTButton.java</p>

<p>public class RTButton extends Button {<br>
    public RTButton(Context context, AttributeSet attrs) {<br>
        super(context, attrs);<br>
    }</p>

<p><a href="http://testerhome.com/Override" class="at_user" title="@Override"><i>@</i>Override</a><br>
    public boolean dispatchTouchEvent(MotionEvent event) {<br>
        switch (event.getAction()) {<br>
        case MotionEvent.ACTION_DOWN:<br>
            System.out.println("RTButton---dispatchTouchEvent---DOWN");<br>
            break;<br>
        case MotionEvent.ACTION_MOVE:<br>
            System.out.println("RTButton---dispatchTouchEvent---MOVE");<br>
            break;<br>
        case MotionEvent.ACTION_UP:<br>
            System.out.println("RTButton---dispatchTouchEvent---UP");<br>
            break;<br>
        default:<br>
            break;<br>
        }<br>
        return super.dispatchTouchEvent(event);<br>
    }</p>

<p><a href="http://testerhome.com/Override" class="at_user" title="@Override"><i>@</i>Override</a><br>
    public boolean onTouchEvent(MotionEvent event) {<br>
        switch (event.getAction()) {<br>
        case MotionEvent.ACTION_DOWN:<br>
            System.out.println("RTButton---onTouchEvent---DOWN");<br>
            break;<br>
        case MotionEvent.ACTION_MOVE:<br>
            System.out.println("RTButton---onTouchEvent---MOVE");<br>
            break;<br>
        case MotionEvent.ACTION_UP:<br>
            System.out.println("RTButton---onTouchEvent---UP");<br>
            break;<br>
        default:<br>
            break;<br>
        }<br>
        return super.onTouchEvent(event);<br>
    }<br>
}<br>
在RTButton中我重写了dispatchTouchEvent和onTouchEvent方法，并获取了MotionEvent各个事件状态，打印输出了每一个状态下的信息。然后在activity_main.xml中直接在根布局下放入自定义的按钮RTButton。</p>

<p>activity_main.xml</p>

<p>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"<br>
    xmlns:tools="http://schemas.android.com/tools"<br>
    android:id="@+id/myLayout"<br>
    android:layout_width="match_parent"<br>
    android:layout_height="match_parent" &gt;</p>

<p>&lt;com.ryantang.eventdispatchdemo.RTButton <br>
        android:id="@+id/btn"<br>
        android:layout_width="match_parent"<br>
        android:layout_height="wrap_content"<br>
        android:text="Button"/&gt;</p>

<p>&lt;/LinearLayout&gt;<br>
接下来在Activity中为RTButton设置onTouch和onClick的监听器来跟踪事件传递的过程，另外，Activity中也有一个dispatchTouchEvent方法和一个onTouchEvent方法，我们也重写他们并输出打印信息。</p>

<p>MainActivity.java</p>

<p>public class MainActivity extends Activity {<br>
    private RTButton button;</p>

<p><a href="http://testerhome.com/Override" class="at_user" title="@Override"><i>@</i>Override</a><br>
    protected void onCreate(Bundle savedInstanceState) {<br>
        super.onCreate(savedInstanceState);<br>
        setContentView(R.layout.activity_main);<br>
        button = (RTButton)this.findViewById(R.id.btn);<br>
        button.setOnTouchListener(new OnTouchListener() {</p>

<p><a href="http://testerhome.com/Override" class="at_user" title="@Override"><i>@</i>Override</a><br>
            public boolean onTouch(View v, MotionEvent event) {<br>
                switch (event.getAction()) {<br>
                case MotionEvent.ACTION_DOWN:<br>
                    System.out.println("RTButton---onTouch---DOWN");<br>
                    break;<br>
                case MotionEvent.ACTION_MOVE:<br>
                    System.out.println("RTButton---onTouch---MOVE");<br>
                    break;<br>
                case MotionEvent.ACTION_UP:<br>
                    System.out.println("RTButton---onTouch---UP");<br>
                    break;<br>
                default:<br>
                    break;<br>
                }<br>
                return false;<br>
            }<br>
        });</p>

<p>button.setOnClickListener(new OnClickListener() {</p>

<p><a href="http://testerhome.com/Override" class="at_user" title="@Override"><i>@</i>Override</a><br>
            public void onClick(View v) {<br>
                System.out.println("RTButton clicked!");<br>
            }<br>
        });</p>

<p>}</p>

<p><a href="http://testerhome.com/Override" class="at_user" title="@Override"><i>@</i>Override</a><br>
    public boolean dispatchTouchEvent(MotionEvent event) {<br>
        switch (event.getAction()) {<br>
        case MotionEvent.ACTION_DOWN:<br>
          System.out.println("Activity---dispatchTouchEvent---DOWN");<br>
          break;<br>
        case MotionEvent.ACTION_MOVE:<br>
              System.out.println("Activity---dispatchTouchEvent---MOVE");<br>
          break;<br>
        case MotionEvent.ACTION_UP:<br>
          System.out.println("Activity---dispatchTouchEvent---UP");<br>
          break;<br>
        default:<br>
          break;<br>
        }<br>
        return super.dispatchTouchEvent(event);<br>
    }</p>

<p><a href="http://testerhome.com/Override" class="at_user" title="@Override"><i>@</i>Override</a><br>
    public boolean onTouchEvent(MotionEvent event) {<br>
        switch (event.getAction()) {<br>
        case MotionEvent.ACTION_DOWN:<br>
          System.out.println("Activity---onTouchEvent---DOWN");<br>
          break;<br>
        case MotionEvent.ACTION_MOVE:<br>
          System.out.println("Activity---onTouchEvent---MOVE");<br>
          break;<br>
        case MotionEvent.ACTION_UP:<br>
          System.out.println("Activity---onTouchEvent---UP");<br>
          break;<br>
        default:<br>
          break;<br>
        }<br>
        return super.onTouchEvent(event);<br>
    }<br>
}<br>
代码部分已经完成了，接下来运行工程，并点击按钮，查看日志输出信息，我们可以看到如下结果：</p>

<p>通过日志输出可以看到，首先执行了Activity的dispatchTouchEvent方法进行事件分发，在MainActivity.java代码第55行，dispatchTouchEvent方法的返回值是super.dispatchTouchEvent(event)，因此调用了父类方法，我们进入Activity.java的源码中看看具体实现。</p>

<p>Activity.java</p>

<p>/**<br>
     * Called to process touch screen events.  You can override this to<br>
     * intercept all touch screen events before they are dispatched to the<br>
     * window.  Be sure to call this implementation for touch screen events<br>
     * that should be handled normally.<br>
     * <br>
     * <a href="http://testerhome.com/param" class="at_user" title="@param"><i>@</i>param</a> ev The touch screen event.<br>
     * <br>
     * <a href="http://testerhome.com/return" class="at_user" title="@return"><i>@</i>return</a> boolean Return true if this event was consumed.<br>
     */<br>
    public boolean dispatchTouchEvent(MotionEvent ev) {<br>
        if (ev.getAction() == MotionEvent.ACTION_DOWN) {<br>
            onUserInteraction();<br>
        }<br>
        if (getWindow().superDispatchTouchEvent(ev)) {<br>
            return true;<br>
        }<br>
        return onTouchEvent(ev);<br>
    }</p>

<p>从源码中可以看到，dispatchTouchEvent方法只处理了ACTIONDOWN事件，前面提到过，所有的事件都是以按下为起点的，所以，Android认为当ACTIONDOWN事件没有执行时，后面的事件都是没有意义的，所以这里首先判断ACTION_DOWN事件。如果事件成立，则调用了onUserInteraction方法，该方法可以在Activity中被重写，在事件被分发前会调用该方法。该方法的返回值是void型，不会对事件传递结果造成影响，接着会判断getWindow().superDispatchTouchEvent(ev)的执行结果，看看它的源码：</p>

<p>Activity.java</p>

<p>/**<br>
     * Used by custom windows, such as Dialog, to pass the touch screen event<br>
     * further down the view hierarchy. Application developers should<br>
     * not need to implement or call this.<br>
     *<br>
     */<br>
    public abstract boolean superDispatchTouchEvent(MotionEvent event);<br>
通过源码注释我们可以了解到这是个抽象方法，用于自定义的Window，例如自定义Dialog传递触屏事件，并且提到开发者不需要去实现或调用该方法，系统会完成，如果我们在MainActivity中将dispatchTouchEvent方法的返回值设为true，那么这里的执行结果就为true，从而不会返回执行onTouchEvent(ev)，如果这里返回false，那么最终会返回执行onTouchEvent方法，由此可知，接下来要调用的就是onTouchEvent方法了。别急，通过日志输出信息可以看到，ACTION_DOWN事件从Activity被分发到了RTButton，接着执行了onTouch和onTouchEvent方法，为什么先执行onTouch方法呢？我们到RTButton中的dispatchTouchEvent看看View中的源码是如何处理的。</p>

<p>View.java</p>

<p>/**<br>
     * Pass the touch screen motion event down to the target view, or this<br>
     * view if it is the target.<br>
     *<br>
     * <a href="http://testerhome.com/param" class="at_user" title="@param"><i>@</i>param</a> event The motion event to be dispatched.<br>
     * <a href="http://testerhome.com/return" class="at_user" title="@return"><i>@</i>return</a> True if the event was handled by the view, false otherwise.<br>
     */<br>
    public boolean dispatchTouchEvent(MotionEvent event) {<br>
        if (mInputEventConsistencyVerifier != null) {<br>
            mInputEventConsistencyVerifier.onTouchEvent(event, 0);<br>
        }</p>

<p>if (onFilterTouchEventForSecurity(event)) {<br>
            //noinspection SimplifiableIfStatement<br>
            ListenerInfo li = mListenerInfo;<br>
            if (li != null &amp;&amp; li.mOnTouchListener != null &amp;&amp; (mViewFlags &amp;<br>
 ENABLED_MASK) == ENABLED  &amp;&amp; li.mOnTouchListener.onTouch(this, event)) {<br>
                return true;<br>
            }</p>

<p>if (onTouchEvent(event)) {<br>
                return true;<br>
            }<br>
        }</p>

<p>if (mInputEventConsistencyVerifier != null) {<br>
            mInputEventConsistencyVerifier.onUnhandledEvent(event, 0);<br>
        }<br>
        return false;<br>
    }<br>
挑选关键代码进行分析，可以看代码第16行，这里有几个条件，当几个条件都满足时该方法就返回true，当条件li.mOnTouchListener不为空时，通过在源码中查找，发现mOnTouchListener是在以下方法中进行设置的。</p>

<p>View.java</p>

<p>/**<br>
     * Register a callback to be invoked when a touch event is sent to this view.<br>
     * <a href="http://testerhome.com/param" class="at_user" title="@param"><i>@</i>param</a> l the touch listener to attach to this view<br>
     */<br>
    public void setOnTouchListener(OnTouchListener l) {<br>
        getListenerInfo().mOnTouchListener = l;<br>
    }<br>
这个方法就已经很熟悉了，就是我们在MainActivity.java中为RTButton设置的onTouchListener，条件(mViewFlags &amp; ENABLED_MASK) == ENABLED判断的是当前View是否是ENABLE的，默认都是ENABLE状态的。接着就是li.mOnTouchListener.onTouch(this, event)条件，这里调用了onTouch方法，该方法的调用就是我们在MainActivity.java中为RTButton设置的监听回调，如果该方法返回true，则整个条件都满足，dispatchTouchEvent就返回true，表示该事件就不继续向下分发了，因为已经被onTouch消费了。</p>

<p>如果onTouch返回的是false，则这个判断条件不成立，接着执行onTouchEvent(event)方法进行判断，如果该方法返回true，表示事件被onTouchEvent处理了，则整个dispatchTouchEvent就返回true。到这里，我们就可以回答之前提出的“为什么先执行onTouch方法”的问题了。到目前为止，ACTIONDOWN的事件经过了从Activity到RTButton的分发，然后经过onTouch和onTouchEvent的处理，最终，ACTIONDOWN事件交给了RTButton得onTouchEvent进行处理。</p>

<p>当我们的手（我这里用的Genymotion然后用鼠标进行的操作，用手的话可能会执行一些ACTIONMOVE操作）从屏幕抬起时，会发生ACTIONUP事件。从之前输出的日志信心中可以看到，ACTIONUP事件同样从Activity开始到RTButton进行分发和处理，最后，由于我们注册了onClick事件，当onTouchEvent执行完毕后，就调用了onClick事件，那么onClick是在哪里被调用的呢？继续回到View.java的源代码中寻找。由于onTouchEvent在View.java中的源码比较长，这里就不贴出来了，感兴趣的可以自己去研究一下，通过源码阅读，我们在ACTIONUP的处理分支中可以看到一个performClick()方法，从这个方法的源码中可以看到执行了哪些操作。</p>

<p>View.java</p>

<p>/**<br>
     * Call this view's OnClickListener, if it is defined.  Performs all normal<br>
     * actions associated with clicking: reporting accessibility event, playing<br>
     * a sound, etc.<br>
     *<br>
     * <a href="http://testerhome.com/return" class="at_user" title="@return"><i>@</i>return</a> True there was an assigned OnClickListener that was called, false<br>
     *         otherwise is returned.<br>
     */<br>
    public boolean performClick() {<br>
        sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);</p>

<p>ListenerInfo li = mListenerInfo;<br>
        if (li != null &amp;&amp; li.mOnClickListener != null) {<br>
            playSoundEffect(SoundEffectConstants.CLICK);<br>
            li.mOnClickListener.onClick(this);<br>
            return true;<br>
        }</p>

<p>return false;<br>
    }<br>
在if分支里可以看到执行了li.mOnClickListener.onClick(this);这句代码，这里就执行了我们为RTButton实现的onClick方法，所以，到目前为止，可以回答前一个“onClick是在哪里被调用的呢？”的问题了，onClick是在onTouchEvent中被执行的，并且，onClick要后于onTouch的执行。</p>

<p>到此，点击按钮的事件传递就结束了，我们结合源代码窥探了其中的执行细节，如果我们修改各个事件控制方法的返回值又会发生什么情况呢，带着这个问题，进入下一节的讨论。</p>

<p>Android事件拦截</p>

<p>从上一节分析中，我们知道了在Android中存在哪些事件类型，事件的传递过程以及在源码中对应哪些处理方法。我们可以知道在Android中，事件是通过层级传递的，一次事件传递对应一个完整的层级关系，例如上节中分析的ACTIONDOWN事件从Activity传递到RTButton，ACTIONUP事件也同样。结合源码分析各个事件处理的方法，也可以明确看到事件的处理流程。</p>

<p>之前提过，所有事件处理方法的返回值都是boolean类型的，现在我们来修改这个返回值，首先从Activity开始，根据之前的日志输出结果，首先执行的是Activity的dispatchTouchEvent方法，现在将之前的返回值super.dispatchTouchEvent(event)修改为true，然后重新编译运行并点击按钮，看到如下的日志输出结果。</p>

<p>可以看到，事件执行到dispatchTouchEvent方法就没有再继续往下分发了，这也验证了之前的说法，返回true时，不再继续往下分发，从之前分析过的Activity的dispatchTouchEvent源码中也可知，当返回true时，就没有去执行onTouchEvent方法了。</p>

<p>接着，将上述修改还原，让事件在Activity这继续往下分发，接着就分发到了RTButton，将RTButton的dispatchTouchEvent方法的返回值修改为true，重新编译运行并查看输出日志结果。</p>

<p>从结果可以看到，事件在RTButton的dispatchTouchEvent方法中就没有再继续往下分发了。接着将上述修改还原，将RTButton的onTouchEvent方法返回值修改为true，让其消费事件，根据之前的分析，onClick方法是在onTouchEvent方法中被调用的，事件在这被消费后将不会调用onClick方法了，编译运行，得到如下日志输出结果。</p>

<p>跟分析结果一样，onClick方法并没有被执行，因为事件在RTButton的onTouchEvent方法中被消费了。下图是整个事件传递的流程图。</p>

<p>到目前为止，Android中的事件拦截机制就分析完了。但这里我们只讨论了单布局结构下单控件的情况，如果是嵌套布局，那情况又是怎样的呢？接下来我们就在嵌套布局的情况下对Android的事件传递机制进行进一步的探究和分析。</p>

<p>Android嵌套布局事件传递</p>

<p>首先，新建一个类RTLayout继承于LinearLayout，同样重写dispatchTouchEvent和onTouchEvent方法，另外，还需要重写onInterceptTouchEvent方法，在文章开头介绍过，这个方法只有在ViewGroup和其子类中才存在，作用是控制是否需要拦截事件。这里不要和dispatchTouchEvent弄混淆了，后者是控制对事件的分发，并且后者要先执行。</p>

<p>那么，事件是先传递到View呢，还是先传递到ViewGroup的？通过下面的分析我们可以得出结论。首先，我们需要对工程代码进行一些修改。</p>

<p>RTLayout.java</p>

<p>public class RTLayout extends LinearLayout {<br>
    public RTLayout(Context context, AttributeSet attrs) {<br>
        super(context, attrs);<br>
    }</p>

<p><a href="http://testerhome.com/Override" class="at_user" title="@Override"><i>@</i>Override</a><br>
    public boolean dispatchTouchEvent(MotionEvent event) {<br>
        switch (event.getAction()) {<br>
        case MotionEvent.ACTION_DOWN:<br>
          System.out.println("RTLayout---dispatchTouchEvent---DOWN");<br>
          break;<br>
        case MotionEvent.ACTION_MOVE:<br>
          System.out.println("RTLayout---dispatchTouchEvent---MOVE");<br>
          break;<br>
        case MotionEvent.ACTION_UP:<br>
          System.out.println("RTLayout---dispatchTouchEvent---UP");<br>
          break;<br>
        default:<br>
          break;<br>
        }<br>
        return super.dispatchTouchEvent(event);<br>
    }</p>

<p><a href="http://testerhome.com/Override" class="at_user" title="@Override"><i>@</i>Override</a><br>
    public boolean onInterceptTouchEvent(MotionEvent event) {<br>
        switch (event.getAction()) {<br>
        case MotionEvent.ACTION_DOWN:<br>
            System.out.println("RTLayout---onInterceptTouchEvent---DOWN");<br>
            break;<br>
        case MotionEvent.ACTION_MOVE:<br>
            System.out.println("RTLayout---onInterceptTouchEvent---MOVE");<br>
            break;<br>
        case MotionEvent.ACTION_UP:<br>
            System.out.println("RTLayout---onInterceptTouchEvent---UP");<br>
            break;<br>
        default:<br>
            break;<br>
        }<br>
        return super.onInterceptTouchEvent(event);<br>
    }</p>

<p><a href="http://testerhome.com/Override" class="at_user" title="@Override"><i>@</i>Override</a><br>
    public boolean onTouchEvent(MotionEvent event) {<br>
        switch (event.getAction()) {<br>
        case MotionEvent.ACTION_DOWN:<br>
            System.out.println("RTLayout---onTouchEvent---DOWN");<br>
            break;<br>
        case MotionEvent.ACTION_MOVE:<br>
            System.out.println("RTLayout---onTouchEvent---MOVE");<br>
            break;<br>
        case MotionEvent.ACTION_UP:<br>
            System.out.println("RTLayout---onTouchEvent---UP");<br>
            break;<br>
        default:<br>
            break;<br>
        }<br>
        return super.onTouchEvent(event);<br>
    }<br>
}<br>
同时，在布局文件中为RTButton添加一个父布局，指明为自定义的RTLayout，修改后的布局文件如下。</p>

<p>activity_main.xml</p>

<p>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"<br>
    xmlns:tools="http://schemas.android.com/tools"<br>
    android:layout_width="match_parent"<br>
    android:layout_height="match_parent" &gt;</p>

<p>&lt;com.ryantang.eventdispatchdemo.RTLayout<br>
        android:id="@+id/myLayout"<br>
        android:layout_width="match_parent"<br>
        android:layout_height="match_parent" &gt;</p>

<p>&lt;com.ryantang.eventdispatchdemo.RTButton<br>
            android:id="@+id/btn"<br>
            android:layout_width="match_parent"<br>
            android:layout_height="wrap_content"<br>
            android:text="Button" /&gt;<br>
    &lt;/com.ryantang.eventdispatchdemo.RTLayout&gt;</p>

<p>&lt;/LinearLayout&gt;<br>
最后，我们在Activity中也为RTLayout设置onTouch和onClick事件，在MainActivity中添加如下代码。</p>

<p>MainActivity.java</p>

<p>rtLayout.setOnTouchListener(new OnTouchListener() {</p>

<p><a href="http://testerhome.com/Override" class="at_user" title="@Override"><i>@</i>Override</a><br>
            public boolean onTouch(View v, MotionEvent event) {<br>
                switch (event.getAction()) {<br>
                case MotionEvent.ACTION_DOWN:<br>
                    System.out.println("RTLayout---onTouch---DOWN");<br>
                    break;<br>
                case MotionEvent.ACTION_MOVE:<br>
                    System.out.println("RTLayout---onTouch---MOVE");<br>
                    break;<br>
                case MotionEvent.ACTION_UP:<br>
                    System.out.println("RTLayout---onTouch---UP");<br>
                    break;<br>
                default:<br>
                    break;<br>
                }<br>
                return false;<br>
            }<br>
        });</p>

<p>rtLayout.setOnClickListener(new OnClickListener() {</p>

<p><a href="http://testerhome.com/Override" class="at_user" title="@Override"><i>@</i>Override</a><br>
            public void onClick(View v) {<br>
                System.out.println("RTLayout clicked!");<br>
            }<br>
        });<br>
代码修改完毕后，编译运行工程，同样，点击按钮，查看日志输出结果如下：</p>

<p>从日志输出结果我们可以看到，嵌套了RTLayout以后，事件传递的顺序变成了Activity-&gt;RTLayout-&gt;RTButton，这也就回答了前面提出的问题，Android中事件传递是从ViewGroup传递到View的，而不是反过来传递的。</p>

<p>从输出结果第三行可以看到，执行了RTLayout的onInterceptTouchEvent方法，该方法的作用就是判断是否需要拦截事件，我们到ViewGroup的源码中看看该方法的实现。</p>

<p>ViewGroup.java</p>

<p>public boolean onInterceptTouchEvent(MotionEvent ev) {<br>
        return false;<br>
    }<br>
该方法的实现很简单，只返回了一个false。那么这个方法是在哪被调用的呢，通过日志输出分析可知它是在RTLayout的dispatchTouchEvent执行后执行的，那我们就进到dispatchTouchEvent源码里面去看看。由于源码比较长，我将其中的关键部分截取出来做解释说明。</p>

<p>ViewGroup.java</p>

<p>// Check for interception.<br>
            final boolean intercepted;<br>
            if (actionMasked == MotionEvent.ACTION_DOWN<br>
                    || mFirstTouchTarget != null) {<br>
                final boolean disallowIntercept = (mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != 0;<br>
                if (!disallowIntercept) {<br>
                    intercepted = onInterceptTouchEvent(ev);<br>
                    ev.setAction(action); // restore action in case it was changed<br>
                } else {<br>
                    intercepted = false;<br>
                }<br>
            } else {<br>
                // There are no touch targets and this action is not an initial down<br>
                // so this view group continues to intercept touches.<br>
                intercepted = true;<br>
            }<br>
从这部分代码中可以看到onInterceptTouchEvent调用后返回值被赋值给intercepted，该变量控制了事件是否要向其子控件分发，所以它起到拦截的作用，如果onInterceptTouchEvent返回false则不拦截，如果返回true则拦截当前事件。我们现在将RTLayout中的该方法返回值修改为true，并重新编译运行，然后点击按钮，查看输出结果如下。</p>

<p>可以看到，我们明明点击的按钮，但输出结果显示RTLayout点击事件被执行了，再通过输出结果分析，对比上次的输出结果，发现本次的输出结果完全没有RTButton的信息，没错，由于onInterceptTouchEvent方法我们返回了true，在这里就将事件拦截了，所以他不会继续分发给RTButton了，反而交给自身的onTouchEvent方法执行了，理所当然，最后执行的就是RTLayout的点击事件了。</p>

<p>总结</p>

<p>以上我们对Android事件传递机制进行了分析，期间结合系统源码对事件传递过程中的处理情况进行了探究。通过单布局情况和嵌套布局情况下的事件传递和处理进行了分析，现总结如下：</p>

<p>Android中事件传递按照从上到下进行层级传递，事件处理从Activity开始到ViewGroup再到View。<br>
事件传递方法包括dispatchTouchEvent、onTouchEvent、onInterceptTouchEvent，其中前两个是View和ViewGroup都有的，最后一个是只有ViewGroup才有的方法。这三个方法的作用分别是负责事件分发、事件处理、事件拦截。<br>
onTouch事件要先于onClick事件执行，onTouch在事件分发方法dispatchTouchEvent中调用，而onClick在事件处理方法onTouchEvent中被调用，onTouchEvent要后于dispatchTouchEvent方法的调用。<br>
个人简介</p>

<p>唐韧，将近3年Android平台开发经验，一年半iOS平台开发经验，曾今开发过J2ee企业级应用，即将从北京航空航天大学硕士毕业，目前就职与爱立信中国通信有限公司大数据研究部。个人博客：<a href="http://blog.csdn.net/ryantang03" rel="nofollow" target="_blank">http://blog.csdn.net/ryantang03</a></p>

<p>感谢李永伦对本文的审校。</p>

<p>给InfoQ中文站投稿或者参与内容翻译工作，请邮件至editors@cn.infoq.com。也欢迎大家通过新浪微博（<a href="http://testerhome.com/InfoQ" class="at_user" title="@InfoQ"><i>@</i>InfoQ</a>）或者腾讯微博（<a href="http://testerhome.com/InfoQ" class="at_user" title="@InfoQ"><i>@</i>InfoQ</a>）关注我们，并与我们的编辑和其他读者朋友交流。</p>
      </div>


      

      <div class="tools pull-right">
  
  <a class="likeable" href="../account/password/edit"><i class="icon small_like"></i> <span>喜欢</span></a>
  
  <a href="http://cli.im/api/qrcode"><i class="icon icon-qrcode"></i>二维码</a>
</div>
<div class='social-share-button' data-title='[转载]Android 事件传递机制 via: @testerhome ' data-img='' data-url=''>
<a class="social-share-button-twitter" data-site="twitter" href="353#" onclick="return SocialShareButton.share(this);" rel="nofollow " title="分享到Twitter"></a>
<a class="social-share-button-facebook" data-site="facebook" href="353#" onclick="return SocialShareButton.share(this);" rel="nofollow " title="分享到Facebook"></a>
<a class="social-share-button-google_plus" data-site="google_plus" href="353#" onclick="return SocialShareButton.share(this);" rel="nofollow " title="分享到Google+"></a>
<a class="social-share-button-weibo" data-site="weibo" href="353#" onclick="return SocialShareButton.share(this);" rel="nofollow " title="分享到新浪微博"></a>
<a class="social-share-button-douban" data-site="douban" href="353#" onclick="return SocialShareButton.share(this);" rel="nofollow " title="分享到豆瓣"></a>
</div>

    </div>
  </div>

    <div class="no_result">
      暂无回复。
    </div>

      <div id="reply" class="form box">
    <div style="padding:20px;">
    需要 <a class="btn btn-primary" href="../account/password/edit">登录</a> 后回复方可回复, 如果你还没有账号你可以 <a class="btn btn-danger" href="../account/sign_up">注册</a> 一个帐号。
    </div>
</div>
</div>

  <div class="sidebar">
    
    <div class="box">
  <h2 class="title">小帖士</h2>
  <div class="content">
    @xiaomayi0323: 我想去大海边旅游！
  </div>
</div>
    <div class="box clearfix">
  <h2 class="title">节点下其他话题</h2>
  <ul>
    <li><a href="1867" title="适合新手的 gradle 自学教程合集">适合新手的 gradle 自学教程合集</a></li>
    <li><a href="1850" title="关于 AndroidManifest.xml ">关于 AndroidManifest.xml </a></li>
    <li><a href="1799" title="Android 测试框架整理">Android 测试框架整理</a></li>
    <li><a href="1756" title="Gradle 中的 task 依赖">Gradle 中的 task 依赖</a></li>
    <li><a href="1730" title="关于 Android 和 iOS 兼容性环境的搭建">关于 Android 和 iOS 兼容性环境的搭建</a></li>
    <li><a href="1718" title="Gradle 学习专辑">Gradle 学习专辑</a></li>
    <li><a href="1711" title="Gradle 编译交互小技巧">Gradle 编译交互小技巧</a></li>
    <li><a href="1708" title="gradle 集成修改 Android Manifest.xml 打多个包实践">gradle 集成修改 Android Manifes...</a></li>
    <li><a href="1700" title="Groovy 初探（一）">Groovy 初探（一）</a></li>
    <li><a href="1697" title="chrome mobile emulation 及周边漫谈和相关应用+想法">chrome mobile emulation 及周边...</a></li>
    <li><a href="1696" title="谁有轻量级的 Android 模拟器推荐？ 电脑内存 1G 上可流畅运行的">谁有轻量级的 Android 模拟器推荐？ 电脑内存 ...</a></li>
    <li><a href="1660" title="SDK 测试小结">SDK 测试小结</a></li>
    <li><a href="1587" title="移动应用自动化测试的困惑">移动应用自动化测试的困惑</a></li>
    <li><a href="1567" title="DDMS 中生成 Trace 的方法原理是什么">DDMS 中生成 Trace 的方法原理是什么</a></li>
    <li><a href="1563" title="uiautomatorviewer 不能显示模拟器界面，黑屏，但是信息能出来？谁知道怎么回事？">uiautomatorviewer 不能显示模拟器界面...</a></li>
    <li><a href="1557" title="通过 xcode 查看 app crash 日志这个方法在 ios8 下面都查看不到了">通过 xcode 查看 app crash 日志这个方...</a></li>
    <li><a href="1553" title="如何做好移动互联网应用测试 ">如何做好移动互联网应用测试 </a></li>
  </ul>
</div>

  </div>

    </div>
  </div>

  <a class="go_top" href="353#"><i class="icon icons_go_top"></i></a>
  <footer class="footer">
    <div class="container">
      <div class="container">
      <div class="pull-right" style="width:200px; text-align:right;">
<a href="http://www.ucloud.cn/?ref=testerhome.com" target="_blank" rel="twipsy" style="display:inline-block;margin-right:5px;" data-original-title="本站服务器由 Ucloud 赞助"><img src="../photo/2014/ace04e205ff40be04f47de439d253b59.png" style="height:28px"></a>
</div>

<div>
<div class="pull-left" style="margin-right:10px;">
<img src="../photo/2015/7b5b57bb91762429809a9f95255392ad.png" style="width:48px;">
</div>
<p class="links">

<a href="143">关于</a> | 
<a href="http://weibo.com/u/3871514412">微博</a> | 
<a href="../users.1">活跃用户</a> | 
<a href="node13">反馈</a> | 
<a href="https://github.com/testerhome">Github</a> |
<a href="../wiki/spreadtesterhome">帮助推广</a> |  
<a href="http://www.miibeian.gov.cn/">京ICP备13049862号</a>


</p>
<p class="copyright">
TesterHome 移动测试社区，由众多移动测试工作者维护，致力于推进国内测试技术。
</p>
<p class="copyright">
友情链接

<a href="http://ruby-china.org/"  rel="twipsy" style="display:inline-block;margin-right:5px;" data-original-title="感谢RubyChina提供建站代码">Ruby-China</a> | 
<a href="http://www.diggerplus.org/">DiggerPlus</a> | 
<a href="http://www.testwo.com/">测试窝</a> | 
<a href="http://www.kootest.com/">酷测</a> | 
<a href="http://itest.info/">重定向科技</a> |
<a href="http://www.robotium.cn/">Robotium 中国</a> |
<a href="http://cafe.testin.cn/">Testin开发者社区</a>
<script src="http://s4.cnzz.com/z_stat.php?id=1000474281&web_id=1000474281" language="JavaScript"></script>

</p>

</div>
    </div>






    </div>
  </footer>
  <script type="text/javascript" data-turbolinks-eval=false>
    App.root_url = "http://testerhome.com/";
    App.asset_url = "http://testerhome.com";
    App.faye_client_url = "http://testerhome.com:8080/faye";
    if (App.faye_client_url) {
      App.initNotificationSubscribe();
    }
  </script>
    <script type="text/javascript">
    Topics.replies_per_page = 50;
    $(document).ready(function(){
    })
  </script>

  <script type="text/javascript">
      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-45014075-1']);
      _gaq.push(['_setSiteSpeedSampleRate', 100]);
      _gaq.push(['_trackPageview']);
      u=document.getElementById("user_menu");
      ur="";
      if(u) ur=document.getElementById("user_menu").innerText.split(" ")[0]
      _gaq.push(['_setCustomVar', 1,'user',ur,1]);

      (function() {
          var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
          ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
          var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
      })();
  </script>

  <div class="zoom-overlay"></div>
</body>
</html>
