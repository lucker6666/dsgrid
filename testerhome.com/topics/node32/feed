<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>TesterHome 社区 移动性能测试 节点</title>
    <link>http://testerhome.com/</link>
    <description>TesterHome 社区 移动性能测试 节点最新发帖.</description>
    <item>
      <title>如何选用 seed 的值？</title>
      <description>&lt;p&gt;大家好，通过看里面的文章，了解了seed的含义。但，把seed值设为10或者15或者20，他们有什么不同的意义？通常会把seed设置为多少？谢谢&lt;/p&gt;</description>
      <author>Guest</author>
      <pubDate>Sun, 11 Jan 2015 14:17:04 +0800</pubDate>
      <link>http://testerhome.com/topics/1831</link>
      <guid>http://testerhome.com/topics/1831</guid>
    </item>
    <item>
      <title>基于变化取性能响应时间尝试</title>
      <description>&lt;p&gt;首先说下我从事的测试是安卓TV，盒子，路由等安卓产品相关的自动化及性能测试工作。主要部分是独立负责性能测试部分，脚本及临时需求也是需要support。主要是shell脚本相关更多。在有权限的情况下，我更喜欢shell的直接，组织好逻辑是关键。开此贴主要是应群里建议，讨论下目前我正在尝试的获取性能数据方案。&lt;/p&gt;

&lt;p&gt;一、自动化性能测试脚本开发，快速区分负责部门&lt;br&gt;
1、性能测试自动化脚本方案确立，目前尝试阶段，尝试中方案如下（多方案组合完成需求）：&lt;br&gt;
（1）通过SurfaceFlinger句柄变化跟踪显示状态变化收集时间变化&lt;br&gt;
局限性：由于句柄与显示界面不完全是一一对应关系，未操作仍存在句柄变化的场景无法测试&lt;br&gt;
注意点：脚本逻辑包含的判断等操作本身的性能影响精度，需要组织适合的逻辑匹配更加精确的精度需求&lt;br&gt;
优势：可以体现显示性能&lt;/p&gt;

&lt;p&gt;（2）通过log打印的按键up/down 时间戳及uiautomator events 打印的TYPE_VIEW_FOCUSED时间戳计算操作变化响应时间&lt;br&gt;
局限性：只适用集成uiautomator并且有focused属性改变的场景，例如光标移动；忽略显示性能处理时间。&lt;br&gt;
注意点：需要有相关log打印，否则无法获取按键响应的log；uiautomator是单进程执行并且重定向面临输出buffer大小问题需要kill进程才会输出。&lt;br&gt;
优势：可以根据时间戳准确获取代码执行的时间&lt;/p&gt;

&lt;p&gt;（3）根据研发人员配合添加的log字段，通过log获取代码执行时间&lt;br&gt;
局限性：配合log打印获取有版本局限性，服务于研发自身分析定位&lt;br&gt;
注意点：log打印本身也存在10ms左右的输出时间&lt;br&gt;
优势：准确获取代码逻辑执行时间与总时间的占比，便于定位问题。&lt;/p&gt;

&lt;p&gt;2、划分标准：按照脚本测试时间/用例录像测试时间比例划分主要优化的研发部门。&lt;br&gt;
我们这边快速区分BSP和UI占比可以更有效的对应优化的研发人员。&lt;/p&gt;

&lt;p&gt;二、主要介绍下SurfaceFlinger句柄变化的方案，log方案不多做介绍&lt;br&gt;
1、获取数据的部分：dumpsys SurfaceFlinger|grep '|....|'&lt;br&gt;
&lt;img src="/photo/2014/05569825b86a5e40d4d55d0966c5e950.png" alt=""&gt;&lt;br&gt;
主要是handle和name两部分数据判定界面变化，通过grep和awk组合使用很容易判定界面变化&lt;/p&gt;

&lt;p&gt;2、由于date命令获取时间是秒级，获取精度更高的时间戳计算时间。&lt;br&gt;
查找多个位置的时间相关数据，最终在/proc/timer_list中找到now at 430222772615795 nsecs&lt;br&gt;
cat /proc/timer_list|busybox awk 'NR==3{printf("%.0f\n",$3/1000000)}' 即可取到毫秒时间&lt;/p&gt;

&lt;p&gt;3、组织逻辑循环获取数据判定句柄变化，每次发生变化则echo 时间戳，之后计算时间戳的差值。&lt;br&gt;
这里主要介绍思路，脚本代码就不展示了，我是基于shell完成的相关逻辑。&lt;/p&gt;</description>
      <author>sandman</author>
      <pubDate>Thu, 25 Dec 2014 21:22:59 +0800</pubDate>
      <link>http://testerhome.com/topics/1734</link>
      <guid>http://testerhome.com/topics/1734</guid>
    </item>
    <item>
      <title>性能测试专题卡斯访谈录</title>
      <description>&lt;p&gt;我提取了当时的聊天记录, 简单的做了下梳理. 给大家做参考&lt;br&gt;
只是我的回忆, 所以写的较为简练. &lt;a href="/kasi" class="at_user" title="@kasi"&gt;&lt;i&gt;@&lt;/i&gt;kasi&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;启动时间测试获取&lt;/h4&gt;
&lt;p&gt;【入门】上海-糖冰橙(2227201981) 20:55:09 &lt;br&gt;
启动时间具体怎么测&lt;br&gt;
【入门】上海-糖冰橙(2227201981) 20:55:18 &lt;br&gt;
精确点&lt;/p&gt;

&lt;p&gt;am start的时候标记一个时间&lt;br&gt;
在adb log中有displayed出现的时候, 视为app已经启动并展现. 作为结束时间.&lt;/p&gt;

&lt;p&gt;【高级】北京-sevenirubysihanjishu@qq.com 21:10:07 &lt;br&gt;
有没有考虑过应用的展现时间&lt;br&gt;
【高级】北京-sevenirubysihanjishu@qq.com 21:11:13 &lt;br&gt;
displayed应该只是 activity展现. 但是activity内部的控件有没有完全展现还不确定&lt;br&gt;
【高级】北京-sevenirubysihanjishu@qq.com 21:11:20 &lt;br&gt;
比如h5的应用&lt;br&gt;
【高级】北京-sevenirubysihanjishu@qq.com 21:11:26 &lt;br&gt;
这个你们搞过吗, &lt;/p&gt;

&lt;p&gt;暂时没h5的应用, 所以没研究.&lt;/p&gt;
&lt;h4&gt;电量获取方式&lt;/h4&gt;
&lt;p&gt;【高级】北京-sevenirubysihanjishu@qq.com 20:55:37 &lt;br&gt;
就是华为的手机上会显示一个应用消耗了多少电量..&lt;br&gt;
【高级】北京-sevenirubysihanjishu@qq.com 20:55:42 &lt;br&gt;
这个是如何计算的&lt;br&gt;
【高级】北京-sevenirubysihanjishu@qq.com 20:55:53 &lt;br&gt;
他应该不是通过仪器搞的&lt;br&gt;
【高级】北京-sevenirubysihanjishu@qq.com 20:56:26 &lt;br&gt;
难道是宗总电量*消耗比例?&lt;br&gt;
【tester】北京-mingway(441068402) 20:59:13 &lt;br&gt;
eoe有篇帖子好像讲到了如何找拿耗电量的隐藏API~&lt;/p&gt;

&lt;p&gt;不是, 使用了android的隐藏API, 会在以前的帖子下面粘贴具体的文档地址.&lt;/p&gt;
&lt;h4&gt;traceview的使用&lt;/h4&gt;
&lt;p&gt;【高级】北京-sevenirubysihanjishu@qq.com 20:58:26 &lt;br&gt;
你们使用traceview吗&lt;br&gt;
【高级】北京-sevenirubysihanjishu@qq.com 20:58:37 &lt;br&gt;
dmtraceview这类工具&lt;/p&gt;

&lt;p&gt;也在用, 用于发现内存泄漏等问题.&lt;/p&gt;
&lt;h4&gt;totalpss和pss的区别&lt;/h4&gt;
&lt;p&gt;【入门】上海-糖冰橙(2227201981) 20:59:37 &lt;br&gt;
那内存呢。关注totalpss吗？&lt;br&gt;
【入门】上海-糖冰橙(2227201981) 20:59:48 &lt;br&gt;
恩&lt;br&gt;
【初级】深圳-卡斯(434619853) 21:00:09 &lt;br&gt;
procrank&lt;br&gt;
【入门】上海-糖冰橙(2227201981) 21:00:12 &lt;br&gt;
pss跟totalpss的区别在哪里？&lt;br&gt;
【入门】上海-糖冰橙(2227201981) 21:00:37 &lt;br&gt;
哦&lt;/p&gt;

&lt;p&gt;totalpss包含共享内存, pss不包含.&lt;/p&gt;
&lt;h4&gt;持续获取性能数据&lt;/h4&gt;
&lt;p&gt;【高级】北京-sevenirubysihanjishu@qq.com 21:02:06 &lt;br&gt;
我看帖子上提到了一些固定的命令来获取cpu和内存, 如何在运行期间持续的获得这些数据.&lt;/p&gt;

&lt;p&gt;写脚本. 脚本对系统的影响很小, 所以可以长时间运行. &lt;br&gt;
可以写成service, 也可以通过批处理.&lt;/p&gt;

&lt;p&gt;【初级】熊吉(63274747) 21:17:43 &lt;br&gt;
dumpsys和top都是获得实时的cpu和内存吗？&lt;/p&gt;

&lt;p&gt;是的&lt;/p&gt;

&lt;p&gt;【入门】上海-糖冰橙(2227201981) 21:19:41 &lt;br&gt;
满格状态怎么模拟?&lt;/p&gt;

&lt;p&gt;忘记回复是什么了&lt;/p&gt;
&lt;h4&gt;如何展现性能数据&lt;/h4&gt;
&lt;p&gt;【高级】北京-sevenirubysihanjishu@qq.com 21:20:31 &lt;br&gt;
你们如何展示men和cpu的信息&lt;br&gt;
【高级】北京-sevenirubysihanjishu@qq.com 21:20:36 &lt;br&gt;
自己做的图形展现吗&lt;/p&gt;

&lt;p&gt;通过excel或者数据文件来维护, 暂时没做大平台&lt;/p&gt;
&lt;h4&gt;发热量如何计算&lt;/h4&gt;
&lt;p&gt;【高级】北京-sevenirubysihanjishu@qq.com 21:43:13 &lt;br&gt;
发热量如何计算&lt;br&gt;
【高级】北京-sevenirubysihanjishu@qq.com 21:43:17 &lt;br&gt;
只能硬件侧似乎吗&lt;/p&gt;

&lt;p&gt;有专门的仪器 但是项目中用的较少&lt;/p&gt;
&lt;h4&gt;流量统计工具&lt;/h4&gt;
&lt;p&gt;【入门】fz_Aaron(531871883) 21:51:16 &lt;br&gt;
首次启动查看有没有流量很关键，这个怎么讲？&lt;br&gt;
【高级】深圳-sd-剪烛(277189835) 21:51:18 &lt;br&gt;
网易的的工具测试流量感觉有bug&lt;/p&gt;

&lt;p&gt;帖子中已经有说明了, 查询/proc下面的数据记录.&lt;br&gt;
可以借用wireshark, tcpdump等工具&lt;/p&gt;

&lt;p&gt;【初级】熊吉(63274747) 21:53:45 &lt;br&gt;
dumpsys获取流量为啥不靠谱？&lt;/p&gt;

&lt;p&gt;网络流量的类型太多, 有些dumpsys没有统计.&lt;/p&gt;
&lt;h4&gt;场景测试相关&lt;/h4&gt;
&lt;p&gt;【tester】北京-mingway(441068402) 21:57:19 &lt;br&gt;
弱网测试，模拟环境的参数通常都有哪些呢？&lt;br&gt;
【tester】北京-mingway(441068402) 21:57:53 &lt;br&gt;
丢包率、上下行速度、&lt;br&gt;
【tester】北京-mingway(441068402) 21:57:59 &lt;br&gt;
延迟、&lt;br&gt;
【高级】北京-sevenirubysihanjishu@qq.com 21:58:21 &lt;br&gt;
好像一个fiddler就可以搞定了吧&lt;br&gt;
【tester】北京-mingway(441068402) 21:58:27 &lt;br&gt;
模拟一些场景所配置的各项参数，这个能透露点么~~？比如视频类的&lt;br&gt;
【高级】北京-sevenirubysihanjishu@qq.com 21:58:49 &lt;br&gt;
fiddler好像是可以限速, 可以设置丢包率&lt;br&gt;
【入门】上海-糖冰橙(2227201981) 21:58:51 &lt;br&gt;
怎么评？&lt;br&gt;
【高级】深圳-sd-剪烛(277189835) 21:58:51 &lt;br&gt;
今天微博刚好看见个类似的工具&lt;br&gt;
【高级】北京-sevenirubysihanjishu@qq.com 21:59:02 &lt;br&gt;
我也看到了, 不知道什么原理&lt;br&gt;
【初级】深圳-卡斯(434619853) 21:59:02 &lt;br&gt;
burpsuit&lt;br&gt;
【高级】深圳-sd-剪烛(277189835) 21:59:29 &lt;br&gt;
&lt;a href="http://www.oschina.net/p/clumsy" rel="nofollow" target="_blank"&gt;http://www.oschina.net/p/clumsy&lt;/a&gt;&lt;br&gt;
【高级】北京-sevenirubysihanjishu@qq.com 21:59:58 &lt;br&gt;
burpsuite我记得是安全套装吧&lt;br&gt;
【高级】北京-sevenirubysihanjishu@qq.com 22:00:20 &lt;br&gt;
他的ssl支持挺强大&lt;br&gt;
【高级】北京-sevenirubysihanjishu@qq.com 22:00:27 &lt;br&gt;
好像只有他支持ssl解析&lt;br&gt;
【初级】熊吉(63274747) 22:00:45 &lt;br&gt;
看起来很像webscarab&lt;/p&gt;
&lt;h4&gt;是否搞云服务&lt;/h4&gt;
&lt;p&gt;【高级】北京-sevenirubysihanjishu@qq.com 22:01:30 &lt;br&gt;
现在testin mtc很火&lt;br&gt;
【高级】北京-sevenirubysihanjishu@qq.com 22:01:34 &lt;br&gt;
华为有计划搞吗&lt;/p&gt;

&lt;p&gt;暂时未考虑&lt;/p&gt;
&lt;h4&gt;性能测试周期&lt;/h4&gt;
&lt;p&gt;【高级】北京-sevenirubysihanjishu@qq.com 22:02:07 &lt;br&gt;
目前完全的性能测试需要多长时间&lt;br&gt;
【高级】北京-sevenirubysihanjishu@qq.com 22:02:13 &lt;br&gt;
一个新版本发布, 需要几天&lt;br&gt;
【初级】深圳-卡斯(434619853) 22:02:48 &lt;br&gt;
1.5-2人天&lt;/p&gt;</description>
      <author>seveniruby</author>
      <pubDate>Mon, 17 Nov 2014 21:47:17 +0800</pubDate>
      <link>http://testerhome.com/topics/1591</link>
      <guid>http://testerhome.com/topics/1591</guid>
    </item>
    <item>
      <title>Android 应用性能自动化测试工具初探（二）</title>
      <description>&lt;p&gt;帖子接（一）：&lt;a href="http://testerhome.com/topics/833" rel="nofollow" target="_blank"&gt;http://testerhome.com/topics/833&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;代码已经提交至github：&lt;br&gt;&lt;a href="https://github.com/memorycache/MonkeyForAndroid.git" rel="nofollow" target="_blank"&gt;https://github.com/memorycache/MonkeyForAndroid.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;欢迎有兴趣者加入，一起做个工具。&lt;/p&gt;

&lt;p&gt;性能抓取绘制的折线图如下：&lt;br&gt;
内存：&lt;br&gt;&lt;img src="/photo/2014/3c38dafa30c9dc5f360ed091241e3a6e.jpg" alt=""&gt;&lt;/p&gt;</description>
      <author>kevin_xu_v</author>
      <pubDate>Mon, 12 May 2014 22:37:46 +0800</pubDate>
      <link>http://testerhome.com/topics/846</link>
      <guid>http://testerhome.com/topics/846</guid>
    </item>
    <item>
      <title>Android 应用性能自动化测试工具初探（一） jenkins+monkeyrunner+jfreechart</title>
      <description>&lt;p&gt;开发语言：Java&lt;br&gt;
应用平台：Android&lt;/p&gt;

&lt;p&gt;框架：&lt;br&gt;
1. 为什么选择jenkins&lt;br&gt;
    jenkins的优点太多，这里就不一一列举，我的性能测试只是把我的工具集成到jenkins，定时去起，定时发报告的功能&lt;br&gt;
2. 为什么选择monkeyrunner&lt;br&gt;
Android平台选择monkeyrunner可能是大家第一会想到的，可惜的是monkeyrunner是那么的不给力，但是勉强可以用用，monkeyrunner主要坑爹的地方是抓取控件不准，目前这个问题还是没法解决，最终决定以后找个好的替代，为什么没选择appium，首先appium的定位也不是很稳定，比monkeyrunner好点，但是不适合再封装，其实可以集成到jenkins，性能测试只作为一个appium的测试用例也可，这种方式后续研究。&lt;br&gt;
3. 为什么选择jfreechart&lt;br&gt;
Android的图片绘制就是用的是jfreechart，大家可以在SDK tools里面可以看到jfreechart的jar包，可以直接引用，对于java的开源图片绘制库目前就只知道这个。&lt;/p&gt;

&lt;p&gt;实现：&lt;br&gt;
    性能测试主要是模拟用户操作记录性能测试数据，OK，那我需要做的无非就是3个事情：&lt;br&gt;
1. 模拟用户操作&lt;br&gt;
    当然你可以手动去点击，那网易的开源工具Emmagee和腾讯的GT，都可以作为手动性能测试的选择，我觉得是开发的一个很好选择，那要自动化就让他随机取操作，随机点击很简单，根据屏幕分辨率设置随机坐标去点击，随机滑动同样的道理。&lt;br&gt;
2. 记录性能测试数据&lt;br&gt;
记录前需要获取，之前有篇很好的性能测试帖子：&lt;a href="http://testerhome.com/topics/470" rel="nofollow" target="_blank"&gt;http://testerhome.com/topics/470&lt;/a&gt;&lt;br&gt;
很感谢kasi这位大侠，主要是通过adb shll dumpsys这个命令去获取，后面跟的参数我就不一一多讲，这里推荐一篇博客：&lt;a href="http://blog.csdn.net/nei504293736/article/details/9249863" rel="nofollow" target="_blank"&gt;http://blog.csdn.net/nei504293736/article/details/9249863&lt;/a&gt;。&lt;br&gt;
还要做的是就是你间隔多长时间去获取一次，这可以通过配置文件去配置，把命令输出的需要抓取的数据拿出，存放到一个csv文件，为什么选择csv，因为它可以直接用excel打开，用excel可以直接手动去绘制一个折线图，方法可以看这里：&lt;a href="http://jingyan.baidu.com/article/3ea51489107a8852e61bba97.html" rel="nofollow" target="_blank"&gt;http://jingyan.baidu.com/article/3ea51489107a8852e61bba97.html&lt;/a&gt;&lt;br&gt;
需要抓取的数据：CPU占用,内存占用，功耗，流量。当然要取什么数据根据自己的测试需求去定，这里只是给出一个基础。&lt;br&gt;
最后把获取的数据存储在一个arraylist里面。&lt;br&gt;
3. 生成测试报告&lt;br&gt;
    测试报告是在jenkins做的事情，代码里面主要是绘制折线图（绘制什么图可自己根据自己需求去做，jfreechart支持大部分的图的绘制），绘图无非就是把拿到的数据传给jfreechart，然后配置jenkins，获取图片后生成报告自动发送到你的邮箱里面&lt;/p&gt;

&lt;p&gt;TODOs&lt;br&gt;
    目前只实现了基本功能，需要做的还有很多，我把封装的业务去除后会把代码放到github上，希望有兴趣android app 性能自动化测试的同学可以参与进来，咱们交流下，一起进步，或者有大神带着我进步也可，需要解决的问题会在md文件的TODOs里面写明，还需要做的事情很多，希望坛子里面大神多多指教，汇聚开源的力量，寻找android app性能自动化测试的解决方案。&lt;/p&gt;

&lt;p&gt;BTW，马刺打的真好！&lt;/p&gt;</description>
      <author>kevin_xu_v</author>
      <pubDate>Sun, 11 May 2014 12:20:30 +0800</pubDate>
      <link>http://testerhome.com/topics/833</link>
      <guid>http://testerhome.com/topics/833</guid>
    </item>
    <item>
      <title>xcode5.1 下面安装 reportlab 的问题</title>
      <description>&lt;ol&gt;
&lt;li&gt;pip install reportlab一直报错:
cc -fno-strict-aliasing -fno-common -dynamic -arch x86_64 -arch i386 -g -Os -pipe -fno-common -fno-strict-aliasing -fwrapv -mno-fused-madd -DENABLE_DTRACE -DMACOSX -DNDEBUG -Wall -Wstrict-prototypes -Wshorten-64-to-32 -DNDEBUG -g -fwrapv -Os -Wall -Wstrict-prototypes -DENABLE_DTRACE -arch x86_64 -arch i386 -pipe -I/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c /private/tmp/pip_build_root/reportlab/src/rl_addons/rl_accel/_rl_accel.c -o build/temp.macosx-10.9-intel-2.7/private/tmp/pip_build_root/reportlab/src/rl_addons/rl_accel/_rl_accel.o&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;clang: error: unknown argument: '-mno-fused-madd' [-Wunused-command-line-argument-hard-error-in-future]&lt;/p&gt;

&lt;p&gt;clang: note: this will be a hard error (cannot be downgraded to a warning) in the future&lt;/p&gt;

&lt;p&gt;error: command 'cc' failed with exit status 1&lt;/p&gt;

&lt;p&gt;Cleaning up...&lt;br&gt;
Command /usr/bin/python -c "import setuptools, tokenize;__file__='/private/tmp/pip_build_root/reportlab/setup.py';exec(compile(getattr(tokenize, 'open', open)(&lt;strong&gt;file&lt;/strong&gt;).read().replace('\r\n', '\n'), &lt;strong&gt;file&lt;/strong&gt;, 'exec'))" install --record /tmp/pip-e7bQve-record/install-record.txt --single-version-externally-managed --compile failed with error code 1 in /private/tmp/pip_build_root/reportlab&lt;br&gt;
Storing debug log for failure in /Users/haohuiyan/Library/Logs/pip.log&lt;br&gt;
2. 咨询了一下说是换32位的python，换了之后还是这个问题&lt;br&gt;
3. 找到这个&lt;a href="http://stackoverflow.com/questions/22313407/clang-error-unknown-argument-mno-fused-madd-python-package-installation-fa/22315129#22315129" rel="nofollow" target="_blank"&gt;http://stackoverflow.com/questions/22313407/clang-error-unknown-argument-mno-fused-madd-python-package-installation-fa/22315129#22315129&lt;/a&gt;&lt;br&gt;
4. 我的解决方案是:&lt;br&gt;
export CFLAGS=-Qunused-arguments&lt;br&gt;
export CPPFLAGS=-Qunused-arguments&lt;br&gt;
sudo -E pip install reportlab&lt;/p&gt;</description>
      <author>55hhy</author>
      <pubDate>Thu, 03 Apr 2014 19:35:20 +0800</pubDate>
      <link>http://testerhome.com/topics/651</link>
      <guid>http://testerhome.com/topics/651</guid>
    </item>
    <item>
      <title>python 之 Android 通用性能开源工具 0.000001 版</title>
      <description>&lt;p&gt;之前做过一些非功能测试的经验。这次做了这样一个通用的工具，目前支持GC的统计和计算，后续会合入应用启动，流量，cpu等各个指标。&lt;br&gt;
  开源地址：&lt;a href="https://github.com/monkeytest15/AndroidPerformanceTest_Python" rel="nofollow" target="_blank"&gt;https://github.com/monkeytest15/AndroidPerformanceTest_Python&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;环境准备：1.本地还是需要有android sdk环境。至少adb能够使用&lt;br&gt;
                 2.本地需要安装python2.x版本&lt;/p&gt;

&lt;p&gt;使用教程：1. git clone项目到本地&lt;br&gt;
                 2. 电脑链接机器，adb识别出来机器&lt;br&gt;
                 3. 打开终端，并且输入python Test_File.py &amp;lt;package name&amp;gt;&lt;br&gt;
                 4.然后就进行测试（手动或自动化都可以）&lt;br&gt;
                 5.测试结束之后，切换到终端，然后Ctrl+C，终止程序&lt;br&gt;
  这样就会在目录下生成三个统计并分析的GC pdf图标报告，之后会加上一个apk然后可以统计流量，电量，cpu等。这样这个工具就可以对任何app应用做性能测试了。&lt;/p&gt;

&lt;p&gt;效果如下：&lt;br&gt;&lt;img src="/photo/2014/397751296586a793f79587e49b68d818.png" alt=""&gt;&lt;/p&gt;</description>
      <author>monkey</author>
      <pubDate>Tue, 01 Apr 2014 16:43:26 +0800</pubDate>
      <link>http://testerhome.com/topics/637</link>
      <guid>http://testerhome.com/topics/637</guid>
    </item>
    <item>
      <title>Android 应用性能测试 apk 分享</title>
      <description>&lt;p&gt;基于Emmagee1.0 做了一些小的更改，初接触android开发，实现的比较烂，大家不要笑&lt;/p&gt;

&lt;p&gt;分两个版本：&lt;br&gt;
应用性能测试_普通.apk&lt;br&gt;&lt;a href="http://yun.baidu.com/share/link?shareid=2336292717&amp;amp;uk=3775907672&amp;amp;third=0&amp;amp;fid=979809605956101" rel="nofollow" target="_blank"&gt;http://yun.baidu.com/share/link?shareid=2336292717&amp;amp;uk=3775907672&amp;amp;third=0&amp;amp;fid=979809605956101&lt;/a&gt;&lt;br&gt;
1，UI以白色为主体&lt;br&gt;
2，点击程序列表的TextView部分可以勾选，加了应用启动时间&lt;br&gt;
3，测试结果文件存放在sdcard/应用性能测试/， 并以应用名字+时间 命名。&lt;br&gt;
4，结束测试时自动生成带有数据图表的excel文件&lt;/p&gt;

&lt;p&gt;应用性能测试_Nexus.apk   获取了官方平台系统签名， 实现了其他一些功能，但应该只有Nexus系列可用。&lt;br&gt;&lt;a href="http://yun.baidu.com/share/link?shareid=2336292717&amp;amp;uk=3775907672&amp;amp;third=0&amp;amp;fid=373507759536056" rel="nofollow" target="_blank"&gt;http://yun.baidu.com/share/link?shareid=2336292717&amp;amp;uk=3775907672&amp;amp;third=0&amp;amp;fid=373507759536056&lt;/a&gt;&lt;br&gt;
1，实现用Monkey自动测试，可以设定测试时间&lt;br&gt;
2，获取了online log ， 放在应用性能测试文件夹下，以 应用+时间+log 命名&lt;/p&gt;</description>
      <author>xiscoxu</author>
      <pubDate>Sat, 29 Mar 2014 23:00:34 +0800</pubDate>
      <link>http://testerhome.com/topics/621</link>
      <guid>http://testerhome.com/topics/621</guid>
    </item>
    <item>
      <title>腾讯 APP 场测 / 随身测神器-GT</title>
      <description>&lt;p&gt;从官方的QuickStart上来看，这货真的太强大了，很显然，APP测试的场测/随身测来的更为真实。&lt;/p&gt;

&lt;p&gt;GT（随身调）是APP的随身调测平台，它是直接运行在手机上的“集成调测环境”(IDTE, Integrated Debug&amp;amp;Test Environment)。&lt;/p&gt;

&lt;p&gt;利用GT，仅凭一部手机，无需连接电脑，您即可对APP进行快速的性能测试(CPU、内存、流量、电量、帧率/流畅度等等)、开发日志的查看、Crash日志查看、网络数据包的抓取、APP内部参数的调试、真机代码耗时统计等等；更重要的是，您可以在任意真实场所、任何时候做如上的系列事情，这就是“APP的场测”。如果您觉得GT提供的功能还不够满足您的需要，您还可以利用GT提供的基础API自行开发有特殊功能的GT插件（目前，仅iOS版支持），帮助您解决更加复杂的APP调试、测试问题。&lt;/p&gt;

&lt;p&gt;郁闷，公司网络老是传不了图......&lt;/p&gt;

&lt;p&gt;各位戳地址吧&lt;/p&gt;

&lt;p&gt;&lt;a href="http://gt.qq.com/" title="GT"&gt;http://gt.qq.com/&lt;/a&gt;&lt;/p&gt;</description>
      <author>qddegtya</author>
      <pubDate>Thu, 27 Mar 2014 09:41:15 +0800</pubDate>
      <link>http://testerhome.com/topics/617</link>
      <guid>http://testerhome.com/topics/617</guid>
    </item>
    <item>
      <title>移动测试初探-续</title>
      <description>&lt;p&gt;花了2周时间，做了一个android性能监控工具，目前还只是完成了一期，如下&lt;br&gt;
&lt;img src="/photo/2014/f1c0d4ffce4682618078dae1a0caf403.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;使用之前需安装.net4 以及android sdk  并配好环境变量，另外多读读readme&lt;/p&gt;</description>
      <author>kasi</author>
      <pubDate>Mon, 10 Mar 2014 15:47:00 +0800</pubDate>
      <link>http://testerhome.com/topics/568</link>
      <guid>http://testerhome.com/topics/568</guid>
    </item>
    <item>
      <title>adb shell ps -x 这个命令什么意思</title>
      <description>&lt;p&gt;得到的结果如下：&lt;br&gt;
USER     PID   PPID  VSIZE  RSS     WCHAN    PC         NAME&lt;br&gt;
radio     603   121   495304 25852 ffffffff 4009bfc4 S com.android.phone (u:129, s:83)&lt;br&gt;
有人知道 U：129 s：83 是什么意思吗&lt;br&gt;
谢谢啦&lt;/p&gt;</description>
      <author>jacky</author>
      <pubDate>Fri, 28 Feb 2014 16:07:09 +0800</pubDate>
      <link>http://testerhome.com/topics/536</link>
      <guid>http://testerhome.com/topics/536</guid>
    </item>
    <item>
      <title>Android 应用性能测试方案一之 log 分析</title>
      <description>&lt;p&gt;今天我主要来说下过年时候自己做的一些性能测试，由于时间紧迫，所以最终选择了全部从log方面入手，从而最终达到一气呵成的效果。&lt;/p&gt;

&lt;p&gt;分别有这样几个大项：&lt;br&gt;&lt;strong&gt;1. Android应用启动消耗时间&lt;/strong&gt;&lt;br&gt;
   我们分别在Activity的生命周期方法内添加&lt;code&gt;Log.e(tag,message)&lt;/code&gt;，如下效果：&lt;/p&gt;
&lt;pre class="highlight java"&gt;    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;onCreate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Bundle&lt;/span&gt; &lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
           &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;onCreate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
           &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;e&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"AppStartTime"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"AppOnCreate"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
           &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;onResume&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;onResume&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
           &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;e&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"AppStartTime"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"AppOnResume"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
           &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt; 
&lt;/pre&gt;
&lt;p&gt;，这里的&lt;code&gt;tag&lt;/code&gt;我们使用&lt;code&gt;AppStartTime&lt;/code&gt;，那么我们需要在应用启动之后在command内输入：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;adb logcat -v time -v threadtime *:E | grep ActivityStartTime&amp;gt;StartTimeFile.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.  cpu和内存消耗&lt;/strong&gt;&lt;br&gt;
在command中输入如下命令：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;adb shell top -n 400 | grep &amp;lt;your package name&amp;gt;Cpu_MemoryFile.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. GC&lt;/strong&gt;&lt;br&gt;
在command中输入如下命令：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;adb logcat -v time -v threadtime *:D | grep GC&amp;gt;GCFile.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这里需要注意的是，GC分析的时候需要关注三个值。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;average_GC_Freed&lt;/li&gt;
&lt;li&gt;average_GC_per&lt;/li&gt;
&lt;li&gt;average_GC_time&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;4. 网络流量&lt;/strong&gt;&lt;br&gt;
在被测应用中增加一个获取所有应用的网络流量的service，添加一个&lt;code&gt;getAppTrafficList( )&lt;/code&gt;方法，代码如下：&lt;/p&gt;
&lt;pre class="highlight java"&gt;    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;getAppTrafficList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;PackageManager&lt;/span&gt; &lt;span class="n"&gt;pm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getPackageManager&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PackageInfo&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pinfos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pm&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInstalledPackages&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PackageManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;GET_UNINSTALLED_PACKAGES&lt;/span&gt;
                        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;PackageManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;GET_PERMISSIONS&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PackageInfo&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pinfos&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;premissions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;requestedPermissions&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;premissions&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;premissions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;premission&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;premissions&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"android.permission.INTERNET"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;premission&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;uId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;applicationInfo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;uid&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                        &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;rx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TrafficStats&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getUidRxBytes&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                        &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;tx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TrafficStats&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getUidTxBytes&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rx&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;tx&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                            &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                            &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;e&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"网络流量"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;applicationInfo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;loadLabel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="o"&gt;)+&lt;/span&gt;&lt;span class="n"&gt;Formatter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;formatFileSize&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rx&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;}&lt;/span&gt;

                    &lt;span class="o"&gt;}&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;如果还要其他数据，那么全部可以按照以上的方法去获取。然后我们来看如何使用python一次性分析这些文件从而直接获取report。&lt;br&gt;
首先引入第三方绘制pdf的模块：&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;reportlab&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;graphics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;shapes&lt;/span&gt; &lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;reportlab&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;graphics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;charts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;lineplots&lt;/span&gt; &lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="no"&gt;LinePlot&lt;/span&gt;
&lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;reportlab&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;graphics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;charts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;textlabels&lt;/span&gt; &lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="no"&gt;Label&lt;/span&gt;
&lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;reportlab&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;graphics&lt;/span&gt; &lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;renderPDF&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;然后我们需要一个读文件的方法：&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;FileRead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;data_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;number_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;data_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;number_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;data_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;number_list&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;接着我们需要一个制作pdf的方法：&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;MakePDF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;reportname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;pdfname&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;drawing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Drawing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;lp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LinePlot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;lp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
    &lt;span class="n"&gt;lp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
    &lt;span class="n"&gt;lp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;125&lt;/span&gt;
    &lt;span class="n"&gt;lp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;
    &lt;span class="n"&gt;lp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="n"&gt;lp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="n"&gt;okeColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blue&lt;/span&gt;
    &lt;span class="n"&gt;lp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="n"&gt;okeColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;red&lt;/span&gt;
    &lt;span class="n"&gt;lp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="n"&gt;okeColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;green&lt;/span&gt;

    &lt;span class="n"&gt;drawing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;drawing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;350&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reportname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;fontSize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;fillColor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;renderPDF&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drawToFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;drawing&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;pdfname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;reportname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#这里的times和list两个参数都是list，是时间和监控获取的数据一一对应的关系&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;这些我们都有了之后，我们来看下分析AppStartTime的方法：&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;analysisStartFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;totalcount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;totaltime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;time_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;totalcount_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;'AppStartTime'&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="n"&gt;totalcount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;totalcount&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="n"&gt;totalcount_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;totalcount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;totaltime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;totaltime&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;
                &lt;span class="n"&gt;time_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:]))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;totalcount_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;%.2&lt;/span&gt;&lt;span class="s"&gt;f'&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;totaltime&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;totalcount&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;time_list&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;所有的分析数据的思维都是使用split（）方法分隔空格之后做分析。因为读取文件之后是将所有的数据存在list中，但是当我们去用的时候由于空格在其中就变得非常的麻烦，那么我们可以先使用split将空格去掉，然后使用if key in list的方法进行过滤再做分析。&lt;/p&gt;

&lt;p&gt;最后在main（）方法中基本就是如下的顺序执行方法：&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FileRead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;

        &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="n"&gt;_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;average_start_time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;time_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;analysisStartFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;MakePDF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="n"&gt;_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;time_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'average time:'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;average_start_time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;'s'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"启动性能报告.pdf"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/pre&gt;
&lt;p&gt;最终我们就能够批量的生成如下图的报告了。&lt;br&gt;&lt;img src="/photo/2014/0924814e397fb50be3e888f30c25bed7.png" alt=""&gt;&lt;/p&gt;</description>
      <author>monkey</author>
      <pubDate>Thu, 27 Feb 2014 00:38:17 +0800</pubDate>
      <link>http://testerhome.com/topics/529</link>
      <guid>http://testerhome.com/topics/529</guid>
    </item>
    <item>
      <title>《Android 性能测试初探》合集</title>
      <description>&lt;p&gt;感谢 &lt;a href="/kasi" class="at_user" title="@kasi"&gt;&lt;i&gt;@&lt;/i&gt;kasi&lt;/a&gt;  同学的辛勤码字。 &lt;strong&gt;Android 性能测试初探&lt;/strong&gt; 目前已经完结了。之后卡斯同学准备写 &lt;strong&gt;Android 安全测试&lt;/strong&gt;  希望大家多多捧场。而且这也是行业经验，对大家非常有帮助的。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://testerhome.com/topics/470" target="_blank"&gt;Android 性能测试初探（一）客户端上的性能测试&lt;/a&gt;&lt;br&gt;
&lt;a href="http://testerhome.com/topics/479" target="_blank"&gt;Android 性能测试初探（二）客户端上的性能测试细节&lt;/a&gt;&lt;br&gt;
&lt;a href="http://testerhome.com/topics/484" target="_blank"&gt;Android 性能测试初探（三）CPU 及 内存性能测试&lt;/a&gt;&lt;br&gt;
&lt;a href="http://testerhome.com/topics/486" target="_blank"&gt;Android 性能测试初探（四）GPU 性能测试&lt;/a&gt;&lt;br&gt;
&lt;a href="http://testerhome.com/topics/502" target="_blank"&gt;Android 性能测试初探（五）功耗测试&lt;/a&gt;&lt;br&gt;
&lt;a href="http://testerhome.com/topics/503" target="_blank"&gt;Android 性能测试初探（六）流量测试&lt;/a&gt;&lt;br&gt;
&lt;a href="http://testerhome.com/topics/568" target="_blank"&gt;Android 性能测试初探（七）android性能监控工具&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;此外再乱入一篇 &lt;a href="/mingway_hu" class="at_user" title="@mingway_hu"&gt;&lt;i&gt;@&lt;/i&gt;mingway_hu&lt;/a&gt; 的《移动端相关功耗测试杂谈》（&lt;a href="http://testerhome.com/topics/505" rel="nofollow" target="_blank"&gt;http://testerhome.com/topics/505&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;期待有深入的分享：）&lt;/p&gt;</description>
      <author>lihuazhang</author>
      <pubDate>Sat, 22 Feb 2014 20:34:34 +0800</pubDate>
      <link>http://testerhome.com/topics/506</link>
      <guid>http://testerhome.com/topics/506</guid>
    </item>
    <item>
      <title>移动端相关功耗测试杂谈</title>
      <description>&lt;p&gt;看完 kasi大哥 写的，我也写一点点儿我知道的~&lt;/p&gt;

&lt;p&gt;为什么要测功耗？测功耗的实际意义有哪些？&lt;br&gt;
ROM级别的，测功耗（包括其自带的应用）是必然的（毕竟rom的耗电决定待机时间长短，这是手机的很重要卖点之一，也是用户比较关心的一个指标）。一般官方宣传的手机资料时，里面写的待机时间多少分钟、2G/3G通话/上网多少分钟、wifi上网/听音乐/播放视频的最大时长，就是测耗电量再经过计算得来的。&lt;br&gt;
单个App级别的，大家都知道，耗电量的增加，也就意味着内存/CPU占用的增加。正所谓，透过现象看本质，如果增幅较之前版本过大，那很有可能是代码出问题了（即便不影响功能使用，这种问题即便不修正不优化，但最好能做到知道哪有问题）；比之前版本过小，时间精力够的话最好去找找导致差异过大的原因。&lt;br&gt;
（PS：像ROM级别的功耗测试这肯定是各个厂商都会做的，咱们普通小老百姓基本无需操心这些。非系统自带的App，尤其是安卓平台，在海量的ROM下，用户量比较大的应用，可以去着重在各种ROM上看看耗电量还可以；一般的应用，我个人愚见，测耗电量的意义和回报不太大，还不如多关注UI设计、优化内存CPU的占用、优化各功能的响应时间的更有意义，因此测App的功耗视需求而定。）&lt;/p&gt;

&lt;p&gt;测功耗大致过程是怎样？&lt;br&gt;
测功耗，一般是选取（经过细致评估的App或ROM的功能性能）比较稳定的版本来做一轮功耗测试，测时用两三个硬件没什么问题的手机、刷个干净稳定的系统，让手机、假电池、电流表串联（即假电池连接到电流表的电流输出口，然后再安到手机上模拟日常用的电池来给手机供电，这样保证三者电流一致），和然后放上SIM卡（一般是移动的），然后去测各种功能下的耗电量。&lt;br&gt;
比如，测理论上的手机2G通话的最大时长，打几个十分钟的电话，采集并计算这段时间系统的电流的平均值，然后再用该手机配备的电池的容量除以这个电流值即得出理论上的2G最大通话时间。测单个功能的功耗，只要减掉手机待机时的电流值即得到单个功能的功耗。&lt;br&gt;
（PS：因为是在偏绝对的环境下测出的，所以是理论值。等到实际使用环境肯定比测试时复杂，so 我们的手机平日里能使用的时长肯定比理论值要小。）&lt;/p&gt;

&lt;p&gt;一些杂项（上面写的其实测的思路，基本上是固定的好多年没变过，但是测的过程中意外时有发生）：&lt;br&gt;
1、硬件的检查：手机的硬件最好靠谱些。反之，硬件有问题，测出的电流值完全没意义。&lt;br&gt;
2、系统设置的检查：要刷的ROM版本不要看错，蓝牙、wifi、移动数据之类的没让开之前千万不要开，反之，测出的数据偏差太大，只能设置好之后重跑。（之前同事有干过~后果略严重~）&lt;br&gt;
3、其他的检查：假电池、手机、电流表的连接处触点是否生锈（生锈即影响电阻，进而影响电流值）；SIM卡保持话费充足，服务类电话、短信能取消的取消，一旦测通话时电话没费导致通话时长不足、测的过程中来了其他的电话短信，这些都会严重影响电流值，一旦碰到，起码这条用例得重新来过；手机信号不能太弱，信号不稳势必会导致发射接受频率的提升，进而导致系统电流值不稳定，故尽可能保持手机信号满格和稳定，同理wifi信号、网速亦是如此；测的时候冒出Bug，没好办法，抓Log报Bug，然后重跑用例。。。&lt;br&gt;
4、关于假电池，一般是一块电路板，大小与手机电池近似但不绝对，绝对的是整体的电阻、触点都是仿照真实的电池来做的，目的也是为了尽可能的模拟真实电池给手机供电时的情况，进而得出较为靠谱的电流值。&lt;br&gt;
5、测偏绝对环境下理论的理论值的原因，是因为用户的使用环境场景千差万别无法进行模仿，只能从最基础最单一最简单情景下进行电流值的测量，然后采用以小见大（或是以偏概全）的方法来计算出那些所谓的理论值。&lt;br&gt;
6、电流表的选取，主要在于构造（当然是越贵的测的越精准~几百到几十万不等~）对电流会造成一定的硬性影响，视具体需求而定。&lt;/p&gt;

&lt;p&gt;总结：标准的测功耗，环境就是要尽可能的干净不受干扰，以上是小弟做过的一点总结~欢迎各路英雄多多指点斧正拍砖~&lt;/p&gt;</description>
      <author>mingway_hu</author>
      <pubDate>Sat, 22 Feb 2014 19:58:04 +0800</pubDate>
      <link>http://testerhome.com/topics/505</link>
      <guid>http://testerhome.com/topics/505</guid>
    </item>
    <item>
      <title>Android 性能测试初探（六）</title>
      <description>&lt;p&gt;书接前文 &lt;a href="http://testerhome.com/topics/502"&gt;Android 性能测试初探之功耗（五）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;本节聊聊性能测试的最后一项- &lt;strong&gt;流量&lt;/strong&gt;，当然我所指的性能测试是针对大部分应用而言的，可能还有部分应用会关注网速、弱网之类的测试，但本系列文章都不去一一探讨了&lt;/p&gt;

&lt;p&gt;流量测试，同样需要引入几个名词&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;中等负荷：应用正常操作&lt;/li&gt;
&lt;li&gt;高负荷：应用极限操作&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;流量测试包括以下测试项：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;应用首次启动流量提示&lt;/li&gt;
&lt;li&gt;应用后台连续运行 2 小时的流量值&lt;/li&gt;
&lt;li&gt;应用高负荷运行的流量峰值&lt;/li&gt;
&lt;li&gt;应用中等负荷运行时的流量均值&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;流量测试一般都是用软件来进行的，这里我们一般分为2类：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;采用市场提供的第三方工具来进行测试，如流量宝之类的&lt;/li&gt;
&lt;li&gt;自研工具进行测试&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;自研工具进行测试一般包含 2 类方法，&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;通过 &lt;code&gt;tcodump&lt;/code&gt; 抓包，再通过 &lt;code&gt;wireshake&lt;/code&gt; 直接读取包信息来获得流量&lt;/li&gt;
&lt;li&gt;首先获得被测应用的 &lt;code&gt;uid&lt;/code&gt; 信息，可以通过 &lt;code&gt;adb shell dumpsys package&lt;/code&gt; 来获取  然后在未操作应用之前，我们可以通过查看 &lt;code&gt;adb shell cat /proc/uid_stat/uid/tcp_rcv&lt;/code&gt; &lt;code&gt;adb shell cat /proc/uid_stat/uid/tcp_snd&lt;/code&gt; 获取到应用的起始的接收及发送的流量，然后我们再操作应用，再次通过上述 2 条命令可以获取到应用的结束的接收及发送的流量，通过相减及得到应用的整体流量消耗&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;好了，流量测试就说到这里，android 性能测试初探之旅就到此结束了，下回我们将探讨 android 安全测试，预知下文，敬请期待&lt;/p&gt;</description>
      <author>kasi</author>
      <pubDate>Sat, 22 Feb 2014 17:18:31 +0800</pubDate>
      <link>http://testerhome.com/topics/503</link>
      <guid>http://testerhome.com/topics/503</guid>
    </item>
    <item>
      <title> Android 性能测试初探（五）</title>
      <description>&lt;p&gt;书接上文 &lt;a href="http://testerhome.com/topics/486"&gt;Android 性能测试初探之 GPU（四）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;前文说了的一些性能测试项大家可能都听说，接下来我们聊聊大家不常关注的测试项- &lt;strong&gt;功耗&lt;/strong&gt; 。&lt;/p&gt;

&lt;p&gt;功耗测试主要从以下几个方面入手进行测试&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;测试手机安装目标APK前后待机功耗无明显差异&lt;/li&gt;
&lt;li&gt;常见使用场景中能够正常进入待机，待机电流在正常范围内.&lt;/li&gt;
&lt;li&gt;长时间连续使用应用无异常耗电现象&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;功耗测试的方法分为两类，一类为软件测试，一类为硬件测试&lt;/p&gt;

&lt;p&gt;我们先说说软件测试，这里我们会聊聊一些DIY的思路，软件测试一般分为2类，&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第一种采用市场上提供的第三方工具，如金山电池管家之类的。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二种就是自写工具进行，这里一般会使用3种方法&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;第一种基于android提供的PowerManager.WakeLock来进行，&lt;/li&gt;
&lt;li&gt;第二种比较复杂一点，&lt;code&gt;功耗的计算=CPU消耗+Wake lock消耗+数据传输消耗+GPS消耗+Wi-Fi连接消耗&lt;/code&gt;，&lt;/li&gt;
&lt;li&gt;第三种通过 adb shell dumpsys battery来获取&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;接着说硬件测试，在这里我们一般使用万用表或者功耗仪进行测试，使用功耗仪测试的时候，需要制作假电池来进行的，有些不能拔插电池的手机还需要焊接才能进行功耗测试&lt;/p&gt;

&lt;p&gt;功耗测试大体就说到这里，大家应该对功耗测试有一些了解了，下文将讲解流量，尽请期待&lt;/p&gt;</description>
      <author>kasi</author>
      <pubDate>Sat, 22 Feb 2014 16:49:59 +0800</pubDate>
      <link>http://testerhome.com/topics/502</link>
      <guid>http://testerhome.com/topics/502</guid>
    </item>
    <item>
      <title>traceView 简单 demo</title>
      <description>&lt;p&gt;拿Android的example中的notepad来看吧。看下NoteEditor.class中的onDraw()方法。&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;        &lt;span class="vi"&gt;@Override&lt;/span&gt;
        &lt;span class="kp"&gt;protected&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;onDraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Canvas&lt;/span&gt; &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getLineCount&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="no"&gt;Rect&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mRect&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="no"&gt;Paint&lt;/span&gt; &lt;span class="n"&gt;paint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mPaint&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="n"&gt;baseline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getLineBounds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;drawLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;baseline&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;baseline&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onDraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;我们在onCreate()中增加&lt;code&gt;Debug.startMethodTracing("NoteEditor");&lt;/code&gt;&lt;br&gt;
在onDestroy()中增加&lt;code&gt;Debug.stopMethodTracing();&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;我们运行使用一些简单的功能之后，可以在/sdcard/下找到trace文件，使用traceview打开文件之后我们可以看到如下显示：&lt;br&gt;&lt;img src="/photo/2014/a64fcea9478c9288ce2776fa2d69c807.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;我们能够看到onDraw()以及子方法调用的顺序和消耗。当然还没有结束，我们继续进行修改尝试添加多个&lt;code&gt;canvas.drawLine()&lt;/code&gt;，然后可以看到如下的变化：&lt;br&gt;&lt;img src="/photo/2014/005cd57fee0c248329591d499d1176d7.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;然后我们还原到初始代码，继续进行修改尝试增加多个&lt;code&gt;canvas.drawColor(Color.BLUE);&lt;/code&gt;，然后可以看到如下变化：&lt;br&gt;&lt;img src="/photo/2014/78b0348ad4a893414e564bda3ad57bd6.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;从demo中可以看到traceview可以看到比较细颗粒度的修改。报告相关的名称如下：&lt;br&gt;
Exclusive: 同级函数本身运行的时间&lt;br&gt;
Inclusive 就是说除统计函数本身运行的时间外再加上调用子函数所运行的时间&lt;/p&gt;

&lt;p&gt;Name：列出的是所有的调用项，前面的数字是编号，展开可以看到有的有Parent 和Children子项，就是指被调用和调用。&lt;br&gt;
Incl: inclusive时间占总时间的白分比&lt;br&gt;
Excl: 执行占总时间的白分比。&lt;br&gt;
Calls+Recur Calls/Total: 调用和重复调用的次数&lt;br&gt;
Time/Call: 总的时间。(ms)&lt;/p&gt;

&lt;p&gt;如果碰见如下信息：&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="no"&gt;Failed&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;trace&lt;/span&gt; &lt;span class="n"&gt;filejava&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;IOException&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Key&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt; &lt;span class="n"&gt;does&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="n"&gt;marker&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;android&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;traceview&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;DmTraceReader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parseKeys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;DmTraceReader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;java&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;420&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;android&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;traceview&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;DmTraceReader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;generateTrees&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;DmTraceReader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;java&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;91&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;android&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;traceview&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;DmTraceReader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;DmTraceReader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;java&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;87&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;android&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;traceview&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;MainWindow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;MainWindow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;java&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;286&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;原因是trace文件不是0字节，确认你添加的&lt;code&gt;Debug.stopMethodTracing();&lt;/code&gt;所在的方法被运行了。&lt;/p&gt;</description>
      <author>monkey</author>
      <pubDate>Thu, 20 Feb 2014 11:10:54 +0800</pubDate>
      <link>http://testerhome.com/topics/488</link>
      <guid>http://testerhome.com/topics/488</guid>
    </item>
    <item>
      <title> Android 性能测试初探（四）</title>
      <description>&lt;p&gt;书接上文 &lt;a href="http://testerhome.com/topics/484"&gt;Android 性能测试初探（三）&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;自从 cpu及内存后，GPU 这个词对于 PC 性能测试者也不陌生了，什么 3Dmax，安兔兔之类的第三方软件让 GPU 在移动端性能测试领域都知晓，但对于应用的 GPU 该如何来测试呢，我们先引入几个名词：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;过度绘制&lt;/li&gt;
&lt;li&gt;帧率&lt;/li&gt;
&lt;li&gt;帧方差&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;过度绘制是指界面显示的 activity 套接了多层而导致。帧率是指屏幕刷新率。帧方差是指屏幕刷新帧间隔方差。&lt;/p&gt;

&lt;p&gt;对于 GPU 的测试主要包括以下几个测试子项&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;界面过度绘制&lt;/li&gt;
&lt;li&gt;屏幕滑动帧速率&lt;/li&gt;
&lt;li&gt;屏幕滑动平滑度&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;对于过度绘制的测试主要通过人工进行测试，通过打开开发者选项中的 &lt;strong&gt;显示GPU过度绘制&lt;/strong&gt; 来进行测试（PS：只有android4.2及以上的版本才具备此功能)，验收的标准为:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;不允许出现黑色像素&lt;/li&gt;
&lt;li&gt;不允许存在4x过度绘制&lt;/li&gt;
&lt;li&gt;不允许存在面积超过屏幕1/4区域的3x过度绘制（淡红色区域）&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;对于屏幕滑动帧速率主要有 2 种方法。&lt;/p&gt;

&lt;p&gt;先说说软件测试的方法：&lt;/p&gt;

&lt;p&gt;1.手机端需打开开发者选项中的 &lt;strong&gt;启用跟踪&lt;/strong&gt; 后勾选 &lt;strong&gt;Graphics&lt;/strong&gt; 和 &lt;strong&gt;View&lt;/strong&gt;&lt;br&gt;
2.启动 SDK 工具 Systrace 插件，勾选被测应用，点击 Systrace 插件，在弹出的对话框中设置持续抓取时间，在trace taps下面勾选 gfx 及 view 选项，&lt;br&gt;
3.人滑动界面可以通过节拍来进行滑动或者扫动，帧率数据会保存到默认路径下，默认名称为 trace.html&lt;br&gt;&lt;br&gt;
4.将trace.html文件拷贝到linux系统下 通过命令进行转换，生成trace.csv文件 &lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;grep 'postFramebuffer' trace.html   | sed -e 's/.*]\W*//g' -e 's/:.*$//g' -e 's/\.//g' &amp;gt; trace.csv 
&lt;/pre&gt;
&lt;p&gt;5.用excel打开文件计算得到帧率&lt;/p&gt;

&lt;p&gt;接下来我们说说硬件的方法，这里需要引入高速相机，打开高速相机，开启摄像模式，录制人滑动或者扫动被测应用的视频，再通过人工或者程序数帧的方法对结果进行计算得到帧率&lt;/p&gt;

&lt;p&gt;对于屏幕滑动平滑度的测试，方法如同帧率测试，唯一的差异就是最后的结果计算公式的差异&lt;/p&gt;

&lt;p&gt;GPU的测试目前业界使用的均为硬件来进行，软件测试的数据相较硬件差异较大，对于帧率及帧方差的测试标准而言，需对待不同机型设定不同的标准&lt;/p&gt;

&lt;p&gt;好了，对于GPU方面的测试介绍到此，相信大家对于这块不会陌生了：）&lt;/p&gt;

&lt;p&gt;预知下文，请听下回分解&lt;/p&gt;</description>
      <author>kasi</author>
      <pubDate>Wed, 19 Feb 2014 18:47:32 +0800</pubDate>
      <link>http://testerhome.com/topics/486</link>
      <guid>http://testerhome.com/topics/486</guid>
    </item>
    <item>
      <title>Android 性能测试初探（三）</title>
      <description>&lt;p&gt;书接上文 &lt;a href="http://testerhome.com/topics/479"&gt;Android 性能测试初探（二）&lt;/a&gt;    本文接着往下聊，今天主聊 &lt;code&gt;CPU&lt;/code&gt; 及 &lt;code&gt;内存&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;看到这两个名词，做过PC性能测试的就比较熟悉了，同样的性能测试关注点 ：）&lt;/p&gt;

&lt;p&gt;首先说说内存，移动端关注的是内存消耗，这个测试节点的设计目标是为了让应用不占用过多的系统资源，且及时释放内存，保障整个系统的稳定性，当然关于内存测试，在这里我们需要引入几个概念，&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;空闲状态&lt;/li&gt;
&lt;li&gt;中等规格&lt;/li&gt;
&lt;li&gt;满规格，&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;空闲状态：指打开应用后，点击home键让应用后台运行，此时应用处于的状态叫做空闲。 中等规格和满规格指的是对应用的操作时间的间隔长短不一，中等规格时间较长，满规格时间较短。&lt;/p&gt;

&lt;p&gt;接下来我们说说在内存测试中，存在很多测试子项，如下清单所示&lt;/p&gt;

&lt;p&gt;1.空闲状态下的应用内存消耗情况&lt;br&gt;
2.中等规格状态下的应用内存消耗情况&lt;br&gt;
3.满规格状态下的应用内存消耗情况&lt;br&gt;
4.应用内存峰值情况&lt;br&gt;
5.应用内存泄露情况&lt;br&gt;
6.应用是否常驻内存&lt;br&gt;
7.压力测试后的内存使用情况&lt;/p&gt;

&lt;p&gt;说了一些关于内存测试方面的设定，接下来我们聊聊测试方法DIY，现在关于android内存测试的方法基本分为几类，&lt;/p&gt;

&lt;p&gt;1.使用 android 本身提供的 &lt;code&gt;ActivityManager.MemoryInfo()&lt;/code&gt; 方法获得（此方法请百度或google）此类第三方工具有如网易的Emmagee、安测试、腾讯的GT等&lt;br&gt;
2.使用 android 提供的 &lt;code&gt;adb shell dumpsys meminfo |grep packagename &amp;gt;/address/mem.txt&lt;/code&gt; 来获取&lt;br&gt;
3.使用 android 提供的 procrank&lt;/p&gt;

&lt;p&gt;这里我们详解一下 &lt;code&gt;procrank&lt;/code&gt; 方法（批处理）&lt;/p&gt;

&lt;p&gt;首先去google获取procrank、procmem、libpagemap.so 三个文件 .&lt;/p&gt;

&lt;p&gt;然后push文件，执行 &lt;code&gt;adb push procrank /system/xbin&lt;/code&gt;  &lt;code&gt;adb push procmem /system/xbin&lt;/code&gt;  &lt;code&gt;adb push libpagemap.so /system/lib&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;赋权 &lt;code&gt;adb shell  chmod 6755 /system/xbin/procrank&lt;/code&gt;  &lt;code&gt;adb shell  chmod 6755 /system/xbin/procmem&lt;/code&gt;  &lt;code&gt;adb shell  chmod 6755 /system/lib/libpagemap.so&lt;/code&gt;  ,&lt;/p&gt;

&lt;p&gt;在开启工具记录  &lt;code&gt;adb shell procrank |grep packagename &amp;gt;/address/procrank.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;剩下的就是整理测试数据了&lt;/p&gt;

&lt;p&gt;关于内存泄露方面的测试，可以通过几个方面来测试&lt;/p&gt;

&lt;p&gt;1.通过monkey压力测试记录内存使用情况，分析数据曲线图及日志情况&lt;br&gt;
2.通过eclipse上的mat+heap来分析存在内存泄露方面的节点&lt;/p&gt;

&lt;p&gt;说了这么多内存的，我们再来说说CPU方面的，CPU跟内存一样，存在一些测试子项，如下清单所示&lt;/p&gt;

&lt;p&gt;1.空闲状态下的应用CPU消耗情况&lt;br&gt;
2.中等规格状态下的应用CPU消耗情况&lt;br&gt;
3.满规格状态下的应用CPU消耗情况&lt;br&gt;
4.应用CPU峰值情况&lt;/p&gt;

&lt;p&gt;CPU的测试方法分为几类&lt;br&gt;
1.使用android提供的adb shell  dumpsys cpuinfo |grep packagename &amp;gt;/address/cpu.txt来获取&lt;br&gt;
2.使用top命令  adb  shell top |grep packagename&amp;gt;/address/cpu.txt  来获取&lt;br&gt;
  恩，说了大半章了，cpu及内存的测试相信各位应该有所了解了，下回继续聊其他测试项&lt;/p&gt;</description>
      <author>kasi</author>
      <pubDate>Wed, 19 Feb 2014 16:41:10 +0800</pubDate>
      <link>http://testerhome.com/topics/484</link>
      <guid>http://testerhome.com/topics/484</guid>
    </item>
    <item>
      <title>移动弱网测试方案之一</title>
      <description>&lt;p&gt;移动app在测试时，有时需要考虑弱网的情形下，app的表现，那么怎么营造这样子的环境呢？&lt;/p&gt;

&lt;p&gt;一、首先需要控制网络，有两种方式其一使用网络损伤仪进行，其二采用软件方式。硬件采购费用太贵，因此使用win平台下的ShunraVESMBEditon或者Network Emulator for Windows Toolkit。两者都能达到控制丢包率，延迟等功能。考虑到ShunraVESMBEditon收费，接下来使用Network Emulator for Windows Toolkit软件。&lt;/p&gt;

&lt;p&gt;二、手机app使用wifi连接到服务器，但是我们的控制软件控制的为电脑本身的网络。那么就需要将电脑自身有线网络转换为wifi供手机app使用。connectify软件提供了该功能，将有线网络share出来。&lt;/p&gt;

&lt;p&gt;安装、使用Network Emulator for Windows Toolkit软件&lt;br&gt;
1 安装 &lt;br&gt;
下载地址：&lt;a href="http://blog.mrpol.nl/2010/01/14/network-emulator-toolkit/" rel="nofollow" target="_blank"&gt;http://blog.mrpol.nl/2010/01/14/network-emulator-toolkit/&lt;/a&gt;&lt;br&gt;
拥有32位和64位两个版本&lt;br&gt;
2使用&lt;br&gt;
2.1 首先运行软件Network Emulator Client&lt;br&gt;
在菜单栏找到Configuration →New link(新建链路)→设置loss(丢包率)、latency(延时率)→设置成功点击"确定"&lt;br&gt;&lt;br&gt;
Connectity安装&lt;br&gt;
Connectify下载地址：&lt;a href="http://www.connectify.me/" rel="nofollow" target="_blank"&gt;http://www.connectify.me/&lt;/a&gt;&lt;br&gt;
运行软件比较简单&lt;br&gt;
在internet to share 选择 你的有线网卡&lt;/p&gt;

&lt;p&gt;Share over 选择Wi-Fi&lt;br&gt;
Sharing Mode 选择Wi-Fi Access Point,Encrypted(WPA 2)&lt;/p&gt;

&lt;p&gt;然后点击  Start Hotspot，启动wifi后，就可以使用手机连接了。密码为connectify中password，该域可编辑。&lt;/p&gt;

&lt;p&gt;三、测试方案&lt;/p&gt;

&lt;p&gt;考虑现有的2G网络，一般上行带宽在8-15kb/s，下行20kb/s-50kb/s。&lt;br&gt;
单一场景：&lt;br&gt;
上行下行均采用如下参数设置&lt;/p&gt;

&lt;p&gt;网络丢包率 5%  10% 20% 50% 80%&lt;br&gt;
缺陷个数                    &lt;/p&gt;

&lt;p&gt;网络延迟时间  30ms    50ms    100ms   200ms   500ms&lt;br&gt;
缺陷个数                    &lt;/p&gt;

&lt;p&gt;带宽限制&lt;br&gt;
上行&lt;br&gt;
网络带宽    5kb/s   8kb/s   15kb/s  50kb/s  100kb/s&lt;br&gt;
缺陷个数                    &lt;/p&gt;

&lt;p&gt;下行&lt;br&gt;
网络带宽    10kb/s  15kb/s  50kb/s  100kb/s 150kb/s&lt;br&gt;
缺陷个数                    &lt;/p&gt;

&lt;p&gt;混合场景（表格，不好编辑，暂时这样吧）&lt;/p&gt;

&lt;p&gt;网络带宽   10kb/s   15kb/s  50kb/s  100kb/s 150kb/s&lt;br&gt;
缺陷个数&lt;br&gt;
丢包率&lt;br&gt;&lt;br&gt;
5%&lt;br&gt;&lt;br&gt;
10%&lt;br&gt;&lt;br&gt;
20%&lt;br&gt;&lt;br&gt;
50%&lt;br&gt;&lt;br&gt;
80%                 &lt;/p&gt;

&lt;p&gt;完毕&lt;br&gt;
本人对网络这块不是很熟悉，如果有好的建议和意见，请指出。谢谢！！&lt;/p&gt;</description>
      <author>lion</author>
      <pubDate>Wed, 19 Feb 2014 16:20:16 +0800</pubDate>
      <link>http://testerhome.com/topics/482</link>
      <guid>http://testerhome.com/topics/482</guid>
    </item>
  </channel>
</rss>
