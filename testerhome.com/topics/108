<!--
  App Environments:
  --------------------------------------------------------
  Ruby:  2.1.2-p95
  Rails: 4.1.1
  Thanks to RubyChina
-->
<!DOCTYPE html>
<html>
<head>
  <title>TesterHome | 如何测试洗牌程序 &raquo; 社区</title>
  <meta charset='utf-8' />
  <meta name="keywords" content="" />
  <meta name="description" content="" />
  <link data-turbolinks-track="true" href="../assets/front-7f214c07ef8cbdd59ba99f0ea4b052b9.css" media="screen" rel="stylesheet" />
    <link href="../assets/mobile-4fb33e42cee242735db607f08badd48a.css" media="screen and (max-width: 798px)" rel="stylesheet" />
  <link rel="shortcut icon" href="../assets/big_logo-e45f9cf8961e479b209d942f449d3b7b.png" />
  <link href="feed" rel="alternate" title="订阅最新帖" type="application/rss+xml" />
  <script data-turbolinks-track="true" src="../assets/app-d8b8d53b12135c77eba5ce7899b456b3.js"></script>
  <meta content="authenticity_token" name="csrf-param" />
<meta content="n6IluQs+rvFYzOtLM2JildRgsvcNIwvZOjb84Ctm9Jg=" name="csrf-token" />
  
  
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "//hm.baidu.com/hm.js?bfca03d31121ff43bab8f1bf58dcb58b";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>

</head>
<body data-offset="50" data-controller-name="topics">
  <div class="navbar navbar-fixed-top">
    <div class="navbar-inner">
      <div class="container">
        <h3>
          <a href="../index.html" class="site-logo"></a>
        </h3>
        <ul class="nav"><li class="first"><a href="../index.html">首页</a></li><li class="active"><a href="../notes/2">社区</a></li><li><a href="../wiki">Wiki</a></li><li><a href="../jobs">招聘</a></li><li class="last"><a href="../sites">酷站</a></li></ul>
        <span class="pull-right">
          <form action="http://testerhome.com/search" class="navbar-search" method="get">
            <input type="text" name="q" class="search-query" value="" placeholder="搜索" />
          </form>

            <ul class="nav pull-right" id="userbar"><li class="first"><a href="../account/sign_up">注册</a></li><li class="last"><a href="../account/password/edit">登录</a></li></ul>

        </span>
      </div>
    </div>
  </div>

  <div class="container">
    
    
    <div id="main" class="container-fluid">
      
<div class="content">
  <div id="topic_show" class="topics box hfeed">
    <div class="topic hentry">
      <div class="infos">
  <div class="pull-right avatar_large">
    <img alt="Normal" class="uface" src="../assets/avatar/normal-85ccf778012f4e1c31eae0d152183034.png" />
  </div>
  <h1 class="entry-title">如何测试洗牌程序</h1>
  <div class="info leader">
    <a class="node" href="node1">资讯点评</a>
     · 
    匿名
     · 
    于<abbr class="timeago" title="2012-11-20T18:59:39+08:00"></abbr>发布
     · 
    139次阅读
  </div>
</div>

      
      <div class="body entry-content">
        <p>Link  <a href="http://coolshell.cn/articles/8593.html" rel="nofollow" target="_blank">http://coolshell.cn/articles/8593.html</a></p>

<p>我希望本文有助于你了解测试软件是一件很重要也是一件不简单的事。<br />
我们有一个程序，叫ShuffleArray()，是用来洗牌的，我见过N多千变万化的ShuffleArray()，但是似乎从来没人去想过怎么去测试这个算法。所以，我在面试中我经常会问应聘者如何测试ShuffleArray()，没想到这个问题居然难倒了很多有多年编程经验的人。对于这类的问题，其实，测试程序可能比算法更难写，代码更多。而这个问题正好可以加强一下我在《我们需要专职的QA吗？》中我所推崇的——开发人员更适合做测试的观点。<br />
我们先来看几个算法（第一个用递归二分随机抽牌，第二个比较偷机取巧，第三个比较通俗易懂）<br />
递归二分随机抽牌<br />
有一次是有一个朋友做了一个网页版的扑克游戏，他用到的算法就是想模拟平时我们玩牌时用手洗牌的方式，是用递归+二分法，我说这个程序恐怕不对吧。他觉得挺对的，说测试了没有问题。他的程序大致如下（原来的是用Javascript写的，我在这里凭记忆用C复现一下）：</p>

<p>&#47;&#47;递归二分方法<br />
const size_t MAXLEN = 10;<br />
const char TestArr[MAXLEN] = {&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;D&#39;,&#39;E&#39;,&#39;F&#39;,&#39;G&#39;,&#39;H&#39;,&#39;I&#39;,&#39;J&#39;};</p>

<p>static char RecurArr[MAXLEN]={0};<br />
static int cnt = 0;<br />
void ShuffleArray_Recursive_Tmp(char* arr, int len)<br />
{<br />
    if(cnt &gt; MAXLEN || len &lt;=0){<br />
        return;<br />
    }</p>
<pre>int pos = rand() % len;
RecurArr[cnt++] = arr[pos];
if (len==1) return;
ShuffleArray_Recursive_Tmp(arr, pos);
ShuffleArray_Recursive_Tmp(arr+pos+1, len-pos-1);
</pre>


<p>}</p>

<p>void ShuffleArray_Recursive(char* arr, int len)<br />
{<br />
    memset(RecurArr, 0, sizeof(RecurArr));<br />
    cnt=0;<br />
    ShuffleArray_Recursive_Tmp(arr, len);<br />
    memcpy(arr, RecurArr, len);<br />
}</p>

<p>void main()<br />
{<br />
    char temp[MAXLEN]={0};<br />
    for(int i=0; i&lt;5; i++) {<br />
        strncpy(temp, TestArr, MAXLEN);<br />
        ShuffleArray_Recursive((char*)temp, MAXLEN);<br />
    }<br />
}</p>

<p>随便测试几次，还真像那么回事：<br />
第一次：D C A B H E G F I J<br />
第二次：A G D B C E F J H I<br />
第三次：A B H F C E D G I J<br />
第四次：J I F B A D C E H G<br />
第五次：F B A D C E H G I J<br />
快排Hack法<br />
让我们再看一个hack 快排的洗牌程序（只看算法，省去别的代码）：</p>

<p>int compare( const void *a, const void *b )<br />
{<br />
    return rand()%3-1;<br />
}</p>

<p>void ShuffleArray_Sort(char* arr, int len)<br />
{<br />
    qsort( (void *)arr, (size_t)len, sizeof(char), compare );<br />
}</p>

<p>运行个几次，感觉得还像那么回事：<br />
第一次：H C D J F E A G B I<br />
第二次：B F J D C E I H G A<br />
第三次：C G D E J F B I A H<br />
第四次：H C B J D F G E I A<br />
第五次：D B C F E A I H G J<br />
看不出有什么破绽。<br />
大多数人的实现<br />
下面这个算法是大多数人的实现，就是for循环一次，然后随机交换两个数<br />
void ShuffleArray_General(char* arr, int len)<br />
{<br />
    const int suff_time = len;<br />
    for(int idx=0; idx&lt;suff_time; idx++) {<br />
        int i = rand() % len;<br />
        int j = rand() % len;<br />
        char temp = arr[i];<br />
        arr[i] = arr[j];<br />
        arr[j] = temp;<br />
    }<br />
}<br />
跑起来也还不错，洗得挺好的。<br />
第一次：G F C D A J B I H E<br />
第二次：D G J F E I A H C B<br />
第三次：C J E F A D G B H I<br />
第四次：H D C F A E B J I G<br />
第五次：E A J F B I H G D C<br />
但是上述三个算法哪个的效果更好？好像都是对的。一般的QA或是程序员很有可能就这样把这个功能Pass了。但是事情并没有那么简单……<br />
如何测试<br />
在做测试之前，我们还需要了解一下一个基本知识——PC机上是做不出真随机数的，只能做出伪随机数。真随机数需要硬件支持。但是不是这样我们就无法测试了呢，不是的。我们依然可以测试。<br />
我们知道，洗牌洗得好不好，主要是看是不是够随机。那么如何测试随机性呢？<br />
试想，我们有个随机函数rand()返回1到10中的一个数，如果够随机的话，每个数返回的概率都应该是一样的，也就是说每个数都应该有10分之1的概率会被返回。<br />
一到概率问题，我们只有一个方法来做测试，那就是用统计的方式。也就是说，你调用rand()函数100次，其中，每个数出现的次数大约都在10次左右。（注意：我用了左右，这说明概率并不是很准确的）不应该有一个数出现了15次以上，另一个在5次以下，要是这样的话，这个函数就是错的。<br />
举一反三，测试洗牌程序也一样，需要通过概率的方式来做统计，是不是每张牌出现在第一个位置的次数都是差不多的。<br />
于是，这样一来上面的程序就可以很容易做测试了。<br />
下面是测试结果（测试样本1000次——列是每个位置出现的次数，行是各个字符的统计，出现概率应该是1&#47;10，也就是100次）：<br />
递归随机抽牌的方法<br />
很明显，这个洗牌程序太有问题。算法是错的！</p>
<h4>     1    2    3    4    5    6    7    8    9    10</h4>
<p>A | 101  283  317  208   65   23    3    0    0    0<br />
B | 101  191  273  239  127   54   12    2    1    0<br />
C | 103  167  141  204  229  115   32    7    2    0<br />
D | 103  103   87  128  242  195  112   26    3    1<br />
E | 104   83   62   67  116  222  228   93   22    3<br />
F |  91   58   34   60   69  141  234  241   65    7<br />
G |  93   43   35   19   44  102  174  274  185   31<br />
H |  94   28   27   27   46   68   94  173  310  133<br />
I | 119   27   11   30   28   49   64   96  262  314<br />
J |  91   17   13   18   34   31   47   88  150  511<br />
快排Hack法<br />
看看对角线（从左上到右下）上的数据，很离谱！所以，这个算法也是错的。</p>
<h4>      1    2    3    4    5    6    7    8    9    10</h4>
<p>A |   74  108  123  102   93  198   40   37   52  173<br />
B |  261  170  114   70   49   28   37   76  116   79<br />
C |  112  164  168  117   71   37   62   96  116   57<br />
D |   93   91  119  221  103   66   91   98   78   40<br />
E |   62   60   82   90  290  112   95   98   71   40<br />
F |   46   60   63   76   81  318   56   42   70  188<br />
G |   72   57   68   77   83   39  400  105   55   44<br />
H |   99   79   70   73   87   34  124  317   78   39<br />
I |  127  112  102   90   81   24   57   83  248   76<br />
J |   54   99   91   84   62  144   38   48  116  264<br />
大多数人的算法<br />
我们再来看看大多数人的算法。还是对角线上的数据有问题，所以，还是错的。</p>
<h4>      1    2    3    4    5    6    7    8    9    10</h4>
<p>A |  178   98   92   82  101   85   79  105   87   93<br />
B |   88  205   90   94   77   84   93   86  106   77<br />
C |   93   99  185   96   83   87   98   88   82   89<br />
D |  105   85   89  190   92   94  105   73   80   87<br />
E |   97   74   85   88  204   91   80   90  100   91<br />
F |   85   84   90   91   96  178   90   91  105   90<br />
G |   81   84   84  104  102  105  197   75   79   89<br />
H |   84   99  107   86   82   78   92  205   79   88<br />
I |  102   72   88   94   87  103   94   92  187   81<br />
J |   87  100   90   75   76   95   72   95   95  215<br />
正确的算法<br />
下面，我们来看看性能高且正确的算法—— Fisher_Yates算法<br />
void ShuffleArray_Fisher_Yates(char* arr, int len)<br />
{<br />
    int i = len, j;<br />
    char temp;</p>
<pre>if ( i == 0 ) return;
while ( --i ) {
    j = rand() % (i+1);
    temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
}
</pre>


<p>}<br />
这个算法不难理解，看看测试效果（效果明显比前面的要好）：</p>
<h4>      1    2    3    4    5    6    7    8    9    10</h4>
<p>A |  107   98   83  115   89  103  105   99   94  107<br />
B |   91  106   90  102   88  100  102   97  112  112<br />
C |  100  107   99  108  101   99   86   99  101  100<br />
D |   96   85  108  101  117  103  102   96  108   84<br />
E |  106   89  102   86   88  107  114  109  100   99<br />
F |  109   96   87   94   98  102  109  101   92  102<br />
G |   94   95  119  110   97  112   89  101   89   94<br />
H |   93  102  102  103  100   89  107  105  101   98<br />
I |   99  110  111  101  102   79  103   89  104  102<br />
J |  105  112   99   99  108  106   95   95   99   82<br />
但是我们可以看到还是不完美。因为我们使用的rand()是伪随机数，不过已经很不错的。最大的误差在20%左右。<br />
我们再来看看洗牌100万次的统计值，你会看到误差在6%以内了。这个对于伪随机数生成的程序已经很不错了。</p>
<h4>      1       2     3       4      5      6      7      8     9      10</h4>
<p>A | 100095  99939 100451  99647  99321 100189 100284  99565 100525  99984<br />
B |  99659 100394  99699 100436  99989 100401  99502 100125 100082  99713<br />
C |  99938  99978 100384 100413 100045  99866  99945 100025  99388 100018<br />
D |  99972  99954  99751 100112 100503  99461  99932  99881 100223 100211<br />
E | 100041 100086  99966  99441 100401  99958  99997 100159  99884 100067<br />
F | 100491 100294 100164 100321  99902  99819  99449 100130  99623  99807<br />
G |  99822  99636  99924 100172  99738 100567 100427  99871 100125  99718<br />
H |  99445 100328  99720  99922 100075  99804 100127  99851 100526 100202<br />
I | 100269 100001  99542  99835 100070  99894 100229 100181  99718 100261<br />
J | 100268  99390 100399  99701  99956 100041 100108 100212  99906 100019<br />
如何写测试案例<br />
测试程序其实很容易写了。就是，设置一个样本大小，做一下统计，然后计算一下误差值是否在可以容忍的范围内。比如：</p>

<p>样本：100万次<br />
最大误差：10%以内<br />
平均误差：5%以内 （或者：90%以上的误差要小于5%）</p>

<p>注意<br />
————更新 2012年11月20日————<br />
其实，以上的测试只是测试了牌在各个位置的概率。这个还不足够好。因为还可能会现在有Patten的情况。如：每次洗牌出来的都是一个循环顺序数组。这完全可以满足我上面的测试条件。但是那明显是错的。所以，还需要统计每种排序组合的出现的次数，看看是不是均匀。<br />
测试的确是一个很重要，并不简单的事情。谢谢所有参与讨论的人。<br />
附录<br />
————更新 2012年11月20日————<br />
之前忘贴了一个模拟我们玩牌洗牌的算法，现补充如下：<br />
void ShuffleArray_Manual(char* arr, int len)<br />
{<br />
    int mid = len &#47; 2;</p>
<pre>for (int n=0; n&amp;lt;5; n++){

    //两手洗牌
    for (int i=1; i&amp;lt;mid; i+=2){
        char tmp = arr[i];
        arr[i] = arr[mid+i];
        arr[mid+i] = tmp;
    }

    //随机切牌
    char *buf = (char*)malloc(sizeof(char)*len);

    for(int j=0; j&amp;lt;5; j++) {
        int start= rand() % (len-1) + 1;
        int numCards= rand()% (len/2) + 1;

        if (start + numCards &amp;gt; len ){
            numCards = len - start;
        }

        memset(buf, 0, len);
        strncpy(buf, arr, start);
        strncpy(arr, arr+start, numCards);
        strncpy(arr+numCards, buf, start);
    }
    free(buf);

}
</pre>


<p>}<br />
我们来看看测试结果：（10万次）效果更好一些，误差在2%以内了。</p>
<h4>      1       2     3       4      5      6      7      8     9      10</h4>
<p>A |  10002   9998   9924  10006  10048  10200   9939   9812  10080   9991<br />
B |   9939   9962  10118  10007   9974  10037  10149  10052   9761  10001<br />
C |  10054  10100  10050   9961   9856   9996   9853  10016   9928  10186<br />
D |   9851   9939   9852  10076  10208  10003   9974  10052   9992  10053<br />
E |  10009   9915  10050  10037   9923  10094  10078  10059   9880   9955<br />
F |  10151  10115  10113   9919   9844   9896   9891   9904  10225   9942<br />
G |  10001  10116  10097  10030  10061   9993   9891   9922   9889  10000<br />
H |  10075  10033   9866   9857  10170   9854  10062  10078  10056   9949<br />
I |  10045   9864   9879  10066   9930   9919  10085  10104  10095  10013<br />
J |   9873   9958  10051  10041   9986  10008  10078  10001  10094   9910<br />
（全文完）</p>

<p>（转载本站文章请注明作者和出处 酷壳 – CoolShell.cn ，请勿用于任何商业用途）<br />
————————============ 感谢 42qu.com 为本站提供  VPS ============————————</p>
<pre>    您可能也喜欢：






                    “单元测试要做多细？”





                    一些单元测试的Guideline





                    Test-Driven Development？别逗了





                    如何在低速率网络中测试 Web 应用





                    十个免费的Web压力测试工具







            无觅
</pre>


<p>相关文章2012年10月24日 -- TF-IDF模型的概率解释2012年09月07日 -- 无锁队列的实现2012年09月03日 -- “单元测试要做多细？”2012年08月22日 -- 为什么我反对纯算法面试题2012年08月17日 -- K Nearest Neighbor 算法2012年06月29日 -- K-Means 算法2012年05月22日 -- Huffman 编码压缩算法</p>

<p>Link  <a href="http://coolshell.cn/articles/8593.html" rel="nofollow" target="_blank">http://coolshell.cn/articles/8593.html</a></p>
      </div>


      

      <div class="tools pull-right">
  
  <a class="likeable" href="../account/password/edit"><i class="icon small_like"></i> <span>喜欢</span></a>
  
  <a href="http://cli.im/api/qrcode"><i class="icon icon-qrcode"></i>二维码</a>
</div>
<div class='social-share-button' data-title='如何测试洗牌程序 via: @testerhome ' data-img='' data-url=''>
<a class="social-share-button-twitter" data-site="twitter" href="108#" onclick="return SocialShareButton.share(this);" rel="nofollow " title="分享到Twitter"></a>
<a class="social-share-button-facebook" data-site="facebook" href="108#" onclick="return SocialShareButton.share(this);" rel="nofollow " title="分享到Facebook"></a>
<a class="social-share-button-google_plus" data-site="google_plus" href="108#" onclick="return SocialShareButton.share(this);" rel="nofollow " title="分享到Google+"></a>
<a class="social-share-button-weibo" data-site="weibo" href="108#" onclick="return SocialShareButton.share(this);" rel="nofollow " title="分享到新浪微博"></a>
<a class="social-share-button-douban" data-site="douban" href="108#" onclick="return SocialShareButton.share(this);" rel="nofollow " title="分享到豆瓣"></a>
</div>

    </div>
  </div>

    <div class="no_result">
      暂无回复。
    </div>

      <div id="reply" class="form box">
    <div style="padding:20px;">
    需要 <a class="btn btn-primary" href="../account/password/edit">登录</a> 后回复方可回复, 如果你还没有账号你可以 <a class="btn btn-danger" href="../account/sign_up">注册</a> 一个帐号。
    </div>
</div>
</div>

  <div class="sidebar">
    
    <div class="box">
  <h2 class="title">小帖士</h2>
  <div class="content">
    @saraben 期待“念念不忘，必有回响”在我身上印证的那一天到来
  </div>
</div>
    <div class="box clearfix">
  <h2 class="title">节点下其他话题</h2>
  <ul>
    <li><a href="1378" title="《刀塔传奇》之互联网从业人员评测">《刀塔传奇》之互联网从业人员评测</a></li>
  </ul>
</div>

  </div>

    </div>
  </div>

  <a class="go_top" href="108#"><i class="icon icons_go_top"></i></a>
  <footer class="footer">
    <div class="container">
      <div class="container">
      <div class="pull-right" style="width:200px; text-align:right;">
<a href="http://www.ucloud.cn/?ref=testerhome.com" target="_blank" rel="twipsy" style="display:inline-block;margin-right:5px;" data-original-title="本站服务器由 Ucloud 赞助"><img src="../photo/2014/ace04e205ff40be04f47de439d253b59.png" style="height:28px"></a>
</div>

<div>
<div class="pull-left" style="margin-right:10px;">
<img src="../photo/2015/7b5b57bb91762429809a9f95255392ad.png" style="width:48px;">
</div>
<p class="links">

<a href="143">关于</a> | 
<a href="http://weibo.com/u/3871514412">微博</a> | 
<a href="../users.1">活跃用户</a> | 
<a href="node13">反馈</a> | 
<a href="https://github.com/testerhome">Github</a> |
<a href="../wiki/spreadtesterhome">帮助推广</a> |  
<a href="http://www.miibeian.gov.cn/">京ICP备13049862号</a>


</p>
<p class="copyright">
TesterHome 移动测试社区，由众多移动测试工作者维护，致力于推进国内测试技术。
</p>
<p class="copyright">
友情链接

<a href="http://ruby-china.org/"  rel="twipsy" style="display:inline-block;margin-right:5px;" data-original-title="感谢RubyChina提供建站代码">Ruby-China</a> | 
<a href="http://www.diggerplus.org/">DiggerPlus</a> | 
<a href="http://www.testwo.com/">测试窝</a> | 
<a href="http://www.kootest.com/">酷测</a> | 
<a href="http://itest.info/">重定向科技</a> |
<a href="http://www.robotium.cn/">Robotium 中国</a> |
<a href="http://cafe.testin.cn/">Testin开发者社区</a>
<script src="http://s4.cnzz.com/z_stat.php?id=1000474281&web_id=1000474281" language="JavaScript"></script>

</p>

</div>
    </div>






    </div>
  </footer>
  <script type="text/javascript" data-turbolinks-eval=false>
    App.root_url = "http://testerhome.com/";
    App.asset_url = "http://testerhome.com";
    App.faye_client_url = "http://testerhome.com:8080/faye";
    if (App.faye_client_url) {
      App.initNotificationSubscribe();
    }
  </script>
    <script type="text/javascript">
    Topics.replies_per_page = 50;
    $(document).ready(function(){
    })
  </script>

  <script type="text/javascript">
      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-45014075-1']);
      _gaq.push(['_setSiteSpeedSampleRate', 100]);
      _gaq.push(['_trackPageview']);
      u=document.getElementById("user_menu");
      ur="";
      if(u) ur=document.getElementById("user_menu").innerText.split(" ")[0]
      _gaq.push(['_setCustomVar', 1,'user',ur,1]);

      (function() {
          var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
          ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
          var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
      })();
  </script>

  <div class="zoom-overlay"></div>
</body>
</html>
