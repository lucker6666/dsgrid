<!--
  App Environments:
  --------------------------------------------------------
  Ruby:  2.1.2-p95
  Rails: 4.1.1
  Thanks to RubyChina
-->
<!DOCTYPE html>
<html>
<head>
  <title>TesterHome | JavaScript prototype &raquo; 社区</title>
  <meta charset='utf-8' />
  <meta name="keywords" content="" />
  <meta name="description" content="" />
  <link data-turbolinks-track="true" href="../assets/front-7f214c07ef8cbdd59ba99f0ea4b052b9.css" media="screen" rel="stylesheet" />
    <link href="../assets/mobile-4fb33e42cee242735db607f08badd48a.css" media="screen and (max-width: 798px)" rel="stylesheet" />
  <link rel="shortcut icon" href="../assets/big_logo-e45f9cf8961e479b209d942f449d3b7b.png" />
  <link href="feed" rel="alternate" title="订阅最新帖" type="application/rss+xml" />
  <script data-turbolinks-track="true" src="../assets/app-d8b8d53b12135c77eba5ce7899b456b3.js"></script>
  <meta content="authenticity_token" name="csrf-param" />
<meta content="n6IluQs+rvFYzOtLM2JildRgsvcNIwvZOjb84Ctm9Jg=" name="csrf-token" />
  
  
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "//hm.baidu.com/hm.js?bfca03d31121ff43bab8f1bf58dcb58b";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>

</head>
<body data-offset="50" data-controller-name="topics">
  <div class="navbar navbar-fixed-top">
    <div class="navbar-inner">
      <div class="container">
        <h3>
          <a href="../index.html" class="site-logo"></a>
        </h3>
        <ul class="nav"><li class="first"><a href="../index.html">首页</a></li><li class="active"><a href="../notes/2">社区</a></li><li><a href="../wiki">Wiki</a></li><li><a href="../jobs">招聘</a></li><li class="last"><a href="../sites">酷站</a></li></ul>
        <span class="pull-right">
          <form action="http://testerhome.com/search" class="navbar-search" method="get">
            <input type="text" name="q" class="search-query" value="" placeholder="搜索" />
          </form>

            <ul class="nav pull-right" id="userbar"><li class="first"><a href="../account/sign_up">注册</a></li><li class="last"><a href="../account/password/edit">登录</a></li></ul>

        </span>
      </div>
    </div>
  </div>

  <div class="container">
    
    
    <div id="main" class="container-fluid">
      
<div class="content">
  <div id="topic_show" class="topics box hfeed">
    <div class="topic hentry">
      <div class="infos">
  <div class="pull-right avatar_large">
    <a href="../lihuazhang"><img alt="110" class="uface" src="../user/large_avatar/110.jpg" style="width:48px;height:48px;" /></a>
  </div>
  <h1 class="entry-title">JavaScript prototype</h1>
  <div class="info leader">
    <a class="node" href="node25">通用技术</a>
     · 
    <a data-author="true" data-name="恒温" href="../lihuazhang">lihuazhang</a>
     · 
    于<abbr class="timeago" title="2013-12-09T11:28:33+08:00"></abbr>发布
     · 
    171次阅读
  </div>
</div>

      
      <div class="body entry-content">
        <p>最近在学 xcode instruments 下的 UI AUTOMATION， 基本是用 JavaScript 写的，所以花时间温习了下。 正好网上找到一篇关于 prototype 的文章， 个人觉得写得比较清晰，度把握的刚刚好。推荐给大家。</p>

<p>原文： <a href="http://www.cnblogs.com/dolphinX/p/3286177.html" rel="nofollow" target="_blank">http://www.cnblogs.com/dolphinX/p/3286177.html</a></p>

<p>用过JavaScript的同学们肯定都对prototype如雷贯耳，但是这究竟是个什么东西却让初学者莫衷一是，只知道函数都会有一个prototype属性，可以为其添加函数供实例访问，其它的就不清楚了，最近看了一些 JavaScript高级程序设计，终于揭开了其神秘面纱。</p>

<p>每个函数都有一个prototype属性，这个属性是指向一个对象的引用，这个对象称为原型对象，原型对象包含函数实例共享的方法和属性，也就是说将函数用作构造函数调用（使用new操作符调用）的时候，新创建的对象会从原型对象上继承属性和方法。</p>
<h4>私有变量、函数</h4>
<p>在具体说prototype前说几个相关的东东，可以更好的理解prototype的设计意图。之前写的一篇JavaScript 命名空间博客提到过JavaScript的函数作用域，在函数内定义的变量和函数如果不对外提供接口，那么外部将无法访问到，也就是变为私有变量和私有函数。</p>
<pre class="highlight javascript"><span class="kd">function</span> <span class="nx">Obj</span><span class="p">(){</span>
                <span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="c1">//私有变量
</span>                <span class="kd">var</span> <span class="nx">fn</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span> <span class="c1">//私有函数
</span>
                <span class="p">}</span>
            <span class="p">}</span>
</pre>
<p>这样在函数对象Obj外部无法访问变量a和函数fn，它们就变成私有的，只能在Obj内部使用，即使是函数Obj的实例仍然无法访问这些变量和函数</p>
<pre class="highlight javascript"><span class="kd">var</span> <span class="nx">o</span><span class="o">=</span><span class="k">new</span> <span class="nx">Obj</span><span class="p">();</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">a</span><span class="p">);</span> <span class="c1">//undefined
</span>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">fn</span><span class="p">);</span> <span class="c1">//undefined
</span></pre><h4>静态变量、函数</h4>
<p>当定义一个函数后通过 “.”为其添加的属性和函数，通过对象本身仍然可以访问得到，但是其实例却访问不到，这样的变量和函数分别被称为静态变量和静态函数，用过Java、C#的同学很好理解静态的含义。</p>
<pre class="highlight javascript"><span class="kd">function</span> <span class="nx">Obj</span><span class="p">(){</span>

            <span class="p">}</span>

            <span class="nx">Obj</span><span class="p">.</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="c1">//静态变量
</span>
            <span class="nx">Obj</span><span class="p">.</span><span class="nx">fn</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span> <span class="c1">//静态函数
</span>
            <span class="p">}</span>

            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Obj</span><span class="p">.</span><span class="nx">a</span><span class="p">);</span> <span class="c1">//0
</span>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">Obj</span><span class="p">.</span><span class="nx">fn</span><span class="p">);</span> <span class="c1">//function
</span>
            <span class="kd">var</span> <span class="nx">o</span><span class="o">=</span><span class="k">new</span> <span class="nx">Obj</span><span class="p">();</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">a</span><span class="p">);</span> <span class="c1">//undefined
</span>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">o</span><span class="p">.</span><span class="nx">fn</span><span class="p">);</span> <span class="c1">//undefined
</span></pre><h4>实例变量、函数</h4>
<p>在面向对象编程中除了一些库函数我们还是希望在对象定义的时候同时定义一些属性和方法，实例化后可以访问，JavaScript也能做到这样</p>
<pre class="highlight javascript"><span class="kd">function</span> <span class="nx">Obj</span><span class="p">(){</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">a</span><span class="o">=</span><span class="p">[];</span> <span class="c1">//实例变量
</span>                <span class="k">this</span><span class="p">.</span><span class="nx">fn</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span> <span class="c1">//实例方法
</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">Obj</span><span class="p">.</span><span class="nx">a</span><span class="p">);</span> <span class="c1">//undefined
</span>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">Obj</span><span class="p">.</span><span class="nx">fn</span><span class="p">);</span> <span class="c1">//undefined
</span>
            <span class="kd">var</span> <span class="nx">o</span><span class="o">=</span><span class="k">new</span> <span class="nx">Obj</span><span class="p">();</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">o</span><span class="p">.</span><span class="nx">a</span><span class="p">);</span> <span class="c1">//object
</span>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">o</span><span class="p">.</span><span class="nx">fn</span><span class="p">);</span> <span class="c1">//function
</span></pre>
<p>这样可以达到上述目的，然而</p>
<pre class="highlight javascript"><span class="kd">function</span> <span class="nx">Obj</span><span class="p">(){</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">a</span><span class="o">=</span><span class="p">[];</span> <span class="c1">//实例变量
</span>                <span class="k">this</span><span class="p">.</span><span class="nx">fn</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span> <span class="c1">//实例方法
</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="kd">var</span> <span class="nx">o1</span><span class="o">=</span><span class="k">new</span> <span class="nx">Obj</span><span class="p">();</span>
            <span class="nx">o1</span><span class="p">.</span><span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
            <span class="nx">o1</span><span class="p">.</span><span class="nx">fn</span><span class="o">=</span><span class="p">{};</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">o1</span><span class="p">.</span><span class="nx">a</span><span class="p">);</span> <span class="c1">//[1]
</span>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">o1</span><span class="p">.</span><span class="nx">fn</span><span class="p">);</span> <span class="c1">//object
</span>            <span class="kd">var</span> <span class="nx">o2</span><span class="o">=</span><span class="k">new</span> <span class="nx">Obj</span><span class="p">();</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">o2</span><span class="p">.</span><span class="nx">a</span><span class="p">);</span> <span class="c1">//[]
</span>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">o2</span><span class="p">.</span><span class="nx">fn</span><span class="p">);</span> <span class="c1">//function
</span></pre>
<p>上面的代码运行结果完全符合预期，但同时也说明一个问题，在o1中修改了a和fn，而在o2中没有改变，由于数组和函数都是对象，是引用类型，这就说明o1中的属性和方法与o2中的属性与方法虽然同名但却不是一个引用，而是对Obj对象定义的属性和方法的一个复制。</p>

<p>这个对属性来说没有什么问题，但是对于方法来说问题就很大了，因为方法都是在做完全一样的功能，但是却又两份复制，如果一个函数对象有上千和实例方法，那么它的每个实例都要保持一份上千个方法的复制，这显然是不科学的，这可肿么办呢，prototype应运而生。</p>
<h4>prototype</h4>
<p>无论什么时候，只要创建了一个新函数，就会根据一组特定的规则为该函数创建一个prototype属性，默认情况下prototype属性会默认获得一个constructor(构造函数)属性，这个属性是一个指向prototype属性所在函数的指针，有些绕了啊，写代码、上图！</p>
<pre class="highlight javascript"><span class="kd">function</span> <span class="nx">Person</span><span class="p">(){</span>

            <span class="p">}</span>

</pre>
<p><img src="../photo/52ddc1ac55ccefb5ae5f471eccdf29be.png" alt=""></p>

<p>根据上图可以看出Person对象会自动获得prototyp属性，而prototype也是一个对象，会自动获得一个constructor属性，该属性正是指向Person对象。</p>

<p>当调用构造函数创建一个实例的时候，实例内部将包含一个内部指针（很多浏览器这个指针名字为__proto__）指向构造函数的prototype，这个连接存在于实例和构造函数的prototype之间，而不是实例与构造函数之间。</p>
<pre class="highlight javascript"><span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">name</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">printName</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span>
                <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="kd">var</span> <span class="nx">person1</span><span class="o">=</span><span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s1">'Byron'</span><span class="p">);</span>
            <span class="kd">var</span> <span class="nx">person2</span><span class="o">=</span><span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s1">'Frank'</span><span class="p">);</span>
</pre>
<p><img src="../photo/e090d3c46b72c10ce70564e06216da55.png" alt=""></p>

<p>Person的实例person1中包含了name属性，同时自动生成一个__proto__属性，该属性指向Person的prototype，可以访问到prototype内定义的printName方法，大概就是这个样子的</p>

<p><img src="../photo/98bc8038a2234a776a9b76f13779f1d5.png" alt=""></p>

<p>写段程序测试一下看看prototype内属性、方法是能够共享</p>
<pre class="highlight javascript"><span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">name</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">share</span><span class="o">=</span><span class="p">[];</span>

            <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">printName</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span>
                <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="kd">var</span> <span class="nx">person1</span><span class="o">=</span><span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s1">'Byron'</span><span class="p">);</span>
            <span class="kd">var</span> <span class="nx">person2</span><span class="o">=</span><span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s1">'Frank'</span><span class="p">);</span>

            <span class="nx">person1</span><span class="p">.</span><span class="nx">share</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
            <span class="nx">person2</span><span class="p">.</span><span class="nx">share</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person2</span><span class="p">.</span><span class="nx">share</span><span class="p">);</span> <span class="c1">//[1,2]
</span></pre>
<p>果不其然！实际上当代码读取某个对象的某个属性的时候，都会执行一遍搜索，目标是具有给定名字的属性，搜索首先从对象实例开始，如果在实例中找到该属性则返回，如果没有则查找prototype，如果还是没有找到则继续递归prototype的prototype对象，直到找到为止，如果递归到object仍然没有则返回错误。同样道理如果在实例中定义如prototype同名的属性或函数，则会覆盖prototype的属性或函数。</p>
<pre class="highlight javascript"><span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">name</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">share</span><span class="o">=</span><span class="p">[];</span>

            <span class="kd">var</span> <span class="nx">person</span><span class="o">=</span><span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s1">'Byron'</span><span class="p">);</span>
            <span class="nx">person</span><span class="p">.</span><span class="nx">share</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>

            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">share</span><span class="p">);</span> <span class="c1">//0而不是prototype中的[]
</span></pre><h4>构造简单对象</h4>
<p>当然prototype不是专门为解决上面问题而定义的，但是却解决了上面问题。了解了这些知识就可以构建一个科学些的、复用率高的对象，如果希望实例对象的属性或函数则定义到prototype中，如果希望每个实例单独拥有的属性或方法则定义到this中，可以通过构造函数传递实例化参数。</p>
<pre class="highlight javascript"><span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">name</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">share</span><span class="o">=</span><span class="p">[];</span>

            <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">printName</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span>
                <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
            <span class="p">}</span>
</pre>
      </div>

      <div class="excellent">
        <i class="icon small_cert_on"></i> 本帖已被设为精华帖！
      </div>

      

      <div class="tools pull-right">
  
  <a class="likeable" href="../account/password/edit"><i class="icon small_like"></i> <span>喜欢</span></a>
  
  <a href="http://cli.im/api/qrcode"><i class="icon icon-qrcode"></i>二维码</a>
</div>
<div class='social-share-button' data-title='JavaScript prototype via: @testerhome ' data-img='' data-url=''>
<a class="social-share-button-twitter" data-site="twitter" href="257#" onclick="return SocialShareButton.share(this);" rel="nofollow " title="分享到Twitter"></a>
<a class="social-share-button-facebook" data-site="facebook" href="257#" onclick="return SocialShareButton.share(this);" rel="nofollow " title="分享到Facebook"></a>
<a class="social-share-button-google_plus" data-site="google_plus" href="257#" onclick="return SocialShareButton.share(this);" rel="nofollow " title="分享到Google+"></a>
<a class="social-share-button-weibo" data-site="weibo" href="257#" onclick="return SocialShareButton.share(this);" rel="nofollow " title="分享到新浪微博"></a>
<a class="social-share-button-douban" data-site="douban" href="257#" onclick="return SocialShareButton.share(this);" rel="nofollow " title="分享到豆瓣"></a>
</div>

    </div>
  </div>

    <div class="no_result">
      暂无回复。
    </div>

      <div id="reply" class="form box">
    <div style="padding:20px;">
    需要 <a class="btn btn-primary" href="../account/password/edit">登录</a> 后回复方可回复, 如果你还没有账号你可以 <a class="btn btn-danger" href="../account/sign_up">注册</a> 一个帐号。
    </div>
</div>
</div>

  <div class="sidebar">
    
    <div class="box">
  <h2 class="title">小帖士</h2>
  <div class="content">
    @rabbit 希望能够过上每天除了工作还有生活的日子~~惬意。。
  </div>
</div>
    <div class="box clearfix">
  <h2 class="title">节点下其他话题</h2>
  <ul>
    <li><a href="1860" title="阻止 JS 的冒泡事件">阻止 JS 的冒泡事件</a></li>
  </ul>
</div>

  </div>

    </div>
  </div>

  <a class="go_top" href="257#"><i class="icon icons_go_top"></i></a>
  <footer class="footer">
    <div class="container">
      <div class="container">
      <div class="pull-right" style="width:200px; text-align:right;">
<a href="http://www.ucloud.cn/?ref=testerhome.com" target="_blank" rel="twipsy" style="display:inline-block;margin-right:5px;" data-original-title="本站服务器由 Ucloud 赞助"><img src="../photo/2014/ace04e205ff40be04f47de439d253b59.png" style="height:28px"></a>
</div>

<div>
<div class="pull-left" style="margin-right:10px;">
<img src="../photo/2015/7b5b57bb91762429809a9f95255392ad.png" style="width:48px;">
</div>
<p class="links">

<a href="143">关于</a> | 
<a href="http://weibo.com/u/3871514412">微博</a> | 
<a href="../users.1">活跃用户</a> | 
<a href="node13">反馈</a> | 
<a href="https://github.com/testerhome">Github</a> |
<a href="../wiki/spreadtesterhome">帮助推广</a> |  
<a href="http://www.miibeian.gov.cn/">京ICP备13049862号</a>


</p>
<p class="copyright">
TesterHome 移动测试社区，由众多移动测试工作者维护，致力于推进国内测试技术。
</p>
<p class="copyright">
友情链接

<a href="http://ruby-china.org/"  rel="twipsy" style="display:inline-block;margin-right:5px;" data-original-title="感谢RubyChina提供建站代码">Ruby-China</a> | 
<a href="http://www.diggerplus.org/">DiggerPlus</a> | 
<a href="http://www.testwo.com/">测试窝</a> | 
<a href="http://www.kootest.com/">酷测</a> | 
<a href="http://itest.info/">重定向科技</a> |
<a href="http://www.robotium.cn/">Robotium 中国</a> |
<a href="http://cafe.testin.cn/">Testin开发者社区</a>
<script src="http://s4.cnzz.com/z_stat.php?id=1000474281&web_id=1000474281" language="JavaScript"></script>

</p>

</div>
    </div>






    </div>
  </footer>
  <script type="text/javascript" data-turbolinks-eval=false>
    App.root_url = "http://testerhome.com/";
    App.asset_url = "http://testerhome.com";
    App.faye_client_url = "http://testerhome.com:8080/faye";
    if (App.faye_client_url) {
      App.initNotificationSubscribe();
    }
  </script>
    <script type="text/javascript">
    Topics.replies_per_page = 50;
    $(document).ready(function(){
    })
  </script>

  <script type="text/javascript">
      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-45014075-1']);
      _gaq.push(['_setSiteSpeedSampleRate', 100]);
      _gaq.push(['_trackPageview']);
      u=document.getElementById("user_menu");
      ur="";
      if(u) ur=document.getElementById("user_menu").innerText.split(" ")[0]
      _gaq.push(['_setCustomVar', 1,'user',ur,1]);

      (function() {
          var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
          ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
          var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
      })();
  </script>

  <div class="zoom-overlay"></div>
</body>
</html>
