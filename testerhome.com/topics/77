<!--
  App Environments:
  --------------------------------------------------------
  Ruby:  2.1.2-p95
  Rails: 4.1.1
  Thanks to RubyChina
-->
<!DOCTYPE html>
<html>
<head>
  <title>TesterHome | 对 JavaScript 进行单元测试的工具 &raquo; 社区</title>
  <meta charset='utf-8' />
  <meta name="keywords" content="" />
  <meta name="description" content="" />
  <link data-turbolinks-track="true" href="../assets/front-7f214c07ef8cbdd59ba99f0ea4b052b9.css" media="screen" rel="stylesheet" />
    <link href="../assets/mobile-4fb33e42cee242735db607f08badd48a.css" media="screen and (max-width: 798px)" rel="stylesheet" />
  <link rel="shortcut icon" href="../assets/big_logo-e45f9cf8961e479b209d942f449d3b7b.png" />
  <link href="feed" rel="alternate" title="订阅最新帖" type="application/rss+xml" />
  <script data-turbolinks-track="true" src="../assets/app-d8b8d53b12135c77eba5ce7899b456b3.js"></script>
  <meta content="authenticity_token" name="csrf-param" />
<meta content="n6IluQs+rvFYzOtLM2JildRgsvcNIwvZOjb84Ctm9Jg=" name="csrf-token" />
  
  
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "//hm.baidu.com/hm.js?bfca03d31121ff43bab8f1bf58dcb58b";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>

</head>
<body data-offset="50" data-controller-name="topics">
  <div class="navbar navbar-fixed-top">
    <div class="navbar-inner">
      <div class="container">
        <h3>
          <a href="../index.html" class="site-logo"></a>
        </h3>
        <ul class="nav"><li class="first"><a href="../index.html">首页</a></li><li class="active"><a href="../notes/2">社区</a></li><li><a href="../wiki">Wiki</a></li><li><a href="../jobs">招聘</a></li><li class="last"><a href="../sites">酷站</a></li></ul>
        <span class="pull-right">
          <form action="http://testerhome.com/search" class="navbar-search" method="get">
            <input type="text" name="q" class="search-query" value="" placeholder="搜索" />
          </form>

            <ul class="nav pull-right" id="userbar"><li class="first"><a href="../account/sign_up">注册</a></li><li class="last"><a href="../account/password/edit">登录</a></li></ul>

        </span>
      </div>
    </div>
  </div>

  <div class="container">
    
    
    <div id="main" class="container-fluid">
      
<div class="content">
  <div id="topic_show" class="topics box hfeed">
    <div class="topic hentry">
      <div class="infos">
  <div class="pull-right avatar_large">
    <img alt="Normal" class="uface" src="../assets/avatar/normal-85ccf778012f4e1c31eae0d152183034.png" />
  </div>
  <h1 class="entry-title">对 JavaScript 进行单元测试的工具</h1>
  <div class="info leader">
    <a class="node" href="node1">资讯点评</a>
     · 
    匿名
     · 
    于<abbr class="timeago" title="2012-11-01T23:15:36+08:00"></abbr>发布
     · 
    149次阅读
  </div>
</div>

      
      <div class="body entry-content">
        <p>Link  <a href="http://blog.jobbole.com/29747/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=%25e5%25af%25b9-javascript-%25e8%25bf%259b%25e8%25a1%258c%25e5%258d%2595%25e5%2585%2583%25e6%25b5%258b%25e8%25af%2595%25e7%259a%2584%25e5%25b7%25a5%25e5%2585%25b7" rel="nofollow" target="_blank">http://blog.jobbole.com/29747/?utm_source=rss&utm_medium=rss&utm_campaign=%25e5%25af%25b9-javascript-%25e8%25bf%259b%25e8%25a1%258c%25e5%258d%2595%25e5%2585%2583%25e6%25b5%258b%25e8%25af%2595%25e7%259a%2584%25e5%25b7%25a5%25e5%2585%25b7</a></p>

<p>来源：IBM DeveloperWorks<br />
简介<br />
单元测试关注的是验证一个模块或一段代码的执行效果是否和设计或预期一样。有些开发人员认为，编写测试用例浪费时间而宁愿去编写新的模块。然而，在处理大型应用程序时，单元测试实际上会节省时间；它能帮助您跟踪问题并安全地更新代码。<br />
常用缩略语<br />
DOM：文档对象模型<br />
HTML：超文本标记语言<br />
JSTD：JSTestDriver<br />
YUI：Yahoo! User Interface<br />
在过去，只对服务器端语言进行单元测试。但前端组件越来越复杂，使得编写 JavaScript 代码测试用例的需求日益提高。如果您不经常编写客户端脚本的测试，学习进度可能非常难。测试用户界面可能需要在思路上做一些调整。（有些程序开发人员一时半会还不能相信 JavaScript 是合适的编程语言。）<br />
在本文中，您将学习如何使用 QUnit、YUI Test 和 JSTestDriver 对 JavaScript 进行单元测试。<br />
下载 本文的源代码。<br />
JavaScript 单元测试<br />
为了演示 JavaScript 测试，这一节将分析 JavaScript 中一个基本函数测试用例。清单 1 显示了要测试的函数：将 3（作为一个数）添加到传递的变量中。<br />
清单 1. 源代码 (example1&#47;script.js)</p>

<p>function addThreeToNumber(el){<br />
    return el + 3;<br />
}<br />
清单 2 在自执行的函数中包含了测试用例。<br />
清单 2.测试用例 (example1&#47;test.js)</p>

<p>(function testAddThreeToNumber (){<br />
    var a = 5,<br />
        valueExpected= 8;</p>
<pre>if (addThreeToNumber (a) === valueExpected) {
    console.log(&amp;quot;Passed!&amp;quot;);
} else {
    console.log(&amp;quot;Failed!&amp;quot;);
}
</pre>


<p>}());<br />
将 5 传递给测试的函数之后，测试检查返回值是 8。如果测试成功，就会在一个现有浏览器的控制台中打印出 Passed!；否则就会出现 Failed!。如果要运行测试，需要按照以下步骤进行操作：<br />
1. 将两个脚本文件导入作为测试运行程序的 HTML 页面中，如清单 3 所示。<br />
2. 在浏览器中打开页面。<br />
清单 3. HTML 页面 (example1&#47;runner.html)</p>

<p>&lt;!DOCTYPE html&gt;<br />
&lt;html&gt;<br />
     &lt;head&gt;<br />
         &lt;meta http-equiv=&quot;Content-type&quot; content=&quot;text&#47;html; charset=utf-8&quot;&gt;<br />
         &lt;title&gt;Example 1&lt;&#47;title&gt;<br />
         &lt;script type=&quot;text&#47;javascript&quot; src=&quot;js&#47;script.js&quot;&gt;&lt;&#47;script&gt;<br />
          &lt;script type=&quot;text&#47;javascript&quot; src=&quot;js&#47;test.js&quot;&gt;&lt;&#47;script&gt;<br />
     &lt;&#47;head&gt;<br />
     &lt;body&gt;&lt;&#47;body&gt;<br />
&lt;&#47;html&gt;<br />
您可以不使用浏览器控制台，而是将结果打印在页面或由 alert() 方法生成的弹出窗口中。<br />
断言是测试用例中的核心元素，用来验证某一条件是否满足。例如，在 清单 2 中，addThreeToNumber (a) === valueExpected 就是一个断言。<br />
如果您拥有很多用例并带有很多断言，那么使用框架就会方便很多。下面的内容将会重点介绍一些最流行的 JavaScript 单元测试框架：QUnit、YUI Test 和 JSTestDriver。<br />
QUnit 入门<br />
QUnit 是与 JUnit（Java 编程）类似的单元测试框架，jQuery 团队用它来对 jQuery 库进行单元测试。要使用 QUnit，需要按照以下方法：<br />
1. 下载 qunit.css 文件和 qunit.js 文件（参阅 参考资料）。<br />
2. 创建一个 HTML 页面，其中包含导入刚下载的 CSS 和 JavaScript 文件的特定标签。<br />
清单 4 显示了适用于 QUnit 的标准的 HTML 运行程序。<br />
清单 4. HTML 运行程序 (qunit&#47;runner.html) </p>

<p>&lt;!DOCTYPE html&gt;<br />
&lt;html&gt;<br />
    &lt;head&gt;<br />
        &lt;meta charset=&quot;UTF-8&quot; &#47;&gt;<br />
        &lt;title&gt;QUnit Test Suite&lt;&#47;title&gt;<br />
        &lt;link rel=&quot;stylesheet&quot; href=&quot;css&#47;qunit.css&quot; type=&quot;text&#47;css&quot; media=&quot;screen&quot;&gt;<br />
        &lt;script type=&quot;text&#47;javascript&quot; src=&quot;js&#47;lib&#47;qunit.js&quot;&gt;&lt;&#47;script&gt;<br />
    &lt;&#47;head&gt;<br />
    &lt;body&gt;<br />
        &lt;h1 id=&quot;qunit-header&quot;&gt;QUnit Test Suite&lt;&#47;h1&gt;<br />
        &lt;h2 id=&quot;qunit-banner&quot;&gt;&lt;&#47;h2&gt;<br />
        &lt;div id=&quot;qunit-testrunner-toolbar&quot;&gt;&lt;&#47;div&gt;<br />
        &lt;h2 id=&quot;qunit-userAgent&quot;&gt;&lt;&#47;h2&gt;<br />
        &lt;ol id=&quot;qunit-tests&quot;&gt;&lt;&#47;ol&gt;<br />
        &lt;div id=&quot;qunit-fixture&quot;&gt;test markup&lt;&#47;div&gt;<br />
    &lt;&#47;body&gt;<br />
&lt;&#47;html&gt;<br />
假设您拥有两个函数分别负责将温度从摄氏转换为华氏，并转换回来。清单 5 显示了执行此转换的脚本。<br />
清单 5. 转换 (qunit&#47;js&#47;script.js)</p>

<p>function convertFromCelsiusToFahrenheit(c){<br />
    var f = c * (9&#47;5) + 32;<br />
    return f;<br />
}</p>

<p>function convertFromFahrenheitToCelsius(f){<br />
    var c = (f - 32) * (5&#47;9);<br />
    return c;<br />
}<br />
清单 6 显示了各自的测试用例。<br />
清单 6. 测试用例 (qunit&#47;js&#47;test.js)</p>

<p>module (&quot;Temperature conversion&quot;)</p>

<p>test(&quot;conversion to F&quot;, function(){<br />
    var actual1 = convertFromCelsiusToFahrenheit(20);<br />
    equal(actual1, 68, ?Value not correct?);</p>
<pre>var actual2 = convertFromCelsiusToFahrenheit(30);
equal(actual2, 86, ?Value not correct?);
</pre>


<p>})</p>

<p>test(&quot;conversion to C&quot;, function(){<br />
    var actual1 = convertFromFahrenheitToCelsius(68);<br />
    equal(actual1, 20, ?Value not correct?);</p>
<pre>var actual2 = convertFromFahrenheitToCelsius(86);
equal(actual2, 30, ?Value not correct?);
</pre>


<p>})<br />
QUnit 中的测试用例由 test() 方法定义。逻辑是包含在传入函数的第二个参数中。在清单 6 中，两个测试分别名为 conversion to F和 conversion to C。每个测试包含两个断言。该测试中的断言使用了 equal() 方法。equal() 函数可以将预期值与测试函数的实际值相比较。equal() 方法中的第三个参数是错误情况下显示的消息。<br />
还可以通过 module() 函数将测试组织到模块中。在清单 6 中，Temperature conversion 模块含有这两个测试。<br />
如果要运行测试：<br />
1. 在 HTML 运行程序中包含源代码和测试文件，如清单 7 所示。<br />
2. 在浏览器中打开页面。<br />
清单 7. 在运行程序中包含 script.js 和 test.js</p>

<p>...&lt;script type=&quot;text&#47;javascript&quot; src=&quot;js&#47;script.js&quot;&gt;&lt;&#47;script&gt;<br />
&lt;script type=&quot;text&#47;javascript&quot; src=&quot;js&#47;test.js&quot;&gt;&lt;&#47;script&gt;<br />
...<br />
图 1 显示了 QUnit 如何在浏览器 (Firefox) 中显示结果。<br />
图 1. QUnit 结果</p>

<p>清单 6 中的断言使用了 equal() 方法，但它不是 QUnit 提供的惟一断言。QUnit 提供的其他断言包括 ok() 或 strictEqual()。清单 8 显示了正在执行的方法。<br />
清单 8. 更多的断言</p>

<p>module (&quot;Other assertion&quot;);<br />
test(&quot;assertions&quot;, function(){<br />
    ok(true);<br />
    ok(3);<br />
    strictEqual(&quot;c&quot;, &quot;c&quot;);<br />
    equal (3, &quot;3&quot;);<br />
});<br />
ok() 函数检查第一个参数为 true；strictEqual() 验证第一个参数严格等于第二个参数。在这些代码背后，strictEqual() 使用了=== 运算符，equal() 使用了 == 运算符。<br />
如果测试失败，QUnit 还提供了有用的信息。将清单 8 中的代码改成清单 9 中的代码，让上一次断言执行失败。<br />
清单 9. 上一次断言出现的错误</p>

<p>module (&quot;Other assertion&quot;);<br />
test(&quot;assertions&quot;, function(){<br />
    ok(true);<br />
    ok(3);<br />
    strictEqual(&quot;c&quot;, &quot;c&quot;);<br />
    strictEqual (3, &quot;3&quot;);<br />
});<br />
图 2 显示了 QUnit 执行清单 9 代码所返回的结果。<br />
图 2. QUnit 结果：上次测试失败</p>

<p>结果非常详细，而且很容易查到上次断言的预期值与实际值有什么不同。<br />
QUnit 另一项特性能让您在模块中的所有测试执行之前或之后执行命令。module() 函数接受 setup() 和 teardown() 回调作为第二个参数。使用 setup() 函数更新 清单 6 ，如清单 10 所示。<br />
清单 10. setup() (qunit&#47;js&#47;test-setup.js)<br />
module (&quot;Temperature conversion&quot;, {<br />
    setup : function() {<br />
        this.celsius1 = 20;<br />
        this.celsius2 = 30;</p>
<pre>    this.fahrenheit1 = 68;
    this.fahrenheit2 = 86;
}
</pre>


<p>});<br />
test(&quot;conversion to F&quot;, function(){<br />
    var actual1 = convertFromCelsiusToFahrenheit(this.celsius1);<br />
    equal(actual1, this.fahrenheit1);</p>
<pre>var actual2 = convertFromCelsiusToFahrenheit(this.celsius2);
equal(actual2, this.fahrenheit2);
</pre>


<p>});<br />
test(&quot;conversion to C&quot;, function(){<br />
    var actual1 = convertFromFahrenheitToCelsius(this.fahrenheit1);<br />
    equal(actual1, this.celsius1);</p>
<pre>var actual2 = convertFromFahrenheitToCelsius(this.fahrenheit2);
equal(actual2, this.celsius2);
</pre>


<p>});<br />
该示例移动了设置部分的断言所使用的值，以避免在测试的逻辑中使用这些值。<br />
QUnit 还通过 asyncTest() 函数提供对异步测试的支持，如果您使用 Asynchronous JavaScript and XML (Ajax)，这是非常有用的特性。在这样的环境中，expect() 函数可以让你轻松地验证测试中运行的断言数量。<br />
YUI Test：独立的单元测试模块<br />
YUI Test 是 YUI 库（Yahoo!）的一个组件，是一个可扩展而完整的单元测试框架。如果要使用 YUI Test，需要：<br />
1. 将 YUI 导入 HTML 运行程序，如下所示。<br />
&lt;script src=&quot;<a href="http://yui.yahooapis.com/3.4.1/build/yui/yui-min.js&amp;quot&amp;gt&amp;lt/script" rel="nofollow" target="_blank">http://yui.yahooapis.com/3.4.1/build/yui/yui-min.js&quot&gt&lt/script</a>;&gt;<br />
如以上代码所示，此样例使用了 YUI Test 第 3 版本。<br />
2. 在测试脚本文件中，实例化 YUI 函数。加载所需的模块，test 和 console，如清单 11 所示。<br />
清单 11.下载 test 和 console YUI 模块<br />
YUI().use(&quot;test&quot;, &quot;console&quot;, function (Y) {<br />
     &#47;&#47; Test cases go here<br />
});<br />
test 模块显然是用于测试的。console 模块并不是强制性的，但本示例将用它来打印结果。测试用例将会进入回调中，并以全局的 Y实例作为参数。<br />
YUI Test 使用 Y.Test.Case() 构造函数实例化新测试用例，使用 Y.Test.Suite() 构造函数来实例化测试套件。测试套件与 JUnit 类似，包含若干个测试用例。可以使用 add() 方法将测试用例添加到测试套件中。<br />
我们使用 YUI test 重新测试 清单 5 中的源代码。清单 12 显示了如何创建测试用的套件和测试用例。<br />
清单 12. 测试套件和用例<br />
YUI().use(&quot;test&quot;, &quot;console&quot;, function (Y) {</p>
<pre> var suite = new Y.Test.Suite(&amp;quot;Temperature conversion suite&amp;quot;);

 //add a test case
 suite.add(new Y.Test.Case({
     name:&amp;quot;Temperature conversion?
 )); 
</pre>


<p>});<br />
清单 12 生成了一个名为 Temperature conversion suite 的套件和一个名为 Temperature conversion 的测试用例。现在，可以将测试方法写入对象文本中，作为参数传递给 Y.Test.Case 构造函数，如清单 13 所示。<br />
清单 13. 测试用例与测试方法<br />
suite.add(new Y.Test.Case({<br />
    name:&quot;Temperature conversion&quot;,</p>
<pre>setUp : function () {
    this.celsius1 = 20;
    this.celsius2 = 30;

    this.fahrenheit1 = 68;
    this.fahrenheit2 = 86;
},

testConversionCtoF: function () {
    Y.Assert.areEqual(this.fahrenheit1,         
</pre>


<p>convertFromCelsiusToFahrenheit(this.celsius1));</p>
<pre>    Y.Assert.areEqual(this.fahrenheit2, 
</pre>


<p>convertFromCelsiusToFahrenheit(this.celsius2));<br />
    },</p>
<pre>testConversionFtoC: function () {
    Y.Assert.areEqual(this.celsius1,
</pre>


<p>convertFromFahrenheitToCelsius(this.fahrenheit1));</p>
<pre>    Y.Assert.areEqual(this.celsius2, 
</pre>


<p>convertFromFahrenheitToCelsius(this.fahrenheit2));<br />
    }<br />
}));<br />
您可能注意到，在清单 13 中：<br />
1. 可使用 setUp() 方法。YUI Test 在测试用例和测试套件层提供了 setUp() 和 tearDown() 方法。<br />
2. 测试方法名以 test 单词开头，它们包含断言。<br />
3. 本示例使用 Y.Assert.areEqual() 断言类型，它与 QUnit 中的 equal() 函数类似。YUI Test 为断言提供了多种方法，如：<br />
1). Y.Assert.areSame()，它类似于 QUnit 中的 strictEqual()。<br />
2). 数据类型断言（Y.Assert.isArray()、Y.Assert.isBoolean()、Y.Assert.isNumber() 等等）。<br />
3). 特殊值断言（Y.Assert.isFalse()、Y.Assert.isNaN()、Y.Assert.isNull() 等等）。<br />
要启动 YUI 中的测试，需要使用 Y.Test.Runner 对象。还需要将套件或测试用例添加到对象中，然后调用 run() 方法来运行测试。清单 14 显示了如何运行 清单 13 中创建的测试。<br />
清单 14. 运行 YUI test</p>

<p>Y.Test.Runner.add(suite);<br />
Y.Test.Runner.run();<br />
在默认情况下，结果会打印在浏览器的控制台中（如果浏览器支持控制台的话）。更好的方法是使用 Yahoo! Console 组件来打印结果。如果要使用 Yahoo! Console 组件，需要采用 Y.Console 构造函数将控制台绑定到 HTML 运行程序的 DOM 元素中，如清单 15 所示。<br />
清单 15. Yahoo! Console</p>

<p>var console = new Y.Console({<br />
    verbose: true,<br />
    newestOnTop: false,<br />
    width:&quot;600px&quot;<br />
});</p>

<p>console.render(&#39;#testLogger&#39;);<br />
清单 15 显示了如何使用几个参数配置控制台。该控制台会在 DOM 元素内部呈现，其 id 为 testLogger。<br />
需要更新 HTML 运行程序。添加该控制台所引用的 DOM 元素，如清单 16 所示。</p>

<p>&lt;body&gt;<br />
     &lt;div id=&quot;testLogger&quot;&gt;&lt;&#47;div&gt; <br />
&lt;&#47;body&gt;<br />
本例为 &lt;body&gt; 设置了一个类，名为 yui3-skin-sam。该类负责定义控制台的皮肤。<br />
图 3 显示了运行测试之后的控制台。<br />
图 3. YUI Test 结果</p>

<p>使用 JSTestDriver 轻松测试<br />
通过使用功能强大的 JSTestDriver (JSTD) 工具，您能够在多个浏览器中从命令行运行 JavaScript。JSTD 带有一个 JAR 文件，它可以让您启动服务器、捕获一或多个浏览器并在这些浏览器中运行测试。因为拥有上述的两个框架，您不需要 HTML 运行程序，但您需要一个配置文件。图 17 显示了配置文件。<br />
清单 17. 配置文件 (jsTestDriver.conf)</p>

<p>server: http:&#47;&#47;localhost:4224<br />
load:<br />
  - js&#47;src&#47;<em>.js<br />
test:<br />
  - js&#47;test&#47;</em>.js<br />
该配置文件是用 YAML 编写的，这是一种很好的配置文件格式。它包含了要启动的服务器以及源代码和测试文件的位置信息。<br />
要使用 JSTD 来执行测试：<br />
1. 启动测试服务器。从命令行中，进入到保存 jsTestDriver.jar 的文件夹，并执行以下命令：<br />
java -jar JsTestDriver-1.3.3d.jar -port 4224<br />
清单 17 中指定的端口应该与配置文件中指定的一样。在默认情况下，JSTD 会在 JAR 文件所在的同一个目录下查找 jsTestDriver.conf 文件。<br />
2. 在测试中，通过将 URL http:&#47;&#47;localhost:4224&#47;capture 复制粘贴到测试中的浏览器，在服务器上注册一个或多个浏览器。<br />
测试之前示例中所使用的相同代码（清单 5），但这次使用 JSTD 语法。清单 18 显示了如何转换 清单 10 的 QUnit 和 清单14 的 YUI Test 中的代码。<br />
清单 18. JSTD 测试</p>

<p>TestCase(&quot;Temperature conversion&quot;, {<br />
    setUp : function () {<br />
        this.celsius1 = 20;<br />
        this.celsius2 = 30;</p>
<pre>    this.fahrenheit1 = 68;
    this.fahrenheit2 = 86;
},

testConversionCtoF: function () {
    assertSame(this.fahrenheit1, convertFromCelsiusToFahrenheit(this.celsius1));
    assertSame(this.fahrenheit2, convertFromCelsiusToFahrenheit(this.celsius2));
},

testConversionFtoC: function () {
    assertSame(this.celsius1, convertFromFahrenheitToCelsius(this.fahrenheit1));
    assertSame(this.celsius2, convertFromFahrenheitToCelsius(this.fahrenheit2));
}
</pre>


<p>});<br />
清单 18 中的代码与 YUI 版本差别不大。JSTD 使用 TestCase() 函数来定义测试用例。您可以使用内联声明来定义测试方法，如清单 18 所示，或者可以扩展 TestCase 实例的原型。每个测试用例还可以使用 SetUp() 和 tearDown() 方法。<br />
如果要运行测试，运行以下命令：<br />
java -jar JsTestDriver-1.3.3d.jar --tests all<br />
图 4 显示了终端上的输出结果。<br />
图 4. JSTD 测试的结果</p>

<p>测试会传入之前捕获到的所有浏览器（Chrome 15、Safari 5 和 Firefox 7）。<br />
JSTD 还能与您偏好的连续集成系统很好地集成，成为连续版本的一部分。它还能与 IDE 集成，如 Eclipse（插件）或 TextMate（包）。<br />
结束语<br />
随着现在对 Web 应用程序客户端的关注，对 JavaScript 进行单元测试就显得尤为必要。有很多框架可以帮助您完成此任务，本文介绍了三个最流行的框架：QUnit、YUI Test 和 JSTestDriver。<br />
QUnit 非常简单，很适合初学者的框架。<br />
YUI Test 是个全面的工具，适合熟悉 YUI 库的用户。<br />
JSTestDriver 可在多个浏览器中运行测试。<br />
相关文章高效的JavaScript单元测试 Javascript模块化编程（二）：AMD规范用JSLint精炼提升JavaScript代码页面构建和js前端不得不说的那点事儿Javascript模块化编程（一）：模块的写法</p>

<p>Link  <a href="http://blog.jobbole.com/29747/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=%25e5%25af%25b9-javascript-%25e8%25bf%259b%25e8%25a1%258c%25e5%258d%2595%25e5%2585%2583%25e6%25b5%258b%25e8%25af%2595%25e7%259a%2584%25e5%25b7%25a5%25e5%2585%25b7" rel="nofollow" target="_blank">http://blog.jobbole.com/29747/?utm_source=rss&utm_medium=rss&utm_campaign=%25e5%25af%25b9-javascript-%25e8%25bf%259b%25e8%25a1%258c%25e5%258d%2595%25e5%2585%2583%25e6%25b5%258b%25e8%25af%2595%25e7%259a%2584%25e5%25b7%25a5%25e5%2585%25b7</a></p>
      </div>


      

      <div class="tools pull-right">
  
  <a class="likeable" href="../account/password/edit"><i class="icon small_like"></i> <span>喜欢</span></a>
  
  <a href="http://cli.im/api/qrcode"><i class="icon icon-qrcode"></i>二维码</a>
</div>
<div class='social-share-button' data-title='对 JavaScript 进行单元测试的工具 via: @testerhome ' data-img='' data-url=''>
<a class="social-share-button-twitter" data-site="twitter" href="77#" onclick="return SocialShareButton.share(this);" rel="nofollow " title="分享到Twitter"></a>
<a class="social-share-button-facebook" data-site="facebook" href="77#" onclick="return SocialShareButton.share(this);" rel="nofollow " title="分享到Facebook"></a>
<a class="social-share-button-google_plus" data-site="google_plus" href="77#" onclick="return SocialShareButton.share(this);" rel="nofollow " title="分享到Google+"></a>
<a class="social-share-button-weibo" data-site="weibo" href="77#" onclick="return SocialShareButton.share(this);" rel="nofollow " title="分享到新浪微博"></a>
<a class="social-share-button-douban" data-site="douban" href="77#" onclick="return SocialShareButton.share(this);" rel="nofollow " title="分享到豆瓣"></a>
</div>

    </div>
  </div>

    <div class="no_result">
      暂无回复。
    </div>

      <div id="reply" class="form box">
    <div style="padding:20px;">
    需要 <a class="btn btn-primary" href="../account/password/edit">登录</a> 后回复方可回复, 如果你还没有账号你可以 <a class="btn btn-danger" href="../account/sign_up">注册</a> 一个帐号。
    </div>
</div>
</div>

  <div class="sidebar">
    
    <div class="box">
  <h2 class="title">小帖士</h2>
  <div class="content">
    @jakewendao: 希望拿到本科学历，希望英语可以跟外国人完美交流，希望工资涨到1W块！目前就这些，另外家人身体健康！
  </div>
</div>
    <div class="box clearfix">
  <h2 class="title">节点下其他话题</h2>
  <ul>
    <li><a href="1378" title="《刀塔传奇》之互联网从业人员评测">《刀塔传奇》之互联网从业人员评测</a></li>
  </ul>
</div>

  </div>

    </div>
  </div>

  <a class="go_top" href="77#"><i class="icon icons_go_top"></i></a>
  <footer class="footer">
    <div class="container">
      <div class="container">
      <div class="pull-right" style="width:200px; text-align:right;">
<a href="http://www.ucloud.cn/?ref=testerhome.com" target="_blank" rel="twipsy" style="display:inline-block;margin-right:5px;" data-original-title="本站服务器由 Ucloud 赞助"><img src="../photo/2014/ace04e205ff40be04f47de439d253b59.png" style="height:28px"></a>
</div>

<div>
<div class="pull-left" style="margin-right:10px;">
<img src="../photo/2015/7b5b57bb91762429809a9f95255392ad.png" style="width:48px;">
</div>
<p class="links">

<a href="143">关于</a> | 
<a href="http://weibo.com/u/3871514412">微博</a> | 
<a href="../users.1">活跃用户</a> | 
<a href="node13">反馈</a> | 
<a href="https://github.com/testerhome">Github</a> |
<a href="../wiki/spreadtesterhome">帮助推广</a> |  
<a href="http://www.miibeian.gov.cn/">京ICP备13049862号</a>


</p>
<p class="copyright">
TesterHome 移动测试社区，由众多移动测试工作者维护，致力于推进国内测试技术。
</p>
<p class="copyright">
友情链接

<a href="http://ruby-china.org/"  rel="twipsy" style="display:inline-block;margin-right:5px;" data-original-title="感谢RubyChina提供建站代码">Ruby-China</a> | 
<a href="http://www.diggerplus.org/">DiggerPlus</a> | 
<a href="http://www.testwo.com/">测试窝</a> | 
<a href="http://www.kootest.com/">酷测</a> | 
<a href="http://itest.info/">重定向科技</a> |
<a href="http://www.robotium.cn/">Robotium 中国</a> |
<a href="http://cafe.testin.cn/">Testin开发者社区</a>
<script src="http://s4.cnzz.com/z_stat.php?id=1000474281&web_id=1000474281" language="JavaScript"></script>

</p>

</div>
    </div>






    </div>
  </footer>
  <script type="text/javascript" data-turbolinks-eval=false>
    App.root_url = "http://testerhome.com/";
    App.asset_url = "http://testerhome.com";
    App.faye_client_url = "http://testerhome.com:8080/faye";
    if (App.faye_client_url) {
      App.initNotificationSubscribe();
    }
  </script>
    <script type="text/javascript">
    Topics.replies_per_page = 50;
    $(document).ready(function(){
    })
  </script>

  <script type="text/javascript">
      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-45014075-1']);
      _gaq.push(['_setSiteSpeedSampleRate', 100]);
      _gaq.push(['_trackPageview']);
      u=document.getElementById("user_menu");
      ur="";
      if(u) ur=document.getElementById("user_menu").innerText.split(" ")[0]
      _gaq.push(['_setCustomVar', 1,'user',ur,1]);

      (function() {
          var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
          ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
          var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
      })();
  </script>

  <div class="zoom-overlay"></div>
</body>
</html>
